{"ast":null,"code":"import _objectSpread from\"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{JSBI,Percent,Router,TradeType}from'fomoswap-story';import{useMemo}from'react';import{BIPS_BASE,DEFAULT_DEADLINE_FROM_NOW,INITIAL_ALLOWED_SLIPPAGE}from'../constants';import{getTradeVersion,useV1TradeExchangeAddress}from'../data/V1';import{useTransactionAdder}from'../state/transactions/hooks';import{calculateGasMargin,getRouterContract,isAddress,shortenAddress}from'../utils';import isZero from'../utils/isZero';import v1SwapArguments from'../utils/v1SwapArguments';import{useActiveWeb3React}from'./index';import{useV1ExchangeContract}from'./useContract';import useENS from'./useENS';import{Version}from'./useToggledVersion';export let SwapCallbackState;(function(SwapCallbackState){SwapCallbackState[SwapCallbackState[\"INVALID\"]=0]=\"INVALID\";SwapCallbackState[SwapCallbackState[\"LOADING\"]=1]=\"LOADING\";SwapCallbackState[SwapCallbackState[\"VALID\"]=2]=\"VALID\";})(SwapCallbackState||(SwapCallbackState={}));/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */function useSwapCallArguments(trade){let allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;let deadline=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_DEADLINE_FROM_NOW;let// in seconds from now\nrecipientAddressOrName=arguments.length>3?arguments[3]:undefined;const{account,chainId,library}=useActiveWeb3React();const{address:recipientAddress}=useENS(recipientAddressOrName);const recipient=recipientAddressOrName===null?account:recipientAddress;const v1Exchange=useV1ExchangeContract(useV1TradeExchangeAddress(trade),true);return useMemo(()=>{const tradeVersion=getTradeVersion(trade);if(!trade||!recipient||!library||!account||!tradeVersion||!chainId)return[];const contract=tradeVersion===Version.v2?getRouterContract(chainId,library,account):v1Exchange;if(!contract){return[];}const swapMethods=[];switch(tradeVersion){case Version.v2:swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:false,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient,ttl:deadline}));if(trade.tradeType===TradeType.EXACT_INPUT){swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:true,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient,ttl:deadline}));}break;case Version.v1:swapMethods.push(v1SwapArguments(trade,{allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient,ttl:deadline}));break;}return swapMethods.map(parameters=>({parameters,contract}));},[account,allowedSlippage,chainId,deadline,library,recipient,trade,v1Exchange]);}// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade){let allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;let deadline=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_DEADLINE_FROM_NOW;let// in seconds from now\nrecipientAddressOrName=arguments.length>3?arguments[3]:undefined;const{account,chainId,library}=useActiveWeb3React();const swapCalls=useSwapCallArguments(trade,allowedSlippage,deadline,recipientAddressOrName);const addTransaction=useTransactionAdder();const{address:recipientAddress}=useENS(recipientAddressOrName);const recipient=recipientAddressOrName===null?account:recipientAddress;return useMemo(()=>{if(!trade||!library||!account||!chainId){return{state:SwapCallbackState.INVALID,callback:null,error:'Missing dependencies'};}if(!recipient){if(recipientAddressOrName!==null){return{state:SwapCallbackState.INVALID,callback:null,error:'Invalid recipient'};}else{return{state:SwapCallbackState.LOADING,callback:null,error:null};}}const tradeVersion=getTradeVersion(trade);return{state:SwapCallbackState.VALID,callback:async function onSwap(){const estimatedCalls=await Promise.all(swapCalls.map(call=>{const{parameters:{methodName,args,value},contract}=call;const options=!value||isZero(value)?{}:{value};return contract.estimateGas[methodName](...args,options).then(gasEstimate=>{return{call,gasEstimate};}).catch(gasError=>{console.debug('Gas estimate failed, trying eth_call to extract error',call);return contract.callStatic[methodName](...args,options).then(result=>{console.debug('Unexpected successful call after failed estimate gas',call,gasError,result);return{call,error:new Error('Unexpected issue with estimating the gas. Please try again.')};}).catch(callError=>{console.debug('Call threw error',call,callError);let errorMessage;switch(callError.reason){case'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':case'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':errorMessage='This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';break;default:errorMessage=\"The transaction cannot succeed due to error: \".concat(callError.reason,\". This is probably an issue with one of the tokens you are swapping.\");}return{call,error:new Error(errorMessage)};});});}));// a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\nconst successfulEstimation=estimatedCalls.find((el,ix,list)=>'gasEstimate'in el&&(ix===list.length-1||'gasEstimate'in list[ix+1]));if(!successfulEstimation){const errorCalls=estimatedCalls.filter(call=>'error'in call);if(errorCalls.length>0)throw errorCalls[errorCalls.length-1].error;throw new Error('Unexpected error. Please contact support: none of the calls threw an error');}const{call:{contract,parameters:{methodName,args,value}},gasEstimate}=successfulEstimation;return contract[methodName](...args,_objectSpread({gasLimit:calculateGasMargin(gasEstimate)},value&&!isZero(value)?{value,from:account}:{from:account})).then(response=>{const inputSymbol=trade.inputAmount.currency.symbol;const outputSymbol=trade.outputAmount.currency.symbol;const inputAmount=trade.inputAmount.toSignificant(3);const outputAmount=trade.outputAmount.toSignificant(3);const base=\"Swap \".concat(inputAmount,\" \").concat(inputSymbol,\" for \").concat(outputAmount,\" \").concat(outputSymbol);const withRecipient=recipient===account?base:\"\".concat(base,\" to \").concat(recipientAddressOrName&&isAddress(recipientAddressOrName)?shortenAddress(recipientAddressOrName):recipientAddressOrName);const withVersion=tradeVersion===Version.v2?withRecipient:\"\".concat(withRecipient,\" on \").concat(tradeVersion.toUpperCase());addTransaction(response,{summary:withVersion});return response.hash;}).catch(error=>{// if the user rejected the tx, pass this along\nif((error===null||error===void 0?void 0:error.code)===4001){throw new Error('Transaction rejected.');}else{// otherwise, the error was unexpected and we need to convey that\nconsole.error(\"Swap failed\",error,methodName,args,value);throw new Error(\"Swap failed: \".concat(error.message));}});},error:null};},[trade,library,account,chainId,recipient,recipientAddressOrName,swapCalls,addTransaction]);}","map":{"version":3,"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useV1TradeExchangeAddress","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","v1SwapArguments","useActiveWeb3React","useV1ExchangeContract","useENS","Version","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","arguments","length","undefined","deadline","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","v1Exchange","tradeVersion","contract","v2","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","ttl","tradeType","EXACT_INPUT","v1","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","concat","successfulEstimation","find","el","ix","list","errorCalls","filter","_objectSpread","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","withVersion","toUpperCase","summary","hash","code","message"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from 'fomoswap-story'\nimport { useMemo } from 'react'\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport v1SwapArguments from '../utils/v1SwapArguments'\nimport { useActiveWeb3React } from './index'\nimport { useV1ExchangeContract } from './useContract'\nimport useENS from './useENS'\nimport { Version } from './useToggledVersion'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true)\n\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade)\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId) return []\n\n    const contract: Contract | null =\n      tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          })\n        )\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n              recipient,\n              ttl: deadline\n            })\n          )\n        }\n        break\n      case Version.v1:\n        swapMethods.push(\n          v1SwapArguments(trade, {\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          })\n        )\n        break\n    }\n    return swapMethods.map(parameters => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      } else {\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\n      }\n    }\n\n    const tradeVersion = getTradeVersion(trade)\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map(call => {\n            const {\n              parameters: { methodName, args, value },\n              contract\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then(gasEstimate => {\n                return {\n                  call,\n                  gasEstimate\n                }\n              })\n              .catch(gasError => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then(result => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch(callError => {\n                    console.debug('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value }\n          },\n          gasEstimate\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? { value, from: account } : { from: account })\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            const withVersion =\n              tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`\n\n            addTransaction(response, {\n              summary: withVersion\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}