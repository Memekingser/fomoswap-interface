{"ast":null,"code":"import _objectWithoutProperties from\"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){const data=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  width: 0;\\n  position: relative;\\n  font-weight: 500;\\n  outline: none;\\n  border: none;\\n  flex: 1 1 auto;\\n  background-color: \",\";\\n  font-size: \",\";\\n  text-align: \",\";\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding: 0px;\\n  -webkit-appearance: textfield;\\n\\n  ::-webkit-search-decoration {\\n    -webkit-appearance: none;\\n  }\\n\\n  [type='number'] {\\n    -moz-appearance: textfield;\\n  }\\n\\n  ::-webkit-outer-spin-button,\\n  ::-webkit-inner-spin-button {\\n    -webkit-appearance: none;\\n  }\\n\\n  ::placeholder {\\n    color: \",\";\\n  }\\n\"]);_templateObject=function(){return data;};return data;}import React from'react';import styled from'styled-components';import{escapeRegExp}from'../../utils';const StyledInput=styled.input(_templateObject(),_ref=>{let{error,theme}=_ref;return error?theme.red1:theme.text1;},_ref2=>{let{theme}=_ref2;return theme.bg1;},_ref3=>{let{fontSize}=_ref3;return fontSize!==null&&fontSize!==void 0?fontSize:'24px';},_ref4=>{let{align}=_ref4;return align&&align;},_ref5=>{let{theme}=_ref5;return theme.text4;});const inputRegex=RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\");// match escaped \".\" characters via in a non-capturing group\nexport const Input=React.memo(function InnerInput(_ref6){let{value,onUserInput,placeholder}=_ref6,rest=_objectWithoutProperties(_ref6,[\"value\",\"onUserInput\",\"placeholder\"]);const enforcer=nextUserInput=>{if(nextUserInput===''||inputRegex.test(escapeRegExp(nextUserInput))){onUserInput(nextUserInput);}};return/*#__PURE__*/React.createElement(StyledInput,Object.assign({},rest,{value:value,onChange:event=>{// replace commas with periods, because uniswap exclusively uses period as the decimal separator\nenforcer(event.target.value.replace(/,/g,'.'));}// universal input options\n,inputMode:\"decimal\",title:\"Token Amount\",autoComplete:\"off\",autoCorrect:\"off\"// text-specific options\n,type:\"text\",pattern:\"^[0-9]*[.,]?[0-9]*$\",placeholder:placeholder||'0.0',minLength:1,maxLength:79,spellCheck:\"false\"}));});export default Input;// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"names":["React","styled","escapeRegExp","StyledInput","input","_templateObject","_ref","error","theme","red1","text1","_ref2","bg1","_ref3","fontSize","_ref4","align","_ref5","text4","inputRegex","RegExp","Input","memo","InnerInput","_ref6","value","onUserInput","placeholder","rest","_objectWithoutProperties","enforcer","nextUserInput","test","createElement","Object","assign","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.red1 : theme.text1)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '24px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={event => {\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title=\"Token Amount\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"],"mappings":"8oCAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,YAAY,KAAQ,aAAa,CAE1C,KAAM,CAAAC,WAAW,CAAGF,MAAM,CAACG,KAAK,CAAAC,eAAA,GACrBC,IAAA,MAAC,CAAEC,KAAK,CAAEC,KAAM,CAAC,CAAAF,IAAA,OAAM,CAAAC,KAAK,CAAGC,KAAK,CAACC,IAAI,CAAGD,KAAK,CAACE,KAAK,EAAC,CAO7CC,KAAA,MAAC,CAAEH,KAAM,CAAC,CAAAG,KAAA,OAAK,CAAAH,KAAK,CAACI,GAAG,GAC/BC,KAAA,MAAC,CAAEC,QAAS,CAAC,CAAAD,KAAA,OAAK,CAAAC,QAAQ,SAARA,QAAQ,UAARA,QAAQ,CAAI,MAAM,GACnCC,KAAA,MAAC,CAAEC,KAAM,CAAC,CAAAD,KAAA,OAAK,CAAAC,KAAK,EAAIA,KAAK,GAqBhCC,KAAA,MAAC,CAAET,KAAM,CAAC,CAAAS,KAAA,OAAK,CAAAT,KAAK,CAACU,KAAK,GAEtC,CAED,KAAM,CAAAC,UAAU,CAAGC,MAAM,yBAAyB,CAAC,CAAC;AAEpD,MAAO,MAAM,CAAAC,KAAK,CAAGrB,KAAK,CAACsB,IAAI,CAAC,QAAS,CAAAC,UAAUA,CAAAC,KAAA,CAWqB,IAXpB,CAClDC,KAAK,CACLC,WAAW,CACXC,WAQmE,CAAC,CAAAH,KAAA,CAPjEI,IAAI,CAAAC,wBAAA,CAAAL,KAAA,wCAQP,KAAM,CAAAM,QAAQ,CAAIC,aAAqB,EAAK,CAC1C,GAAIA,aAAa,GAAK,EAAE,EAAIZ,UAAU,CAACa,IAAI,CAAC9B,YAAY,CAAC6B,aAAa,CAAC,CAAC,CAAE,CACxEL,WAAW,CAACK,aAAa,CAAC,CAC5B,CACF,CAAC,CAED,mBACE/B,KAAA,CAAAiC,aAAA,CAAC9B,WAAW,CAAA+B,MAAA,CAAAC,MAAA,IACNP,IAAI,EACRH,KAAK,CAAEA,KAAM,CACbW,QAAQ,CAAEC,KAAK,EAAI,CACjB;AACAP,QAAQ,CAACO,KAAK,CAACC,MAAM,CAACb,KAAK,CAACc,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAAC,CACjD,CACA;AAAA,CACAC,SAAS,CAAC,SAAS,CACnBC,KAAK,CAAC,cAAc,CACpBC,YAAY,CAAC,KAAK,CAClBC,WAAW,CAAC,KACZ;AAAA,CACAC,IAAI,CAAC,MAAM,CACXC,OAAO,CAAC,qBAAqB,CAC7BlB,WAAW,CAAEA,WAAW,EAAI,KAAM,CAClCmB,SAAS,CAAE,CAAE,CACbC,SAAS,CAAE,EAAG,CACdC,UAAU,CAAC,OAAO,EACnB,CAAC,CAEN,CAAC,CAAC,CAEF,cAAe,CAAA3B,KAAK,CAEpB","ignoreList":[]},"metadata":{},"sourceType":"module"}