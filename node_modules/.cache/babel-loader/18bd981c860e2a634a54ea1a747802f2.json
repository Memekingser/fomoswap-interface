{"ast":null,"code":"/**\n * Given a URI that may be ipfs, or http, or an ENS name, return the fetchable http(s) URLs for the same content\n * @param uri to convert to http url\n */export default function uriToHttp(uri){try{const parsed=new URL(uri);if(parsed.protocol==='http:'){return['https'+uri.substr(4),uri];}else if(parsed.protocol==='https:'){return[uri];}else if(parsed.protocol==='ipfs:'){var _parsed$href$match;const hash=(_parsed$href$match=parsed.href.match(/^ipfs:(\\/\\/)?(.*)$/))===null||_parsed$href$match===void 0?void 0:_parsed$href$match[2];return[\"https://cloudflare-ipfs.com/ipfs/\".concat(hash,\"/\"),\"https://ipfs.io/ipfs/\".concat(hash,\"/\")];}else if(parsed.protocol==='ipns:'){var _parsed$href$match2;const name=(_parsed$href$match2=parsed.href.match(/^ipns:(\\/\\/)?(.*)$/))===null||_parsed$href$match2===void 0?void 0:_parsed$href$match2[2];return[\"https://cloudflare-ipfs.com/ipns/\".concat(name,\"/\"),\"https://ipfs.io/ipns/\".concat(name,\"/\")];}else{return[];}}catch(error){if(uri.toLowerCase().endsWith('.eth')){return[\"https://\".concat(uri.toLowerCase(),\".link\")];}return[];}}","map":{"version":3,"names":["uriToHttp","uri","parsed","URL","protocol","substr","_parsed$href$match","hash","href","match","concat","_parsed$href$match2","name","error","toLowerCase","endsWith"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/utils/uriToHttp.ts"],"sourcesContent":["/**\n * Given a URI that may be ipfs, or http, or an ENS name, return the fetchable http(s) URLs for the same content\n * @param uri to convert to http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  try {\n    const parsed = new URL(uri)\n    if (parsed.protocol === 'http:') {\n      return ['https' + uri.substr(4), uri]\n    } else if (parsed.protocol === 'https:') {\n      return [uri]\n    } else if (parsed.protocol === 'ipfs:') {\n      const hash = parsed.href.match(/^ipfs:(\\/\\/)?(.*)$/)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    } else if (parsed.protocol === 'ipns:') {\n      const name = parsed.href.match(/^ipns:(\\/\\/)?(.*)$/)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    } else {\n      return []\n    }\n  } catch (error) {\n    if (uri.toLowerCase().endsWith('.eth')) {\n      return [`https://${uri.toLowerCase()}.link`]\n    }\n    return []\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAA,SAASA,CAACC,GAAW,CAAY,CACvD,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,GAAG,CAACF,GAAG,CAAC,CAC3B,GAAIC,MAAM,CAACE,QAAQ,GAAK,OAAO,CAAE,CAC/B,MAAO,CAAC,OAAO,CAAGH,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,CAAEJ,GAAG,CAAC,CACvC,CAAC,IAAM,IAAIC,MAAM,CAACE,QAAQ,GAAK,QAAQ,CAAE,CACvC,MAAO,CAACH,GAAG,CAAC,CACd,CAAC,IAAM,IAAIC,MAAM,CAACE,QAAQ,GAAK,OAAO,CAAE,KAAAE,kBAAA,CACtC,KAAM,CAAAC,IAAI,EAAAD,kBAAA,CAAGJ,MAAM,CAACM,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,UAAAH,kBAAA,iBAAvCA,kBAAA,CAA0C,CAAC,CAAC,CACzD,MAAO,qCAAAI,MAAA,CAAqCH,IAAI,8BAAAG,MAAA,CAA6BH,IAAI,MAAI,CACvF,CAAC,IAAM,IAAIL,MAAM,CAACE,QAAQ,GAAK,OAAO,CAAE,KAAAO,mBAAA,CACtC,KAAM,CAAAC,IAAI,EAAAD,mBAAA,CAAGT,MAAM,CAACM,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,UAAAE,mBAAA,iBAAvCA,mBAAA,CAA0C,CAAC,CAAC,CACzD,MAAO,qCAAAD,MAAA,CAAqCE,IAAI,8BAAAF,MAAA,CAA6BE,IAAI,MAAI,CACvF,CAAC,IAAM,CACL,MAAO,EAAE,CACX,CACF,CAAE,MAAOC,KAAK,CAAE,CACd,GAAIZ,GAAG,CAACa,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAE,CACtC,MAAO,YAAAL,MAAA,CAAYT,GAAG,CAACa,WAAW,CAAC,CAAC,UAAQ,CAC9C,CACA,MAAO,EAAE,CACX,CACF","ignoreList":[]},"metadata":{},"sourceType":"module"}