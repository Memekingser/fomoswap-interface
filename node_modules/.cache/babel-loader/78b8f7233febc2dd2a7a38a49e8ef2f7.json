{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n  return cachedRTLResult;\n}\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n    data = _ref.data,\n    rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/\n    new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/\n    new WeakSet();\n    devWarningsTagName = /*#__PURE__*/\n    new WeakSet();\n  }\n}\nfunction createGridComponent(_ref2) {\n  var _class, _temp;\n  var getColumnOffset = _ref2.getColumnOffset,\n    getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n    getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n    getColumnWidth = _ref2.getColumnWidth,\n    getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n    getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n    getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n    getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n    getRowHeight = _ref2.getRowHeight,\n    getRowOffset = _ref2.getRowOffset,\n    getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n    getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n    initInstanceProps = _ref2.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref2.validateProps;\n  return _temp = _class = /*#__PURE__*/\n  function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_assertThisInitialized(_this)),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n          columnWidth = _this$props.columnWidth,\n          direction = _this$props.direction,\n          rowHeight = _this$props.rowHeight;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _style;\n          itemStyleCache[key] = style = (_style = {\n            position: 'absolute'\n          }, _style[direction === 'rtl' ? 'right' : 'left'] = getColumnOffset(_this.props, columnIndex, _this._instanceProps), _style.top = getRowOffset(_this.props, rowIndex, _this._instanceProps), _style.height = getRowHeight(_this.props, rowIndex, _this._instanceProps), _style.width = getColumnWidth(_this.props, columnIndex, _this._instanceProps), _style);\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientHeight = _event$currentTarget.clientHeight,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollTop = _event$currentTarget.scrollTop,\n          scrollHeight = _event$currentTarget.scrollHeight,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n      return _this;\n    }\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = Grid.prototype;\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n        scrollTop = _ref3.scrollTop;\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n        align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n        columnIndex = _ref4.columnIndex,\n        rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n        columnCount = _this$props2.columnCount,\n        height = _this$props2.height,\n        rowCount = _this$props2.rowCount,\n        width = _this$props2.width;\n      var _this$state = this.state,\n        scrollLeft = _this$state.scrollLeft,\n        scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n        initialScrollLeft = _this$props3.initialScrollLeft,\n        initialScrollTop = _this$props3.initialScrollTop;\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n        scrollLeft = _this$state2.scrollLeft,\n        scrollTop = _this$state2.scrollTop,\n        scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              var clientWidth = outerRef.clientWidth,\n                scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        columnCount = _this$props4.columnCount,\n        direction = _this$props4.direction,\n        height = _this$props4.height,\n        innerRef = _this$props4.innerRef,\n        innerElementType = _this$props4.innerElementType,\n        innerTagName = _this$props4.innerTagName,\n        itemData = _this$props4.itemData,\n        _this$props4$itemKey = _this$props4.itemKey,\n        itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n        outerElementType = _this$props4.outerElementType,\n        outerTagName = _this$props4.outerTagName,\n        rowCount = _this$props4.rowCount,\n        style = _this$props4.style,\n        useIsScrolling = _this$props4.useIsScrolling,\n        width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n        columnStartIndex = _this$_getHorizontalR[0],\n        columnStopIndex = _this$_getHorizontalR[1];\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n        rowStartIndex = _this$_getVerticalRan[0],\n        rowStopIndex = _this$_getVerticalRan[1];\n      var items = [];\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n        columnCount = _this$props5.columnCount,\n        onItemsRendered = _this$props5.onItemsRendered,\n        onScroll = _this$props5.onScroll,\n        rowCount = _this$props5.rowCount;\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n            _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n            _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n            _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n            _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n            _overscanRowStartIndex = _this$_getVerticalRan2[0],\n            _overscanRowStopIndex = _this$_getVerticalRan2[1],\n            _visibleRowStartIndex = _this$_getVerticalRan2[2],\n            _visibleRowStopIndex = _this$_getVerticalRan2[3];\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n          _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n          _scrollLeft = _this$state3.scrollLeft,\n          _scrollTop = _this$state3.scrollTop,\n          _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n          _verticalScrollDirection = _this$state3.verticalScrollDirection;\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n        columnCount = _this$props6.columnCount,\n        overscanColumnCount = _this$props6.overscanColumnCount,\n        overscanColumnsCount = _this$props6.overscanColumnsCount,\n        overscanCount = _this$props6.overscanCount,\n        rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n        horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n        isScrolling = _this$state4.isScrolling,\n        scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n        columnCount = _this$props7.columnCount,\n        overscanCount = _this$props7.overscanCount,\n        overscanRowCount = _this$props7.overscanRowCount,\n        overscanRowsCount = _this$props7.overscanRowsCount,\n        rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n        isScrolling = _this$state5.isScrolling,\n        verticalScrollDirection = _this$state5.verticalScrollDirection,\n        scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _temp;\n}\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n    direction = _ref5.direction,\n    height = _ref5.height,\n    innerTagName = _ref5.innerTagName,\n    outerTagName = _ref5.outerTagName,\n    overscanColumnsCount = _ref5.overscanColumnsCount,\n    overscanCount = _ref5.overscanCount,\n    overscanRowsCount = _ref5.overscanRowsCount,\n    width = _ref5.width;\n  var instance = _ref6.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n    estimatedRowHeight = _ref2.estimatedRowHeight,\n    lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n    estimatedColumnWidth = _ref4.estimatedColumnWidth,\n    lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\nvar VariableSizeGrid = /*#__PURE__*/\ncreateGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n      width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n      height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n      estimatedColumnWidth = _ref5.estimatedColumnWidth,\n      estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n        rowIndex = _ref6.rowIndex,\n        _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n        shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n      rowHeight = _ref7.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/\n    new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/\n    new WeakSet();\n  }\n}\nfunction createListComponent(_ref) {\n  var _class, _temp;\n  var getItemOffset = _ref.getItemOffset,\n    getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n    getItemSize = _ref.getItemSize,\n    getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n    getStartIndexForOffset = _ref.getStartIndexForOffset,\n    getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n    initInstanceProps = _ref.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref.validateProps;\n  return _temp = _class = /*#__PURE__*/\n  function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_assertThisInitialized(_this)),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n          direction = _this$props.direction,\n          itemSize = _this$props.itemSize,\n          layout = _this$props.layout;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n        var style;\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _style;\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          itemStyleCache[index] = style = (_style = {\n            position: 'absolute'\n          }, _style[direction === 'rtl' ? 'right' : 'left'] = isHorizontal ? _offset : 0, _style.top = !isHorizontal ? _offset : 0, _style.height = !isHorizontal ? size : '100%', _style.width = isHorizontal ? size : '100%', _style);\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n          clientHeight = _event$currentTarget2.clientHeight,\n          scrollHeight = _event$currentTarget2.scrollHeight,\n          scrollTop = _event$currentTarget2.scrollTop;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n      return _this;\n    }\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = List.prototype;\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n      var itemCount = this.props.itemCount;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1));\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props2 = this.props,\n        direction = _this$props2.direction,\n        initialScrollOffset = _this$props2.initialScrollOffset,\n        layout = _this$props2.layout;\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props3 = this.props,\n        direction = _this$props3.direction,\n        layout = _this$props3.layout;\n      var _this$state = this.state,\n        scrollOffset = _this$state.scrollOffset,\n        scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        direction = _this$props4.direction,\n        height = _this$props4.height,\n        innerRef = _this$props4.innerRef,\n        innerElementType = _this$props4.innerElementType,\n        innerTagName = _this$props4.innerTagName,\n        itemCount = _this$props4.itemCount,\n        itemData = _this$props4.itemData,\n        _this$props4$itemKey = _this$props4.itemKey,\n        itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,\n        layout = _this$props4.layout,\n        outerElementType = _this$props4.outerElementType,\n        outerTagName = _this$props4.outerTagName,\n        style = _this$props4.style,\n        useIsScrolling = _this$props4.useIsScrolling,\n        width = _this$props4.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n      var _this$_getRangeToRend = this._getRangeToRender(),\n        startIndex = _this$_getRangeToRend[0],\n        stopIndex = _this$_getRangeToRend[1];\n      var items = [];\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n            _overscanStartIndex = _this$_getRangeToRend2[0],\n            _overscanStopIndex = _this$_getRangeToRend2[1],\n            _visibleStartIndex = _this$_getRangeToRend2[2],\n            _visibleStopIndex = _this$_getRangeToRend2[3];\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n          _scrollDirection = _this$state2.scrollDirection,\n          _scrollOffset = _this$state2.scrollOffset,\n          _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props5 = this.props,\n        itemCount = _this$props5.itemCount,\n        overscanCount = _this$props5.overscanCount;\n      var _this$state3 = this.state,\n        isScrolling = _this$state3.isScrolling,\n        scrollDirection = _this$state3.scrollDirection,\n        scrollOffset = _this$state3.scrollOffset;\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _temp;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n    direction = _ref2.direction,\n    height = _ref2.height,\n    layout = _ref2.layout,\n    innerTagName = _ref2.innerTagName,\n    outerTagName = _ref2.outerTagName,\n    width = _ref2.width;\n  var instance = _ref3.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n    itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    instanceProps.lastMeasuredIndex = index;\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n    estimatedItemSize = _ref3.estimatedItemSize,\n    lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\nvar VariableSizeList = /*#__PURE__*/\ncreateListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    var direction = props.direction,\n      height = props.height,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n      height = props.height,\n      itemCount = props.itemCount,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n      estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/\ncreateGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n      rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n      columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n      columnWidth = _ref7.columnWidth,\n      width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n      height = _ref8.height,\n      rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n      columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n      columnCount = _ref10.columnCount,\n      width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n      rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n      rowCount = _ref12.rowCount,\n      height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n      rowHeight = _ref13.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/\ncreateListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n      itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {\n    var direction = _ref4.direction,\n      height = _ref4.height,\n      itemCount = _ref4.itemCount,\n      itemSize = _ref4.itemSize,\n      layout = _ref4.layout,\n      width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n      itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n      height = _ref6.height,\n      itemCount = _ref6.itemCount,\n      itemSize = _ref6.itemSize,\n      layout = _ref6.layout,\n      width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n    prevRest = _objectWithoutPropertiesLoose(prevProps, [\"style\"]);\n  var nextStyle = nextProps.style,\n    nextRest = _objectWithoutPropertiesLoose(nextProps, [\"style\"]);\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\nexport { VariableSizeGrid, VariableSizeList, FixedSizeGrid, FixedSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"names":["hasNativePerformanceNow","performance","now","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","tick","call","requestAnimationFrame","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","_ref","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","env","NODE_ENV","window","WeakSet","createGridComponent","_ref2","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_this","_assertThisInitialized","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","_this$props","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","_style","position","top","_","__","___","_onScroll","event","currentTarget","clientHeight","_event$currentTarget","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","_ref3","undefined","scrollToItem","_ref4","align","_ref4$align","columnCount","_this$props2","rowCount","_this$state","scrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_this$props3","_callPropsCallbacks","componentDidUpdate","_this$state2","componentWillUnmount","render","children","_this$props4","className","innerRef","innerElementType","innerTagName","itemData","itemKey","_this$props4$itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","_this$_getHorizontalR","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","_this$_getVerticalRan","rowStopIndex","items","_rowIndex","_columnIndex","push","_extends","WebkitOverflowScrolling","willChange","pointerEvents","_this$props5","_overscanColumnStartIndex","_this$_getHorizontalR2","_overscanColumnStopIndex","_visibleColumnStartIndex","_visibleColumnStopIndex","_overscanRowStartIndex","_this$_getVerticalRan2","_overscanRowStopIndex","_visibleRowStartIndex","_visibleRowStopIndex","_horizontalScrollDirection","_this$state3","_scrollLeft","_scrollTop","_scrollUpdateWasRequested","_verticalScrollDirection","_this$props6","overscanColumnCount","overscanColumnsCount","overscanCount","_this$state4","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","_this$props7","overscanRowCount","overscanRowsCount","_this$state5","PureComponent","_class","defaultProps","_temp","_ref5","_ref6","has","add","console","warn","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","offset","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","_ref6$shouldForceUpda","forceUpdate","_ref7","IS_SCROLLING_DEBOUNCE_INTERVAL$1","defaultItemKey$1","devWarningsDirection","devWarningsTagName$1","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","_offset","isHorizontal","_onScrollHorizontal","_onScrollVertical","_event$currentTarget2","validateSharedProps$1","_getRangeToRender","_this$_getRangeToRend","_index","_overscanStartIndex","_this$_getRangeToRend2","_overscanStopIndex","_visibleStartIndex","_visibleStopIndex","_scrollDirection","_scrollOffset","DEFAULT_ESTIMATED_ITEM_SIZE$1","getItemMetadata$1","findNearestItem$1","findNearestItemBinarySearch$1","findNearestItemExponentialSearch$1","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","_ref8","lastRowOffset","_ref9","_ref10","left","numVisibleColumns","_ref11","_ref12","numVisibleRows","_ref13","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","_attribute","areEqual","prevProps","prevStyle","prevRest","_objectWithoutPropertiesLoose","nextStyle","nextRest","shouldComponentUpdate","nextState"],"sources":["../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          [direction === 'rtl' ? 'right' : 'left']: getColumnOffset(\n            this.props,\n            columnIndex,\n            this._instanceProps\n          ),\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          [direction === 'rtl' ? 'right' : 'left']: isHorizontal ? offset : 0,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}