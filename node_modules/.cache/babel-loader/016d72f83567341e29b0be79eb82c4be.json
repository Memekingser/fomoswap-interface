{"ast":null,"code":"import { isAddress } from '../../utils';\nexport function filterTokens(tokens, search) {\n  if (search.length === 0) return tokens;\n  const searchingAddress = isAddress(search);\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress);\n  }\n  const lowerSearchParts = search.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n  const matchesSearch = s => {\n    const sParts = s.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)));\n  };\n  return tokens.filter(token => {\n    const {\n      symbol,\n      name\n    } = token;\n    return matchesSearch(symbol) || matchesSearch(name);\n  });\n}","map":{"version":3,"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/SearchModal/filtering.ts"],"sourcesContent":["import { isAddress } from '../../utils'\nimport { Token } from 'fomoswap-storytestnet'\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens\n\n  const searchingAddress = isAddress(search)\n\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress)\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter(s => s.length > 0)\n\n  if (lowerSearchParts.length === 0) {\n    return tokens\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter(s => s.length > 0)\n\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)))\n  }\n\n  return tokens.filter(token => {\n    const { symbol, name } = token\n\n    return matchesSearch(symbol) || matchesSearch(name)\n  })\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAGvC,OAAO,SAASC,YAAYA,CAACC,MAAe,EAAEC,MAAc,EAAW;EACrE,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOF,MAAM;EAEtC,MAAMG,gBAAgB,GAAGL,SAAS,CAACG,MAAM,CAAC;EAE1C,IAAIE,gBAAgB,EAAE;IACpB,OAAOH,MAAM,CAACI,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,KAAKH,gBAAgB,CAAC;EACnE;EAEA,MAAMI,gBAAgB,GAAGN,MAAM,CAC5BO,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAACM,CAAC,IAAIA,CAAC,CAACR,MAAM,GAAG,CAAC,CAAC;EAE5B,IAAIK,gBAAgB,CAACL,MAAM,KAAK,CAAC,EAAE;IACjC,OAAOF,MAAM;EACf;EAEA,MAAMW,aAAa,GAAID,CAAS,IAAc;IAC5C,MAAME,MAAM,GAAGF,CAAC,CACbF,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAACM,CAAC,IAAIA,CAAC,CAACR,MAAM,GAAG,CAAC,CAAC;IAE5B,OAAOK,gBAAgB,CAACM,KAAK,CAACC,CAAC,IAAIA,CAAC,CAACZ,MAAM,KAAK,CAAC,IAAIU,MAAM,CAACG,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACC,UAAU,CAACH,CAAC,CAAC,IAAIE,EAAE,CAACE,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC;EAC7G,CAAC;EAED,OAAOd,MAAM,CAACI,MAAM,CAACC,KAAK,IAAI;IAC5B,MAAM;MAAEc,MAAM;MAAEC;IAAK,CAAC,GAAGf,KAAK;IAE9B,OAAOM,aAAa,CAACQ,MAAM,CAAC,IAAIR,aAAa,CAACS,IAAI,CAAC;EACrD,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}