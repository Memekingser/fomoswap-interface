{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst Web3Provider_1 = require(\"./Web3Provider\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nclass WalletLinkProvider {\n  constructor(options) {\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._addresses = [];\n    this._send = this.send;\n    this._sendAsync = this.sendAsync;\n    if (!options.relay) {\n      throw new Error(\"realy must be provided\");\n    }\n    if (!options.jsonRpcUrl) {\n      throw new Error(\"jsonRpcUrl must be provided\");\n    }\n    this._relay = options.relay;\n    this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n    this._jsonRpcUrl = options.jsonRpcUrl;\n    const cahedAddresses = this._relay.getStorageItem(LOCAL_STORAGE_ADDRESSES_KEY);\n    if (cahedAddresses) {\n      const addresses = cahedAddresses.split(\" \");\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses;\n      }\n    }\n  }\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n  get networkVersion() {\n    return this._chainId.toString(10);\n  }\n  get isWalletLink() {\n    return true;\n  }\n  get host() {\n    return this._jsonRpcUrl;\n  }\n  get connected() {\n    return true;\n  }\n  isConnected() {\n    return true;\n  }\n  async enable() {\n    if (this._addresses.length > 0) {\n      return this._addresses;\n    }\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n  close() {\n    this._relay.resetAndReload();\n  }\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    }\n    // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    }\n    // send(JSONRPCRequest[]): JSONRPCResponse[]\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    }\n    // send(JSONRPCRequest): JSONRPCResponse\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n  sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    }\n    // send(JSONRPCRequest[], callback): void\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n      return;\n    }\n    // send(JSONRPCRequest, callback): void\n    const cb = callback;\n    this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n  async scanQRCode(match) {\n    const res = await this._relay.scanQRCode(util_1.ensureRegExpString(match));\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  async arbitraryRequest(data) {\n    const res = await this._relay.arbitraryRequest(data);\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  supportsSubscriptions() {\n    return false;\n  }\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n  disconnect() {\n    return true;\n  }\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n    if (response.result === undefined) {\n      throw new Error(\"WalletLink does not support calling \".concat(method, \" synchronously without \") + \"a callback. Please provide a callback parameter to call \".concat(method, \" \") + \"asynchronously.\");\n    }\n    return response;\n  }\n  _setAddresses(addresses) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n    this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n    this._relay.setStorageItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n    window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", {\n      detail: this._addresses\n    }));\n  }\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n      this._handleAsynchronousMethods(request).then(res => resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n      default:\n        return undefined;\n    }\n  }\n  _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n      case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n        return this._walletlink_arbitrary(params);\n    }\n    return window.fetch(this._jsonRpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      if (!json) {\n        throw new Web3Provider_1.ProviderError(\"unexpected response\");\n      }\n      const response = json;\n      const {\n        error\n      } = response;\n      if (error) {\n        throw new Web3Provider_1.ProviderError(error.message || \"RPC Error\", error.code, error.data);\n      }\n      return response;\n    });\n  }\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n    return undefined;\n  }\n  _isKnownAddress(addressString) {\n    try {\n      const address = util_1.ensureAddressString(addressString);\n      return this._addresses.includes(address);\n    } catch (_a) {}\n    return false;\n  }\n  _ensureKnownAddress(addressString) {\n    if (!this._isKnownAddress(addressString)) {\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? util_1.ensureAddressString(tx.from) : this.selectedAddress;\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n    this._ensureKnownAddress(fromAddress);\n    const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n    const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n    const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n    const chainId = this._chainId;\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      gasLimit,\n      chainId\n    };\n  }\n  _requireAuthorization() {\n    if (this._addresses.length === 0) {\n      throw new Web3Provider_1.ProviderError(\"Unauthorized\", Web3Provider_1.ProviderErrorCode.UNAUTHORIZED);\n    }\n  }\n  _throwUnsupportedMethodError() {\n    throw new Web3Provider_1.ProviderError(\"Unsupported method\", Web3Provider_1.ProviderErrorCode.UNSUPPORTED_METHOD);\n  }\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n    try {\n      const res = await this._relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied message signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n      }\n      throw err;\n    }\n  }\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const res = await this._relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n  _eth_accounts() {\n    return this._addresses;\n  }\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n  _net_version() {\n    return this._chainId.toString(10);\n  }\n  async _eth_requestAccounts() {\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n    let res;\n    try {\n      res = await this._relay.requestEthereumAccounts();\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied account authorization\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_ACCOUNTS);\n      }\n      throw err;\n    }\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n    this._setAddresses(res.result);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n  _eth_sign(params) {\n    this._requireAuthorization();\n    const address = util_1.ensureAddressString(params[0]);\n    const message = util_1.ensureBuffer(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n  _eth_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n  _personal_sign(params) {\n    this._requireAuthorization();\n    const message = util_1.ensureBuffer(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n  _personal_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const res = await this._relay.signEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n      }\n      throw err;\n    }\n  }\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = util_1.ensureBuffer(params[0]);\n    const res = await this._relay.submitEthereumTransaction(signedTransaction, this._chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const res = await this._relay.signAndSubmitEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n      }\n      throw err;\n    }\n  }\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n    const typedData = params[0];\n    const address = util_1.ensureAddressString(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJson = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJson);\n  }\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = params[1];\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJson = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJson);\n  }\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = params[1];\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJson = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJson);\n  }\n  async _walletlink_arbitrary(params) {\n    const data = params[0];\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n    const result = await this.arbitraryRequest(data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n  _eth_uninstallFilter(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  _eth_getFilterChanges(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n  _eth_getFilterLogs(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n}\nexports.WalletLinkProvider = WalletLinkProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","bn_js_1","require","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","Web3Provider_1","LOCAL_STORAGE_ADDRESSES_KEY","WalletLinkProvider","constructor","options","_filterPolyfill","FilterPolyfill","_addresses","_send","send","_sendAsync","sendAsync","relay","Error","jsonRpcUrl","_relay","_chainId","ensureIntNumber","chainId","_jsonRpcUrl","cahedAddresses","getStorageItem","addresses","split","selectedAddress","undefined","networkVersion","toString","isWalletLink","host","connected","isConnected","enable","length","JSONRPCMethod","eth_requestAccounts","close","resetAndReload","requestOrMethod","callbackOrParams","method","params","Array","isArray","request","jsonrpc","id","_sendRequestAsync","then","res","result","callback","requests","map","r","_sendRequest","req","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","scanQRCode","match","ensureRegExpString","arbitraryRequest","data","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","concat","_setAddresses","address","ensureAddressString","setStorageItem","join","window","dispatchEvent","CustomEvent","detail","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","walletlink_arbitrary","_walletlink_arbitrary","fetch","body","JSON","stringify","mode","headers","json","ProviderError","error","message","code","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","_isKnownAddress","addressString","includes","_a","_ensureKnownAddress","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","default","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","gasLimit","gas","_requireAuthorization","ProviderErrorCode","UNAUTHORIZED","UNSUPPORTED_METHOD","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","USER_DENIED_REQUEST_SIGNATURE","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","requestEthereumAccounts","USER_DENIED_REQUEST_ACCOUNTS","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","hashForSignTypedDataLegacy","hashForSignTypedData_v3","hashForSignTypedData_v4","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/node_modules/walletlink/dist/provider/WalletLinkProvider.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst Web3Provider_1 = require(\"./Web3Provider\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nclass WalletLinkProvider {\n    constructor(options) {\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._addresses = [];\n        this._send = this.send;\n        this._sendAsync = this.sendAsync;\n        if (!options.relay) {\n            throw new Error(\"realy must be provided\");\n        }\n        if (!options.jsonRpcUrl) {\n            throw new Error(\"jsonRpcUrl must be provided\");\n        }\n        this._relay = options.relay;\n        this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n        this._jsonRpcUrl = options.jsonRpcUrl;\n        const cahedAddresses = this._relay.getStorageItem(LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cahedAddresses) {\n            const addresses = cahedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses;\n            }\n        }\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this._chainId.toString(10);\n    }\n    get isWalletLink() {\n        return true;\n    }\n    get host() {\n        return this._jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    async enable() {\n        if (this._addresses.length > 0) {\n            return this._addresses;\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    close() {\n        this._relay.resetAndReload();\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async scanQRCode(match) {\n        const res = await this._relay.scanQRCode(util_1.ensureRegExpString(match));\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async arbitraryRequest(data) {\n        const res = await this._relay.arbitraryRequest(data);\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`WalletLink does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n        this._relay.setStorageItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n        window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", { detail: this._addresses }));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            default:\n                return undefined;\n        }\n    }\n    _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n                return this._walletlink_arbitrary(params);\n        }\n        return window\n            .fetch(this._jsonRpcUrl, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            mode: \"cors\",\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(json => {\n            if (!json) {\n                throw new Web3Provider_1.ProviderError(\"unexpected response\");\n            }\n            const response = json;\n            const { error } = response;\n            if (error) {\n                throw new Web3Provider_1.ProviderError(error.message || \"RPC Error\", error.code, error.data);\n            }\n            return response;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const address = util_1.ensureAddressString(addressString);\n            return this._addresses.includes(address);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        if (!this._isKnownAddress(addressString)) {\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? util_1.ensureAddressString(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n        const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n        const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n        const chainId = this._chainId;\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            gasLimit,\n            chainId\n        };\n    }\n    _requireAuthorization() {\n        if (this._addresses.length === 0) {\n            throw new Web3Provider_1.ProviderError(\"Unauthorized\", Web3Provider_1.ProviderErrorCode.UNAUTHORIZED);\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw new Web3Provider_1.ProviderError(\"Unsupported method\", Web3Provider_1.ProviderErrorCode.UNSUPPORTED_METHOD);\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const res = await this._relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied message signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const res = await this._relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return this._addresses;\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this._chainId.toString(10);\n    }\n    async _eth_requestAccounts() {\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses\n            });\n        }\n        let res;\n        try {\n            res = await this._relay.requestEthereumAccounts();\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied account authorization\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_ACCOUNTS);\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const message = util_1.ensureBuffer(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = util_1.ensureBuffer(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const res = await this._relay.signEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = util_1.ensureBuffer(params[0]);\n        const res = await this._relay.submitEthereumTransaction(signedTransaction, this._chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const res = await this._relay.signAndSubmitEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = params[0];\n        const address = util_1.ensureAddressString(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJson = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJson);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = params[1];\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJson = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJson);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = params[1];\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJson = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJson);\n    }\n    async _walletlink_arbitrary(params) {\n        const data = params[0];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        const result = await this.arbitraryRequest(data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n}\nexports.WalletLinkProvider = WalletLinkProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}