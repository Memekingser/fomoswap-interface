{"ast":null,"code":"import useENS from '../../hooks/useENS';\nimport { Version } from '../../hooks/useToggledVersion';\nimport { parseUnits } from '@ethersproject/units';\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from 'fomoswap-artio';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useV1Trade } from '../../data/V1';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport useToggledVersion from '../../hooks/useToggledVersion';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\nexport function useSwapState() {\n  return useSelector(state => state.swap);\n}\nexport function useSwapActionHandlers() {\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  }\n  // necessary for all paths to return a value\n  return;\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo() {\n  var _ref, _ref2;\n  const {\n    account\n  } = useActiveWeb3React();\n  const toggledVersion = useToggledVersion();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  };\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount);\n  let inputError;\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n  if (!parsedAmount) {\n    var _inputError;\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n  if (!to) {\n    var _inputError3;\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : 'Enter a recipient';\n  }\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n  const slippageAdjustedAmountsV1 = v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage);\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], toggledVersion === Version.v1 ? slippageAdjustedAmountsV1 ? slippageAdjustedAmountsV1[Field.INPUT] : null : slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError,\n    v1Trade\n  };\n}\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _ETH;\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\n    if (valid === false) return 'ETH';\n  }\n  return (_ETH = 'ETH') !== null && _ETH !== void 0 ? _ETH : '';\n}\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\nexport function queryParametersToSwapState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n}","map":{"version":3,"names":["useENS","Version","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useDispatch","useSelector","useV1Trade","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useToggledVersion","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","useDerivedSwapInfo","_ref","_ref2","account","toggledVersion","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","undefined","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","v1Trade","inputError","_inputError","_inputError2","_inputError3","allowedSlippage","slippageAdjustedAmounts","slippageAdjustedAmountsV1","balanceIn","amountIn","v1","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","_ETH","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","parsed"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/swap/hooks.ts"],"sourcesContent":["import useENS from '../../hooks/useENS'\nimport { Version } from '../../hooks/useToggledVersion'\nimport { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from 'fomoswap-artio'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useV1Trade } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport useToggledVersion from '../../hooks/useToggledVersion'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n  v1Trade: Trade | undefined\n} {\n  const { account } = useActiveWeb3React()\n\n  const toggledVersion = useToggledVersion()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined\n  }\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount)\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  if (!to) {\n    inputError = inputError ?? 'Enter a recipient'\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  const slippageAdjustedAmountsV1 =\n    v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    toggledVersion === Version.v1\n      ? slippageAdjustedAmountsV1\n        ? slippageAdjustedAmountsV1[Field.INPUT]\n        : null\n      : slippageAdjustedAmounts\n      ? slippageAdjustedAmounts[Field.INPUT]\n      : null\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance'\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n    v1Trade\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\n    if (valid === false) return 'ETH'\n  }\n  return 'ETH' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient\n      })\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}