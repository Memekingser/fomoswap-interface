{"ast":null,"code":"var _jsxFileName = \"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/swap/ConfirmSwapModal.tsx\";\nimport { currencyEquals } from 'fomoswap-bera1';\nimport React, { useCallback, useMemo } from 'react';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from '../TransactionConfirmationModal';\nimport SwapModalFooter from './SwapModalFooter';\nimport SwapModalHeader from './SwapModalHeader';\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash\n}) {\n  var _trade$inputAmount, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount, _trade$outputAmount2, _trade$outputAmount2$;\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/React.createElement(SwapModalHeader, {\n      trade: trade,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }) : null;\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade]);\n  const modalBottom = useCallback(() => {\n    return trade ? /*#__PURE__*/React.createElement(SwapModalFooter, {\n      onConfirm: onConfirm,\n      trade: trade,\n      disabledConfirm: showAcceptChanges,\n      swapErrorMessage: swapErrorMessage,\n      allowedSlippage: allowedSlippage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }) : null;\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade]);\n\n  // text to show while loading\n  const pendingText = `Swapping ${trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6)} ${trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol} for ${trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6)} ${trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol}`;\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/React.createElement(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(ConfirmationModalContent, {\n    title: \"Confirm Swap\",\n    onDismiss: onDismiss,\n    topContent: modalHeader,\n    bottomContent: modalBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), [onDismiss, modalBottom, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/React.createElement(TransactionConfirmationModal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: confirmationContent,\n    pendingText: pendingText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"names":["currencyEquals","React","useCallback","useMemo","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","_trade$inputAmount","_trade$inputAmount2","_trade$inputAmount2$c","_trade$outputAmount","_trade$outputAmount2","_trade$outputAmount2$","showAcceptChanges","Boolean","modalHeader","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","modalBottom","disabledConfirm","pendingText","toSignificant","symbol","confirmationContent","message","title","topContent","bottomContent","hash","content"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/swap/ConfirmSwapModal.tsx"],"sourcesContent":["import { currencyEquals, Trade } from 'fomoswap-bera1'\nimport React, { useCallback, useMemo } from 'react'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash\n}: {\n  isOpen: boolean\n  trade: Trade | undefined\n  originalTrade: Trade | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  onDismiss: () => void\n}) {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n        allowedSlippage={allowedSlippage}\n      />\n    ) : null\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\n\n  // text to show while loading\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\n    trade?.inputAmount?.currency?.symbol\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title=\"Confirm Swap\"\n          onDismiss={onDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}