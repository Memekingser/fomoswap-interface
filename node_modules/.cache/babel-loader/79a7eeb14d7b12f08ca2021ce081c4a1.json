{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json';\nimport { ROUTER_ADDRESS } from '../constants';\nimport { JSBI, Percent, Token, ETHER } from 'fomoswap-storytestnet';\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\nconst ETHERSCAN_PREFIXES = {\n  1: 'etherscan.io',\n  3: 'ropsten.etherscan.io',\n  4: 'rinkeby.etherscan.io',\n  5: 'goerli.etherscan.io',\n  42: 'kovan.etherscan.io',\n  11155111: 'sepolia.etherscan.io',\n  130: 'unichainexplorer.chaineye.tools',\n  80084: 'bartio.beratrail.io',\n  80094: 'berabeta.beratrail.io',\n  1315: 'aeneid.storyscan.xyz'\n};\nexport function getEtherscanLink(chainId, data, type) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}`;\n  switch (type) {\n    case 'transaction':\n      {\n        return `${prefix}/tx/${data}`;\n      }\n    case 'token':\n      {\n        return `${prefix}/token/${data}`;\n      }\n    case 'address':\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address, chars = 4) {\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\n\n// add 10%\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num) {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\nexport function calculateSlippageAmount(value, slippage) {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n  return [JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)), JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))];\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\n\n// account is optional\nexport function getRouterContract(_, library, account) {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nexport function isDefaultToken(defaultTokens, currency) {\n  var _defaultTokens$curren;\n  if (currency === ETHER) return true;\n  return Boolean(currency instanceof Token && ((_defaultTokens$curren = defaultTokens[currency.chainId]) === null || _defaultTokens$curren === void 0 ? void 0 : _defaultTokens$curren[currency.address]));\n}","map":{"version":3,"names":["Contract","getAddress","AddressZero","BigNumber","abi","IUniswapV2Router02ABI","ROUTER_ADDRESS","JSBI","Percent","Token","ETHER","isAddress","value","ETHERSCAN_PREFIXES","getEtherscanLink","chainId","data","type","prefix","shortenAddress","address","chars","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","getRouterContract","_","escapeRegExp","string","replace","isDefaultToken","defaultTokens","currency","_defaultTokens$curren","Boolean"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/utils/index.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\nimport { ROUTER_ADDRESS } from '../constants'\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from 'fomoswap-storytestnet'\nimport { TokenAddressMap } from '../state/lists/hooks'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: 'etherscan.io',\n  3: 'ropsten.etherscan.io',\n  4: 'rinkeby.etherscan.io',\n  5: 'goerli.etherscan.io',\n  42: 'kovan.etherscan.io',\n  11155111: 'sepolia.etherscan.io',\n  130: 'unichainexplorer.chaineye.tools',\n  80084: 'bartio.beratrail.io',\n  80094: 'berabeta.beratrail.io',\n  1315: 'aeneid.storyscan.xyz'\n}\n\nexport function getEtherscanLink(chainId: ChainId, data: string, type: 'transaction' | 'token' | 'address'): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\n// account is optional\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function isDefaultToken(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\n  if (currency === ETHER) return true\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}