{"ast":null,"code":"import { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\nexport function useEagerConnect() {\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n    return;\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"names":["useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","isAuthorized","then","undefined","catch","window","ethereum","useInactiveListener","suppress","error","on","handleChainChanged","console","handleAccountsChanged","accounts","length","removeListener"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/hooks/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { ChainId } from 'fomoswap-artio'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\nimport { useEffect, useState } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { injected } from '../connectors'\nimport { NetworkContextName } from '../constants'\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3ReactCore<Web3Provider>()\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error)\n        })\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error)\n          })\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n    return\n  }, [active, error, suppress, activate])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}