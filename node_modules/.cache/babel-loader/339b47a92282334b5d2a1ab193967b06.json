{"ast":null,"code":"import _objectSpread from\"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{BigNumber}from'@ethersproject/bignumber';import{currencyEquals,ETHER,WETH}from'fomoswap-bera1';import React,{useCallback,useContext,useState}from'react';import{Plus}from'react-feather';import ReactGA from'react-ga';import{Text}from'rebass';import{ThemeContext}from'styled-components';import{ButtonError,ButtonLight,ButtonPrimary}from'../../components/Button';import{BlueCard,GreyCard,LightCard}from'../../components/Card';import{AutoColumn,ColumnCenter}from'../../components/Column';import TransactionConfirmationModal,{ConfirmationModalContent}from'../../components/TransactionConfirmationModal';import CurrencyInputPanel from'../../components/CurrencyInputPanel';import DoubleCurrencyLogo from'../../components/DoubleLogo';import{AddRemoveTabs}from'../../components/NavigationTabs';import{MinimalPositionCard}from'../../components/PositionCard';import Row,{RowBetween,RowFlat}from'../../components/Row';import{ROUTER_ADDRESS}from'../../constants';import{PairState}from'../../data/Reserves';import{useActiveWeb3React}from'../../hooks';import{useCurrency}from'../../hooks/Tokens';import{ApprovalState,useApproveCallback}from'../../hooks/useApproveCallback';import{useWalletModalToggle}from'../../state/application/hooks';import{Field}from'../../state/mint/actions';import{useDerivedMintInfo,useMintActionHandlers,useMintState}from'../../state/mint/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{useIsExpertMode,useUserDeadline,useUserSlippageTolerance}from'../../state/user/hooks';import{TYPE}from'../../theme';import{calculateGasMargin,calculateSlippageAmount,getRouterContract}from'../../utils';import{maxAmountSpend}from'../../utils/maxAmountSpend';import{wrappedCurrency}from'../../utils/wrappedCurrency';import AppBody from'../AppBody';import{Dots,Wrapper}from'../Pool/styleds';import{ConfirmAddModalBottom}from'./ConfirmAddModalBottom';import{currencyId}from'../../utils/currencyId';import{PoolPriceBar}from'./PoolPriceBar';export default function AddLiquidity(_ref){var _parsedAmounts$depend,_parsedAmounts$depend2,_parsedAmounts$Field$3,_currencies$Field$CUR9,_parsedAmounts$Field$4,_currencies$Field$CUR10,_currencies$Field$CUR11,_currencies$Field$CUR12,_currencies$Field$CUR13,_currencies$Field$CUR14;let{match:{params:{currencyIdA,currencyIdB}},history}=_ref;const{account,chainId,library}=useActiveWeb3React();const theme=useContext(ThemeContext);const currencyA=useCurrency(currencyIdA);const currencyB=useCurrency(currencyIdB);const oneCurrencyIsWETH=Boolean(chainId&&(currencyA&&currencyEquals(currencyA,WETH[chainId])||currencyB&&currencyEquals(currencyB,WETH[chainId])));const toggleWalletModal=useWalletModalToggle();// toggle wallet when disconnected\nconst expertMode=useIsExpertMode();// mint state\nconst{independentField,typedValue,otherTypedValue}=useMintState();const{dependentField,currencies,pair,pairState,currencyBalances,parsedAmounts,price,noLiquidity,liquidityMinted,poolTokenPercentage,error}=useDerivedMintInfo(currencyA!==null&&currencyA!==void 0?currencyA:undefined,currencyB!==null&&currencyB!==void 0?currencyB:undefined);const{onFieldAInput,onFieldBInput}=useMintActionHandlers(noLiquidity);const isValid=!error;// modal and loading\nconst[showConfirm,setShowConfirm]=useState(false);const[attemptingTxn,setAttemptingTxn]=useState(false);// clicked confirm\n// txn values\nconst[deadline]=useUserDeadline();// custom from users settings\nconst[allowedSlippage]=useUserSlippageTolerance();// custom from users\nconst[txHash,setTxHash]=useState('');// get formatted amounts\nconst formattedAmounts={[independentField]:typedValue,[dependentField]:noLiquidity?otherTypedValue:(_parsedAmounts$depend=(_parsedAmounts$depend2=parsedAmounts[dependentField])===null||_parsedAmounts$depend2===void 0?void 0:_parsedAmounts$depend2.toSignificant(6))!==null&&_parsedAmounts$depend!==void 0?_parsedAmounts$depend:''};// get the max amounts user can add\nconst maxAmounts=[Field.CURRENCY_A,Field.CURRENCY_B].reduce((accumulator,field)=>{return _objectSpread(_objectSpread({},accumulator),{},{[field]:maxAmountSpend(currencyBalances[field])});},{});const atMaxAmounts=[Field.CURRENCY_A,Field.CURRENCY_B].reduce((accumulator,field)=>{var _maxAmounts$field,_parsedAmounts$field;return _objectSpread(_objectSpread({},accumulator),{},{[field]:(_maxAmounts$field=maxAmounts[field])===null||_maxAmounts$field===void 0?void 0:_maxAmounts$field.equalTo((_parsedAmounts$field=parsedAmounts[field])!==null&&_parsedAmounts$field!==void 0?_parsedAmounts$field:'0')});},{});// check whether the user has approved the router on the tokens\nconst[approvalA,approveACallback]=useApproveCallback(parsedAmounts[Field.CURRENCY_A],ROUTER_ADDRESS);const[approvalB,approveBCallback]=useApproveCallback(parsedAmounts[Field.CURRENCY_B],ROUTER_ADDRESS);const addTransaction=useTransactionAdder();async function onAdd(){if(!chainId||!library||!account)return;const router=getRouterContract(chainId,library,account);const{[Field.CURRENCY_A]:parsedAmountA,[Field.CURRENCY_B]:parsedAmountB}=parsedAmounts;if(!parsedAmountA||!parsedAmountB||!currencyA||!currencyB){return;}const amountsMin={[Field.CURRENCY_A]:calculateSlippageAmount(parsedAmountA,noLiquidity?0:allowedSlippage)[0],[Field.CURRENCY_B]:calculateSlippageAmount(parsedAmountB,noLiquidity?0:allowedSlippage)[0]};const deadlineFromNow=Math.ceil(Date.now()/1000)+deadline;let estimate,method,args,value;if(currencyA===ETHER||currencyB===ETHER){var _wrappedCurrency$addr,_wrappedCurrency;const tokenBIsETH=currencyB===ETHER;estimate=router.estimateGas.addLiquidityETH;method=router.addLiquidityETH;args=[(_wrappedCurrency$addr=(_wrappedCurrency=wrappedCurrency(tokenBIsETH?currencyA:currencyB,chainId))===null||_wrappedCurrency===void 0?void 0:_wrappedCurrency.address)!==null&&_wrappedCurrency$addr!==void 0?_wrappedCurrency$addr:'',// token\n(tokenBIsETH?parsedAmountA:parsedAmountB).raw.toString(),// token desired\namountsMin[tokenBIsETH?Field.CURRENCY_A:Field.CURRENCY_B].toString(),// token min\namountsMin[tokenBIsETH?Field.CURRENCY_B:Field.CURRENCY_A].toString(),// eth min\naccount,deadlineFromNow];value=BigNumber.from((tokenBIsETH?parsedAmountB:parsedAmountA).raw.toString());}else{var _wrappedCurrency$addr2,_wrappedCurrency2,_wrappedCurrency$addr3,_wrappedCurrency3;estimate=router.estimateGas.addLiquidity;method=router.addLiquidity;args=[(_wrappedCurrency$addr2=(_wrappedCurrency2=wrappedCurrency(currencyA,chainId))===null||_wrappedCurrency2===void 0?void 0:_wrappedCurrency2.address)!==null&&_wrappedCurrency$addr2!==void 0?_wrappedCurrency$addr2:'',(_wrappedCurrency$addr3=(_wrappedCurrency3=wrappedCurrency(currencyB,chainId))===null||_wrappedCurrency3===void 0?void 0:_wrappedCurrency3.address)!==null&&_wrappedCurrency$addr3!==void 0?_wrappedCurrency$addr3:'',parsedAmountA.raw.toString(),parsedAmountB.raw.toString(),amountsMin[Field.CURRENCY_A].toString(),amountsMin[Field.CURRENCY_B].toString(),account,deadlineFromNow];value=null;}setAttemptingTxn(true);await estimate(...args,value?{value}:{}).then(estimatedGasLimit=>method(...args,_objectSpread(_objectSpread({},value?{value}:{}),{},{gasLimit:calculateGasMargin(estimatedGasLimit)})).then(response=>{var _parsedAmounts$Field$,_currencies$Field$CUR,_parsedAmounts$Field$2,_currencies$Field$CUR2,_currencies$Field$CUR3,_currencies$Field$CUR4;setAttemptingTxn(false);addTransaction(response,{summary:'Add '+((_parsedAmounts$Field$=parsedAmounts[Field.CURRENCY_A])===null||_parsedAmounts$Field$===void 0?void 0:_parsedAmounts$Field$.toSignificant(3))+' '+((_currencies$Field$CUR=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR===void 0?void 0:_currencies$Field$CUR.symbol)+' and '+((_parsedAmounts$Field$2=parsedAmounts[Field.CURRENCY_B])===null||_parsedAmounts$Field$2===void 0?void 0:_parsedAmounts$Field$2.toSignificant(3))+' '+((_currencies$Field$CUR2=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR2===void 0?void 0:_currencies$Field$CUR2.symbol)});setTxHash(response.hash);ReactGA.event({category:'Liquidity',action:'Add',label:[(_currencies$Field$CUR3=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR3===void 0?void 0:_currencies$Field$CUR3.symbol,(_currencies$Field$CUR4=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR4===void 0?void 0:_currencies$Field$CUR4.symbol].join('/')});})).catch(error=>{setAttemptingTxn(false);// we only care if the error is something _other_ than the user rejected the tx\nif((error===null||error===void 0?void 0:error.code)!==4001){console.error(error);}});}const modalHeader=()=>{var _currencies$Field$CUR5,_currencies$Field$CUR6,_currencies$Field$CUR7,_currencies$Field$CUR8;return noLiquidity?/*#__PURE__*/React.createElement(AutoColumn,{gap:\"20px\"},/*#__PURE__*/React.createElement(LightCard,{mt:\"20px\",borderRadius:\"20px\"},/*#__PURE__*/React.createElement(RowFlat,null,/*#__PURE__*/React.createElement(Text,{fontSize:\"48px\",fontWeight:500,lineHeight:\"42px\",marginRight:10},((_currencies$Field$CUR5=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR5===void 0?void 0:_currencies$Field$CUR5.symbol)+'/'+((_currencies$Field$CUR6=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR6===void 0?void 0:_currencies$Field$CUR6.symbol)),/*#__PURE__*/React.createElement(DoubleCurrencyLogo,{currency0:currencies[Field.CURRENCY_A],currency1:currencies[Field.CURRENCY_B],size:30})))):/*#__PURE__*/React.createElement(AutoColumn,{gap:\"20px\"},/*#__PURE__*/React.createElement(RowFlat,{style:{marginTop:'20px'}},/*#__PURE__*/React.createElement(Text,{fontSize:\"48px\",fontWeight:500,lineHeight:\"42px\",marginRight:10},liquidityMinted===null||liquidityMinted===void 0?void 0:liquidityMinted.toSignificant(6)),/*#__PURE__*/React.createElement(DoubleCurrencyLogo,{currency0:currencies[Field.CURRENCY_A],currency1:currencies[Field.CURRENCY_B],size:30})),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Text,{fontSize:\"24px\"},((_currencies$Field$CUR7=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR7===void 0?void 0:_currencies$Field$CUR7.symbol)+'/'+((_currencies$Field$CUR8=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR8===void 0?void 0:_currencies$Field$CUR8.symbol)+' Pool Tokens')),/*#__PURE__*/React.createElement(TYPE.italic,{fontSize:12,textAlign:\"left\",padding:'8px 0 0 0 '},\"Output is estimated. If the price changes by more than \".concat(allowedSlippage/100,\"% your transaction will revert.\")));};const modalBottom=()=>{return/*#__PURE__*/React.createElement(ConfirmAddModalBottom,{price:price,currencies:currencies,parsedAmounts:parsedAmounts,noLiquidity:noLiquidity,onAdd:onAdd,poolTokenPercentage:poolTokenPercentage});};const pendingText=\"Supplying \".concat((_parsedAmounts$Field$3=parsedAmounts[Field.CURRENCY_A])===null||_parsedAmounts$Field$3===void 0?void 0:_parsedAmounts$Field$3.toSignificant(6),\" \").concat((_currencies$Field$CUR9=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR9===void 0?void 0:_currencies$Field$CUR9.symbol,\" and \").concat((_parsedAmounts$Field$4=parsedAmounts[Field.CURRENCY_B])===null||_parsedAmounts$Field$4===void 0?void 0:_parsedAmounts$Field$4.toSignificant(6),\" \").concat((_currencies$Field$CUR10=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR10===void 0?void 0:_currencies$Field$CUR10.symbol);const handleCurrencyASelect=useCallback(currencyA=>{const newCurrencyIdA=currencyId(currencyA);if(newCurrencyIdA===currencyIdB){history.push(\"/add/\".concat(currencyIdB,\"/\").concat(currencyIdA));}else{history.push(\"/add/\".concat(newCurrencyIdA,\"/\").concat(currencyIdB));}},[currencyIdB,history,currencyIdA]);const handleCurrencyBSelect=useCallback(currencyB=>{const newCurrencyIdB=currencyId(currencyB);if(currencyIdA===newCurrencyIdB){if(currencyIdB){history.push(\"/add/\".concat(currencyIdB,\"/\").concat(newCurrencyIdB));}else{history.push(\"/add/\".concat(newCurrencyIdB));}}else{history.push(\"/add/\".concat(currencyIdA?currencyIdA:'ETH',\"/\").concat(newCurrencyIdB));}},[currencyIdA,history,currencyIdB]);const handleDismissConfirmation=useCallback(()=>{setShowConfirm(false);// if there was a tx hash, we want to clear the input\nif(txHash){onFieldAInput('');}setTxHash('');},[onFieldAInput,txHash]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(AppBody,null,/*#__PURE__*/React.createElement(AddRemoveTabs,{adding:true}),/*#__PURE__*/React.createElement(Wrapper,null,/*#__PURE__*/React.createElement(TransactionConfirmationModal,{isOpen:showConfirm,onDismiss:handleDismissConfirmation,attemptingTxn:attemptingTxn,hash:txHash,content:()=>/*#__PURE__*/React.createElement(ConfirmationModalContent,{title:noLiquidity?'You are creating a pool':'You will receive',onDismiss:handleDismissConfirmation,topContent:modalHeader,bottomContent:modalBottom}),pendingText:pendingText}),/*#__PURE__*/React.createElement(AutoColumn,{gap:\"20px\"},noLiquidity&&/*#__PURE__*/React.createElement(ColumnCenter,null,/*#__PURE__*/React.createElement(BlueCard,null,/*#__PURE__*/React.createElement(AutoColumn,{gap:\"10px\"},/*#__PURE__*/React.createElement(TYPE.link,{fontWeight:600,color:'primaryText1'},\"You are the first liquidity provider.\"),/*#__PURE__*/React.createElement(TYPE.link,{fontWeight:400,color:'primaryText1'},\"The ratio of tokens you add will set the price of this pool.\"),/*#__PURE__*/React.createElement(TYPE.link,{fontWeight:400,color:'primaryText1'},\"Once you are happy with the rate click supply to review.\")))),/*#__PURE__*/React.createElement(CurrencyInputPanel,{value:formattedAmounts[Field.CURRENCY_A],onUserInput:onFieldAInput,onMax:()=>{var _maxAmounts$Field$CUR,_maxAmounts$Field$CUR2;onFieldAInput((_maxAmounts$Field$CUR=(_maxAmounts$Field$CUR2=maxAmounts[Field.CURRENCY_A])===null||_maxAmounts$Field$CUR2===void 0?void 0:_maxAmounts$Field$CUR2.toExact())!==null&&_maxAmounts$Field$CUR!==void 0?_maxAmounts$Field$CUR:'');},onCurrencySelect:handleCurrencyASelect,showMaxButton:!atMaxAmounts[Field.CURRENCY_A],currency:currencies[Field.CURRENCY_A],id:\"add-liquidity-input-tokena\",showCommonBases:true}),/*#__PURE__*/React.createElement(ColumnCenter,null,/*#__PURE__*/React.createElement(Plus,{size:\"16\",color:theme.text2})),/*#__PURE__*/React.createElement(CurrencyInputPanel,{value:formattedAmounts[Field.CURRENCY_B],onUserInput:onFieldBInput,onCurrencySelect:handleCurrencyBSelect,onMax:()=>{var _maxAmounts$Field$CUR3,_maxAmounts$Field$CUR4;onFieldBInput((_maxAmounts$Field$CUR3=(_maxAmounts$Field$CUR4=maxAmounts[Field.CURRENCY_B])===null||_maxAmounts$Field$CUR4===void 0?void 0:_maxAmounts$Field$CUR4.toExact())!==null&&_maxAmounts$Field$CUR3!==void 0?_maxAmounts$Field$CUR3:'');},showMaxButton:!atMaxAmounts[Field.CURRENCY_B],currency:currencies[Field.CURRENCY_B],id:\"add-liquidity-input-tokenb\",showCommonBases:true}),currencies[Field.CURRENCY_A]&&currencies[Field.CURRENCY_B]&&pairState!==PairState.INVALID&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(GreyCard,{padding:\"0px\",borderRadius:'20px'},/*#__PURE__*/React.createElement(RowBetween,{padding:\"1rem\"},/*#__PURE__*/React.createElement(TYPE.subHeader,{fontWeight:500,fontSize:14},noLiquidity?'Initial prices':'Prices',\" and pool share\")),' ',/*#__PURE__*/React.createElement(LightCard,{padding:\"1rem\",borderRadius:'20px'},/*#__PURE__*/React.createElement(PoolPriceBar,{currencies:currencies,poolTokenPercentage:poolTokenPercentage,noLiquidity:noLiquidity,price:price})))),!account?/*#__PURE__*/React.createElement(ButtonLight,{onClick:toggleWalletModal},\"Connect Wallet\"):/*#__PURE__*/React.createElement(AutoColumn,{gap:'md'},(approvalA===ApprovalState.NOT_APPROVED||approvalA===ApprovalState.PENDING||approvalB===ApprovalState.NOT_APPROVED||approvalB===ApprovalState.PENDING)&&isValid&&/*#__PURE__*/React.createElement(RowBetween,null,approvalA!==ApprovalState.APPROVED&&/*#__PURE__*/React.createElement(ButtonPrimary,{onClick:approveACallback,disabled:approvalA===ApprovalState.PENDING,width:approvalB!==ApprovalState.APPROVED?'48%':'100%'},approvalA===ApprovalState.PENDING?/*#__PURE__*/React.createElement(Dots,null,\"Approving \",(_currencies$Field$CUR11=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR11===void 0?void 0:_currencies$Field$CUR11.symbol):'Approve '+((_currencies$Field$CUR12=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR12===void 0?void 0:_currencies$Field$CUR12.symbol)),approvalB!==ApprovalState.APPROVED&&/*#__PURE__*/React.createElement(ButtonPrimary,{onClick:approveBCallback,disabled:approvalB===ApprovalState.PENDING,width:approvalA!==ApprovalState.APPROVED?'48%':'100%'},approvalB===ApprovalState.PENDING?/*#__PURE__*/React.createElement(Dots,null,\"Approving \",(_currencies$Field$CUR13=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR13===void 0?void 0:_currencies$Field$CUR13.symbol):'Approve '+((_currencies$Field$CUR14=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR14===void 0?void 0:_currencies$Field$CUR14.symbol))),/*#__PURE__*/React.createElement(ButtonError,{onClick:()=>{expertMode?onAdd():setShowConfirm(true);},disabled:!isValid||approvalA!==ApprovalState.APPROVED||approvalB!==ApprovalState.APPROVED,error:!isValid&&!!parsedAmounts[Field.CURRENCY_A]&&!!parsedAmounts[Field.CURRENCY_B]},/*#__PURE__*/React.createElement(Text,{fontSize:20,fontWeight:500},error!==null&&error!==void 0?error:'Supply')))))),pair&&!noLiquidity&&pairState!==PairState.INVALID?/*#__PURE__*/React.createElement(AutoColumn,{style:{minWidth:'20rem',marginTop:'1rem'}},/*#__PURE__*/React.createElement(MinimalPositionCard,{showUnwrapped:oneCurrencyIsWETH,pair:pair})):null);}","map":{"version":3,"names":["BigNumber","currencyEquals","ETHER","WETH","React","useCallback","useContext","useState","Plus","ReactGA","Text","ThemeContext","ButtonError","ButtonLight","ButtonPrimary","BlueCard","GreyCard","LightCard","AutoColumn","ColumnCenter","TransactionConfirmationModal","ConfirmationModalContent","CurrencyInputPanel","DoubleCurrencyLogo","AddRemoveTabs","MinimalPositionCard","Row","RowBetween","RowFlat","ROUTER_ADDRESS","PairState","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallback","useWalletModalToggle","Field","useDerivedMintInfo","useMintActionHandlers","useMintState","useTransactionAdder","useIsExpertMode","useUserDeadline","useUserSlippageTolerance","TYPE","calculateGasMargin","calculateSlippageAmount","getRouterContract","maxAmountSpend","wrappedCurrency","AppBody","Dots","Wrapper","ConfirmAddModalBottom","currencyId","PoolPriceBar","AddLiquidity","_ref","_parsedAmounts$depend","_parsedAmounts$depend2","_parsedAmounts$Field$3","_currencies$Field$CUR9","_parsedAmounts$Field$4","_currencies$Field$CUR10","_currencies$Field$CUR11","_currencies$Field$CUR12","_currencies$Field$CUR13","_currencies$Field$CUR14","match","params","currencyIdA","currencyIdB","history","account","chainId","library","theme","currencyA","currencyB","oneCurrencyIsWETH","Boolean","toggleWalletModal","expertMode","independentField","typedValue","otherTypedValue","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","undefined","onFieldAInput","onFieldBInput","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","CURRENCY_A","CURRENCY_B","reduce","accumulator","field","_objectSpread","atMaxAmounts","_maxAmounts$field","_parsedAmounts$field","equalTo","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","onAdd","router","parsedAmountA","parsedAmountB","amountsMin","deadlineFromNow","Math","ceil","Date","now","estimate","method","args","value","_wrappedCurrency$addr","_wrappedCurrency","tokenBIsETH","estimateGas","addLiquidityETH","address","raw","toString","from","_wrappedCurrency$addr2","_wrappedCurrency2","_wrappedCurrency$addr3","_wrappedCurrency3","addLiquidity","then","estimatedGasLimit","gasLimit","response","_parsedAmounts$Field$","_currencies$Field$CUR","_parsedAmounts$Field$2","_currencies$Field$CUR2","_currencies$Field$CUR3","_currencies$Field$CUR4","summary","symbol","hash","event","category","action","label","join","catch","code","console","modalHeader","_currencies$Field$CUR5","_currencies$Field$CUR6","_currencies$Field$CUR7","_currencies$Field$CUR8","createElement","gap","mt","borderRadius","fontSize","fontWeight","lineHeight","marginRight","currency0","currency1","size","style","marginTop","italic","textAlign","padding","concat","modalBottom","pendingText","handleCurrencyASelect","newCurrencyIdA","push","handleCurrencyBSelect","newCurrencyIdB","handleDismissConfirmation","Fragment","adding","isOpen","onDismiss","content","title","topContent","bottomContent","link","color","onUserInput","onMax","_maxAmounts$Field$CUR","_maxAmounts$Field$CUR2","toExact","onCurrencySelect","showMaxButton","currency","id","showCommonBases","text2","_maxAmounts$Field$CUR3","_maxAmounts$Field$CUR4","INVALID","subHeader","onClick","NOT_APPROVED","PENDING","APPROVED","disabled","width","minWidth","showUnwrapped"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/pages/AddLiquidity/index.tsx"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from 'fomoswap-bera1'\nimport React, { useCallback, useContext, useState } from 'react'\nimport { Plus } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport { BlueCard, GreyCard, LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween, RowFlat } from '../../components/Row'\n\nimport { ROUTER_ADDRESS } from '../../constants'\nimport { PairState } from '../../data/Reserves'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { TYPE } from '../../theme'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport AppBody from '../AppBody'\nimport { Dots, Wrapper } from '../Pool/styleds'\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\nimport { currencyId } from '../../utils/currencyId'\nimport { PoolPriceBar } from './PoolPriceBar'\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB }\n  },\n  history\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId])))\n  )\n\n  const toggleWalletModal = useWalletModalToggle() // toggle wallet when disconnected\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const [deadline] = useUserDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field])\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0')\n      }\n    },\n    {}\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    }\n\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsETH = currencyB === ETHER\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadlineFromNow\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadlineFromNow\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then(estimatedGasLimit =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit)\n        }).then(response => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary:\n              'Add ' +\n              parsedAmounts[Field.CURRENCY_A]?.toSignificant(3) +\n              ' ' +\n              currencies[Field.CURRENCY_A]?.symbol +\n              ' and ' +\n              parsedAmounts[Field.CURRENCY_B]?.toSignificant(3) +\n              ' ' +\n              currencies[Field.CURRENCY_B]?.symbol\n          })\n\n          setTxHash(response.hash)\n\n          ReactGA.event({\n            category: 'Liquidity',\n            action: 'Add',\n            label: [currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol].join('/')\n          })\n        })\n      )\n      .catch(error => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <AutoColumn gap=\"20px\">\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\n          <RowFlat>\n            <Text fontSize=\"48px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\n              {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol}\n            </Text>\n            <DoubleCurrencyLogo\n              currency0={currencies[Field.CURRENCY_A]}\n              currency1={currencies[Field.CURRENCY_B]}\n              size={30}\n            />\n          </RowFlat>\n        </LightCard>\n      </AutoColumn>\n    ) : (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: '20px' }}>\n          <Text fontSize=\"48px\" fontWeight={500} lineHeight=\"42px\" marginRight={10}>\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </RowFlat>\n        <Row>\n          <Text fontSize=\"24px\">\n            {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol + ' Pool Tokens'}\n          </Text>\n        </Row>\n        <TYPE.italic fontSize={12} textAlign=\"left\" padding={'8px 0 0 0 '}>\n          {`Output is estimated. If the price changes by more than ${allowedSlippage /\n            100}% your transaction will revert.`}\n        </TYPE.italic>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\n    currencies[Field.CURRENCY_A]?.symbol\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencies[Field.CURRENCY_B]?.symbol}`\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA)\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\n      } else {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\n      }\n    },\n    [currencyIdB, history, currencyIdA]\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          history.push(`/add/${newCurrencyIdB}`)\n        }\n      } else {\n        history.push(`/add/${currencyIdA ? currencyIdA : 'ETH'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, history, currencyIdB]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs adding={true} />\n        <Wrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={handleDismissConfirmation}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            content={() => (\n              <ConfirmationModalContent\n                title={noLiquidity ? 'You are creating a pool' : 'You will receive'}\n                onDismiss={handleDismissConfirmation}\n                topContent={modalHeader}\n                bottomContent={modalBottom}\n              />\n            )}\n            pendingText={pendingText}\n          />\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <BlueCard>\n                  <AutoColumn gap=\"10px\">\n                    <TYPE.link fontWeight={600} color={'primaryText1'}>\n                      You are the first liquidity provider.\n                    </TYPE.link>\n                    <TYPE.link fontWeight={400} color={'primaryText1'}>\n                      The ratio of tokens you add will set the price of this pool.\n                    </TYPE.link>\n                    <TYPE.link fontWeight={400} color={'primaryText1'}>\n                      Once you are happy with the rate click supply to review.\n                    </TYPE.link>\n                  </AutoColumn>\n                </BlueCard>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <Plus size=\"16\" color={theme.text2} />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <GreyCard padding=\"0px\" borderRadius={'20px'}>\n                  <RowBetween padding=\"1rem\">\n                    <TYPE.subHeader fontWeight={500} fontSize={14}>\n                      {noLiquidity ? 'Initial prices' : 'Prices'} and pool share\n                    </TYPE.subHeader>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius={'20px'}>\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </GreyCard>\n              </>\n            )}\n\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\n            ) : (\n              <AutoColumn gap={'md'}>\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>Approving {currencies[Field.CURRENCY_A]?.symbol}</Dots>\n                          ) : (\n                            'Approve ' + currencies[Field.CURRENCY_A]?.symbol\n                          )}\n                        </ButtonPrimary>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>Approving {currencies[Field.CURRENCY_B]?.symbol}</Dots>\n                          ) : (\n                            'Approve ' + currencies[Field.CURRENCY_B]?.symbol\n                          )}\n                        </ButtonPrimary>\n                      )}\n                    </RowBetween>\n                  )}\n                <ButtonError\n                  onClick={() => {\n                    expertMode ? onAdd() : setShowConfirm(true)\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                  error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n                >\n                  <Text fontSize={20} fontWeight={500}>\n                    {error ?? 'Supply'}\n                  </Text>\n                </ButtonError>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\n        <AutoColumn style={{ minWidth: '20rem', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}