{"ast":null,"code":"import { JSBI, Percent, Router, TradeType } from 'fomoswap-bera1';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport v1SwapArguments from '../utils/v1SwapArguments';\nimport { useActiveWeb3React } from './index';\nimport { useV1ExchangeContract } from './useContract';\nimport useENS from './useENS';\nimport { Version } from './useToggledVersion';\nexport let SwapCallbackState;\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(trade,\n// trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\n// in bips\ndeadline = DEFAULT_DEADLINE_FROM_NOW,\n// in seconds from now\nrecipientAddressOrName) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true);\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade);\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId) return [];\n    const contract = tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange;\n    if (!contract) {\n      return [];\n    }\n    const swapMethods = [];\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(Router.swapCallParameters(trade, {\n          feeOnTransfer: false,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          ttl: deadline\n        }));\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(Router.swapCallParameters(trade, {\n            feeOnTransfer: true,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          }));\n        }\n        break;\n      case Version.v1:\n        swapMethods.push(v1SwapArguments(trade, {\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          ttl: deadline\n        }));\n        break;\n    }\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange]);\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade,\n// trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\n// in bips\ndeadline = DEFAULT_DEADLINE_FROM_NOW,\n// in seconds from now\nrecipientAddressOrName) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null\n        };\n      }\n    }\n    const tradeVersion = getTradeVersion(trade);\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call;\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.debug('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              console.debug('Call threw error', call, callError);\n              let errorMessage;\n              switch (callError.reason) {\n                case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                  errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                  break;\n                default:\n                  errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n              }\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        }));\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName}`;\n          const withVersion = tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${tradeVersion.toUpperCase()}`;\n          addTransaction(response, {\n            summary: withVersion\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}","map":{"version":3,"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useV1TradeExchangeAddress","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","v1SwapArguments","useActiveWeb3React","useV1ExchangeContract","useENS","Version","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","deadline","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","v1Exchange","tradeVersion","contract","v2","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","ttl","tradeType","EXACT_INPUT","v1","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","withVersion","toUpperCase","summary","hash","code","message"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from 'fomoswap-bera1'\nimport { useMemo } from 'react'\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport v1SwapArguments from '../utils/v1SwapArguments'\nimport { useActiveWeb3React } from './index'\nimport { useV1ExchangeContract } from './useContract'\nimport useENS from './useENS'\nimport { Version } from './useToggledVersion'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true)\n\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade)\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId) return []\n\n    const contract: Contract | null =\n      tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          })\n        )\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n              recipient,\n              ttl: deadline\n            })\n          )\n        }\n        break\n      case Version.v1:\n        swapMethods.push(\n          v1SwapArguments(trade, {\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          })\n        )\n        break\n    }\n    return swapMethods.map(parameters => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      } else {\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\n      }\n    }\n\n    const tradeVersion = getTradeVersion(trade)\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map(call => {\n            const {\n              parameters: { methodName, args, value },\n              contract\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then(gasEstimate => {\n                return {\n                  call,\n                  gasEstimate\n                }\n              })\n              .catch(gasError => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then(result => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch(callError => {\n                    console.debug('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value }\n          },\n          gasEstimate\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? { value, from: account } : { from: account })\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            const withVersion =\n              tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`\n\n            addTransaction(response, {\n              summary: withVersion\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}