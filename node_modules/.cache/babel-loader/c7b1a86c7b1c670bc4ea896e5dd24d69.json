{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar JSBI = _interopDefault(require('jsbi'));\nvar invariant = _interopDefault(require('tiny-invariant'));\nvar warning = _interopDefault(require('tiny-warning'));\nvar address = require('@ethersproject/address');\nvar _Big = _interopDefault(require('big.js'));\nvar toFormat = _interopDefault(require('toformat'));\nvar _Decimal = _interopDefault(require('decimal.js-light'));\nvar solidity = require('@ethersproject/solidity');\nvar contracts = require('@ethersproject/contracts');\nvar networks = require('@ethersproject/networks');\nvar providers = require('@ethersproject/providers');\nvar IUniswapV2Pair = _interopDefault(require('@uniswap/v2-core/build/IUniswapV2Pair.json'));\nvar _SOLIDITY_TYPE_MAXIMA;\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"G\\xD6RLI\"] = 5] = \"G\\xD6RLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"Sepolia\"] = 11155111] = \"Sepolia\";\n  ChainId[ChainId[\"UniChain\"] = 130] = \"UniChain\";\n  ChainId[ChainId[\"Artio\"] = 80084] = \"Artio\";\n})(exports.ChainId || (exports.ChainId = {}));\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(exports.TradeType || (exports.TradeType = {}));\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(exports.Rounding || (exports.Rounding = {}));\nvar FACTORY_ADDRESS = '0x86d1a546c0f41f34583df806b1E87B712C5Eb7aE';\nvar INIT_CODE_HASH = '0x7ebddd273052fc594ff63ce49f2e274d5b0331aa6557f92cab2ebcfc0e3f283e';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\nvar SolidityType;\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(SolidityType || (SolidityType = {}));\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\n// see https://stackoverflow.com/a/41102306\nvar CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object;\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n  function InsufficientReservesError() {\n    var _this;\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n  return InsufficientReservesError;\n}(/*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n  function InsufficientInputAmountError() {\n    var _this2;\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n  return InsufficientInputAmountError;\n}(/*#__PURE__*/_wrapNativeSuper(Error));\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? invariant(false, value + \" is not a \" + solidityType + \".\") : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? invariant(false, value + \" is not a \" + solidityType + \".\") : void 0;\n} // warns if addresses are not checksummed\n\nfunction validateAndParseAddress(address$1) {\n  try {\n    var checksummedAddress = address.getAddress(address$1);\n    \"development\" !== \"production\" ? warning(address$1 === checksummedAddress, address$1 + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    invariant(false, address$1 + \" is not a valid address.\");\n  }\n}\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? invariant(false, 'MAX_SIZE_ZERO') : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? invariant(false, 'ITEMS_SIZE') : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n    var lo = 0,\n      hi = items.length;\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\n\nvar Currency =\n/**\r\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\r\n * The only instance of the base class `Currency`.\r\n */\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'BERA', 'BERA');\nvar ETHER = Currency.ETHER;\nvar _WETH;\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n  var _proto = Token.prototype;\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */;\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? invariant(false, 'CHAIN_IDS') : void 0;\n    !(this.address !== other.address) ? invariant(false, 'ADDRESSES') : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n  return Token;\n}(Currency);\n/**\r\n * Compares two currencies for equality\r\n */\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\nvar WETH = (_WETH = {}, _WETH[exports.ChainId.MAINNET] = /*#__PURE__*/new Token(exports.ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.ROPSTEN] = /*#__PURE__*/new Token(exports.ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.RINKEBY] = /*#__PURE__*/new Token(exports.ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.GÖRLI] = /*#__PURE__*/new Token(exports.ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.KOVAN] = /*#__PURE__*/new Token(exports.ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.Sepolia] = /*#__PURE__*/new Token(exports.ChainId.Sepolia, '0xC190f8492DEe0e427015Bbe7B4219F497f69b117', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.UniChain] = /*#__PURE__*/new Token(exports.ChainId.UniChain, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[exports.ChainId.Artio] = /*#__PURE__*/new Token(exports.ChainId.Artio, '0x7507c1dc16935B82698e4C63f2746A2fCf994dF8', 18, 'WBERA', 'Wrapped BERA'), _WETH);\nvar _toSignificantRoundin, _toFixedRounding;\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[exports.Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[exports.Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[exports.Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[exports.Rounding.ROUND_DOWN] = 0, _toFixedRounding[exports.Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[exports.Rounding.ROUND_UP] = 3, _toFixedRounding);\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n  var _proto = Fraction.prototype;\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(significantDigits) ? invariant(false, significantDigits + \" is not an integer.\") : void 0;\n    !(significantDigits > 0) ? invariant(false, significantDigits + \" is not positive.\") : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(decimalPlaces) ? invariant(false, decimalPlaces + \" is not an integer.\") : void 0;\n    !(decimalPlaces >= 0) ? invariant(false, decimalPlaces + \" is negative.\") : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n  return Fraction;\n}();\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction);\n\n  // amount _must_ be raw, i.e. in the native representation\n  function CurrencyAmount(currency, amount) {\n    var _this;\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n  var _proto = CurrencyAmount.prototype;\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? invariant(false, 'TOKEN') : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? invariant(false, 'TOKEN') : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_DOWN;\n    }\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_DOWN;\n    }\n    !(decimalPlaces <= this.currency.decimals) ? invariant(false, 'DECIMALS') : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n  return CurrencyAmount;\n}(Fraction);\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount);\n\n  // amount _must_ be raw, i.e. in the native representation\n  function TokenAmount(token, amount) {\n    var _this;\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n  var _proto = TokenAmount.prototype;\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? invariant(false, 'TOKEN') : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? invariant(false, 'TOKEN') : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n  return TokenAmount;\n}(CurrencyAmount);\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction);\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        i = _step$value[0],\n        pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n  var _proto = Price.prototype;\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? invariant(false, 'TOKEN') : void 0;\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? invariant(false, 'TOKEN') : void 0;\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n  return Price;\n}(Fraction);\nvar PAIR_ADDRESS_CACHE = {};\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE === void 0 ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) === null || _PAIR_ADDRESS_CACHE$t === void 0 ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE2 === void 0 ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = address.getCreate2Address(FACTORY_ADDRESS, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */;\n  var _proto = Pair.prototype;\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */;\n\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? invariant(false, 'TOKEN') : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */;\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? invariant(false, 'TOKEN') : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? invariant(false, 'TOKEN') : void 0;\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? invariant(false, 'TOKEN') : void 0;\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? invariant(false, 'LIQUIDITY') : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? invariant(false, 'TOKEN') : void 0;\n    var liquidity;\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n    !this.involvesToken(token) ? invariant(false, 'TOKEN') : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? invariant(false, 'TOTAL_SUPPLY') : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? invariant(false, 'LIQUIDITY') : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? invariant(false, 'LIQUIDITY') : void 0;\n    var totalSupplyAdjusted;\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? invariant(false, 'K_LAST') : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n  return Pair;\n}();\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? invariant(false, 'PAIRS') : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? invariant(false, 'CHAIN_IDS') : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? invariant(false, 'INPUT') : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? invariant(false, 'OUTPUT') : void 0;\n    var path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        i = _step$value[0],\n        pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? invariant(false, 'PATH') : void 0;\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n      path.push(_output);\n    }\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n  _createClass(Route, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n  return Route;\n}();\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n  var _proto = Percent.prototype;\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n  return Percent;\n}(Fraction);\n\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? invariant(false, 'INPUT_CURRENCY') : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? invariant(false, 'OUTPUT_CURRENCY') : void 0;\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw);\n  invariant(false, 'CURRENCY');\n}\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH[chainId];\n  invariant(false, 'CURRENCY');\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n    if (tradeType === exports.TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? invariant(false, 'INPUT') : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n          outputAmount = _pair$getOutputAmount[0],\n          nextPair = _pair$getOutputAmount[1];\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? invariant(false, 'OUTPUT') : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n          inputAmount = _pair$getInputAmount[0],\n          _nextPair = _pair$getInputAmount[1];\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === exports.TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === exports.TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, exports.TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */;\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, exports.TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */;\n  var _proto = Trade.prototype;\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? invariant(false, 'SLIPPAGE_TOLERANCE') : void 0;\n    if (this.tradeType === exports.TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */;\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? invariant(false, 'SLIPPAGE_TOLERANCE') : void 0;\n    if (this.tradeType === exports.TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */;\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp,\n  // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      _ref$maxNumResults = _ref.maxNumResults,\n      maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n      _ref$maxHops = _ref.maxHops,\n      maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n    !(pairs.length > 0) ? invariant(false, 'PAIRS') : void 0;\n    !(maxHops > 0) ? invariant(false, 'MAX_HOPS') : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? invariant(false, 'INVALID_RECURSION') : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? invariant(false, 'CHAIN_ID') : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n      try {\n        ;\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, exports.TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n    return bestTrades;\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */;\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2,\n  // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$maxNumResults = _ref2.maxNumResults,\n      maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n      _ref2$maxHops = _ref2.maxHops,\n      maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n    !(pairs.length > 0) ? invariant(false, 'PAIRS') : void 0;\n    !(maxHops > 0) ? invariant(false, 'MAX_HOPS') : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? invariant(false, 'INVALID_RECURSION') : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? invariant(false, 'CHAIN_ID') : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n      try {\n        ;\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, exports.TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n    return bestTrades;\n  };\n  return Trade;\n}();\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.raw.toString(16);\n}\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? invariant(false, 'ETHER_IN_OUT') : void 0;\n    !(options.ttl > 0) ? invariant(false, 'TTL') : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n    switch (trade.tradeType) {\n      case exports.TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n      case exports.TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? invariant(false, 'EXACT_OUT_FOT') : void 0;\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n    }\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n  return Router;\n}();\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nvar _TOKEN_DECIMALS_CACHE;\nvar TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[exports.ChainId.MAINNET] = {\n  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n}, _TOKEN_DECIMALS_CACHE);\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Fetcher() {}\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\n\n  Fetcher.fetchTokenData = function fetchTokenData(chainId, address, provider, symbol, name) {\n    try {\n      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;\n      var _temp3 = function _temp3(parsedDecimals) {\n        return new Token(chainId, address, parsedDecimals, symbol, name);\n      };\n      if (provider === undefined) provider = providers.getDefaultProvider(networks.getNetwork(chainId));\n      var _temp4 = typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number';\n      return Promise.resolve(_temp4 ? _temp3(TOKEN_DECIMALS_CACHE[chainId][address]) : Promise.resolve(new contracts.Contract(address, ERC20, provider).decimals().then(function (decimals) {\n        var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;\n        TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE4 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n        return decimals;\n      })).then(_temp3));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */;\n  Fetcher.fetchPairData = function fetchPairData(tokenA, tokenB, provider) {\n    try {\n      if (provider === undefined) provider = providers.getDefaultProvider(networks.getNetwork(tokenA.chainId));\n      !(tokenA.chainId === tokenB.chainId) ? \"development\" !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n      var address = Pair.getAddress(tokenA, tokenB);\n      return Promise.resolve(new contracts.Contract(address, IUniswapV2Pair.abi, provider).getReserves()).then(function (_ref) {\n        var reserves0 = _ref[0],\n          reserves1 = _ref[1];\n        var balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  return Fetcher;\n}();\nexports.JSBI = JSBI;\nexports.Currency = Currency;\nexports.CurrencyAmount = CurrencyAmount;\nexports.ETHER = ETHER;\nexports.FACTORY_ADDRESS = FACTORY_ADDRESS;\nexports.Fetcher = Fetcher;\nexports.Fraction = Fraction;\nexports.INIT_CODE_HASH = INIT_CODE_HASH;\nexports.InsufficientInputAmountError = InsufficientInputAmountError;\nexports.InsufficientReservesError = InsufficientReservesError;\nexports.MINIMUM_LIQUIDITY = MINIMUM_LIQUIDITY;\nexports.Pair = Pair;\nexports.Percent = Percent;\nexports.Price = Price;\nexports.Route = Route;\nexports.Router = Router;\nexports.Token = Token;\nexports.TokenAmount = TokenAmount;\nexports.Trade = Trade;\nexports.WETH = WETH;\nexports.currencyEquals = currencyEquals;\nexports.inputOutputComparator = inputOutputComparator;\nexports.tradeComparator = tradeComparator;","map":{"version":3,"names":["ChainId","exports","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","isInsufficientReservesError","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","isInsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address$1","checksummedAddress","address","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Sepolia","UniChain","Artio","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","Big$1","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","_step","done","_step$value","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","undefined","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","_extends","getCreate2Address","solidity","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","_output","midPrice","_100_PERCENT","Percent","apply","arguments","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","_pair$getOutputAmount","nextPair","_i","_pair","_pair$getInputAmount","_nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","maxNumResults","_ref$maxNumResults","maxHops","_ref$maxHops","tokenOut","_pair$getOutputAmount2","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","providers","getDefaultProvider","networks","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","contracts","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","_temp3","e","reject","fetchPairData","IUniswapV2Pair","abi","getReserves","_ref","reserves0","reserves1","balances"],"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  Sepolia = 11155111,\n  UniChain = 130,\n  Artio = 80084\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x86d1a546c0f41f34583df806b1E87B712C5Eb7aE'\n\nexport const INIT_CODE_HASH = '0x7ebddd273052fc594ff63ce49f2e274d5b0331aa6557f92cab2ebcfc0e3f283e'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BERA', 'BERA')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.Sepolia]: new Token(ChainId.Sepolia, '0xC190f8492DEe0e427015Bbe7B4219F497f69b117', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.UniChain]: new Token(ChainId.UniChain, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.Artio]: new Token(ChainId.Artio, '0x7507c1dc16935B82698e4C63f2746A2fCf994dF8', 18, 'WBERA', 'Wrapped BERA')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}