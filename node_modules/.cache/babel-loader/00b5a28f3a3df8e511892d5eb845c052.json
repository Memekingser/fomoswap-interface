{"ast":null,"code":"import{configureStore,getDefaultMiddleware}from'@reduxjs/toolkit';import{save,load}from'redux-localstorage-simple';import application from'./application/reducer';import user from'./user/reducer';import transactions from'./transactions/reducer';import swap from'./swap/reducer';import mint from'./mint/reducer';import lists from'./lists/reducer';import burn from'./burn/reducer';import multicall from'./multicall/reducer';import{updateVersion}from'./user/actions';const PERSISTED_KEYS=['user','transactions','lists'];const store=configureStore({reducer:{application,user,transactions,swap,mint,burn,multicall,lists},middleware:[...getDefaultMiddleware(),save({states:PERSISTED_KEYS})],preloadedState:load({states:PERSISTED_KEYS})});store.dispatch(updateVersion());export default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","application","user","transactions","swap","mint","lists","burn","multicall","updateVersion","PERSISTED_KEYS","store","reducer","middleware","states","preloadedState","dispatch"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\n\nimport { updateVersion } from './user/actions'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware(), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,oBAAoB,KAAQ,kBAAkB,CACvE,OAASC,IAAI,CAAEC,IAAI,KAAQ,2BAA2B,CAEtD,MAAO,CAAAC,WAAW,KAAM,uBAAuB,CAC/C,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,YAAY,KAAM,wBAAwB,CACjD,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CACnC,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,SAAS,KAAM,qBAAqB,CAE3C,OAASC,aAAa,KAAQ,gBAAgB,CAE9C,KAAM,CAAAC,cAAwB,CAAG,CAAC,MAAM,CAAE,cAAc,CAAE,OAAO,CAAC,CAElE,KAAM,CAAAC,KAAK,CAAGd,cAAc,CAAC,CAC3Be,OAAO,CAAE,CACPX,WAAW,CACXC,IAAI,CACJC,YAAY,CACZC,IAAI,CACJC,IAAI,CACJE,IAAI,CACJC,SAAS,CACTF,KACF,CAAC,CACDO,UAAU,CAAE,CAAC,GAAGf,oBAAoB,CAAC,CAAC,CAAEC,IAAI,CAAC,CAAEe,MAAM,CAAEJ,cAAe,CAAC,CAAC,CAAC,CACzEK,cAAc,CAAEf,IAAI,CAAC,CAAEc,MAAM,CAAEJ,cAAe,CAAC,CACjD,CAAC,CAAC,CAEFC,KAAK,CAACK,QAAQ,CAACP,aAAa,CAAC,CAAC,CAAC,CAE/B,cAAe,CAAAE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}