{"ast":null,"code":"var _jsxFileName = \"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/NumericalInput/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { escapeRegExp } from '../../utils';\nconst StyledInput = styled.input`\n  color: ${({\n  error,\n  theme\n}) => error ? theme.red1 : theme.text1};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({\n  theme\n}) => theme.bg1};\n  font-size: ${({\n  fontSize\n}) => fontSize !== null && fontSize !== void 0 ? fontSize : '24px'};\n  text-align: ${({\n  align\n}) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({\n  theme\n}) => theme.text4};\n  }\n`;\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}) {\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n  return /*#__PURE__*/React.createElement(StyledInput, Object.assign({}, rest, {\n    value: value,\n    onChange: event => {\n      // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, '.'));\n    }\n    // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\"\n    // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }));\n});\nexport default Input;\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"names":["React","styled","escapeRegExp","StyledInput","input","error","theme","red1","text1","bg1","fontSize","align","text4","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","createElement","Object","assign","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.red1 : theme.text1)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '24px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={event => {\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title=\"Token Amount\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,YAAY,QAAQ,aAAa;AAE1C,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAA6D;AACxF,WAAW,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAMD,KAAK,GAAGC,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACE,KAAM;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,CAAC;EAAEF;AAAM,CAAC,KAAKA,KAAK,CAACG,GAAG;AAC9C,eAAe,CAAC;EAAEC;AAAS,CAAC,KAAKA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,MAAM;AACnD,gBAAgB,CAAC;EAAEC;AAAM,CAAC,KAAKA,KAAK,IAAIA,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;EAAEL;AAAM,CAAC,KAAKA,KAAK,CAACM,KAAK;AACvC;AACA,CAAC;AAED,MAAMC,UAAU,GAAGC,MAAM,CAAC,wBAAwB,CAAC,EAAC;;AAEpD,OAAO,MAAMC,KAAK,GAAGf,KAAK,CAACgB,IAAI,CAAC,SAASC,UAAUA,CAAC;EAClDC,KAAK;EACLC,WAAW;EACXC,WAAW;EACX,GAAGC;AAOgE,CAAC,EAAE;EACtE,MAAMC,QAAQ,GAAIC,aAAqB,IAAK;IAC1C,IAAIA,aAAa,KAAK,EAAE,IAAIV,UAAU,CAACW,IAAI,CAACtB,YAAY,CAACqB,aAAa,CAAC,CAAC,EAAE;MACxEJ,WAAW,CAACI,aAAa,CAAC;IAC5B;EACF,CAAC;EAED,oBACEvB,KAAA,CAAAyB,aAAA,CAACtB,WAAW,EAAAuB,MAAA,CAAAC,MAAA,KACNN,IAAI;IACRH,KAAK,EAAEA,KAAM;IACbU,QAAQ,EAAEC,KAAK,IAAI;MACjB;MACAP,QAAQ,CAACO,KAAK,CAACC,MAAM,CAACZ,KAAK,CAACa,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACjD;IACA;IAAA;IACAC,SAAS,EAAC,SAAS;IACnBC,KAAK,EAAC,cAAc;IACpBC,YAAY,EAAC,KAAK;IAClBC,WAAW,EAAC;IACZ;IAAA;IACAC,IAAI,EAAC,MAAM;IACXC,OAAO,EAAC,qBAAqB;IAC7BjB,WAAW,EAAEA,WAAW,IAAI,KAAM;IAClCkB,SAAS,EAAE,CAAE;IACbC,SAAS,EAAE,EAAG;IACdC,UAAU,EAAC,OAAO;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACnB,CAAC;AAEN,CAAC,CAAC;AAEF,eAAe/B,KAAK;;AAEpB","ignoreList":[]},"metadata":{},"sourceType":"module"}