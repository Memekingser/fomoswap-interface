{"ast":null,"code":"\"use strict\";\n\nfunction t(t) {\n  return t && \"object\" == typeof t && \"default\" in t ? t.default : t;\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\nvar e,\n  n,\n  r,\n  o,\n  i = t(require(\"jsbi\")),\n  a = t(require(\"tiny-invariant\")),\n  u = (t(require(\"tiny-warning\")), require(\"@ethersproject/address\")),\n  s = t(require(\"big.js\")),\n  c = t(require(\"toformat\")),\n  p = t(require(\"decimal.js-light\")),\n  d = require(\"@ethersproject/solidity\"),\n  f = require(\"@ethersproject/contracts\"),\n  h = require(\"@ethersproject/networks\"),\n  l = require(\"@ethersproject/providers\"),\n  m = t(require(\"@uniswap/v2-core/build/IUniswapV2Pair.json\"));\n(n = exports.ChainId || (exports.ChainId = {}))[n.MAINNET = 1] = \"MAINNET\", n[n.ROPSTEN = 3] = \"ROPSTEN\", n[n.RINKEBY = 4] = \"RINKEBY\", n[n[\"GÖRLI\"] = 5] = \"GÖRLI\", n[n.KOVAN = 42] = \"KOVAN\", n[n.Sepolia = 11155111] = \"Sepolia\", n[n.UniChain = 130] = \"UniChain\", n[n.Artio = 80084] = \"Artio\", n[n.BERA = 80094] = \"BERA\", n[n.STORYTestnet = 1315] = \"STORYTestnet\", (r = exports.TradeType || (exports.TradeType = {}))[r.EXACT_INPUT = 0] = \"EXACT_INPUT\", r[r.EXACT_OUTPUT = 1] = \"EXACT_OUTPUT\", (o = exports.Rounding || (exports.Rounding = {}))[o.ROUND_DOWN = 0] = \"ROUND_DOWN\", o[o.ROUND_HALF_UP = 1] = \"ROUND_HALF_UP\", o[o.ROUND_UP = 2] = \"ROUND_UP\";\nvar v,\n  y = \"0x7ebddd273052fc594ff63ce49f2e274d5b0331aa6557f92cab2ebcfc0e3f283e\",\n  w = i.BigInt(1e3),\n  T = i.BigInt(0),\n  g = i.BigInt(1),\n  k = i.BigInt(2),\n  x = i.BigInt(3),\n  A = i.BigInt(5),\n  I = i.BigInt(10),\n  E = i.BigInt(100),\n  O = i.BigInt(997),\n  b = i.BigInt(1e3);\n!function (t) {\n  t.uint8 = \"uint8\", t.uint256 = \"uint256\";\n}(v || (v = {}));\nvar q = ((e = {})[v.uint8] = i.BigInt(\"0xff\"), e[v.uint256] = i.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), e);\nfunction C(t, e) {\n  for (var n = 0; n < e.length; n++) {\n    var r = e[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n  }\n}\nfunction R(t, e, n) {\n  return e && C(t.prototype, e), n && C(t, n), t;\n}\nfunction P() {\n  return (P = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nfunction N(t, e) {\n  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;\n}\nfunction U(t) {\n  return (U = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  })(t);\n}\nfunction _(t, e) {\n  return (_ = Object.setPrototypeOf || function (t, e) {\n    return t.__proto__ = e, t;\n  })(t, e);\n}\nfunction S() {\n  if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n  if (Reflect.construct.sham) return !1;\n  if (\"function\" == typeof Proxy) return !0;\n  try {\n    return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;\n  } catch (t) {\n    return !1;\n  }\n}\nfunction F(t, e, n) {\n  return (F = S() ? Reflect.construct : function (t, e, n) {\n    var r = [null];\n    r.push.apply(r, e);\n    var o = new (Function.bind.apply(t, r))();\n    return n && _(o, n.prototype), o;\n  }).apply(null, arguments);\n}\nfunction B(t) {\n  var e = \"function\" == typeof Map ? new Map() : void 0;\n  return (B = function (t) {\n    if (null === t || -1 === Function.toString.call(t).indexOf(\"[native code]\")) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== e) {\n      if (e.has(t)) return e.get(t);\n      e.set(t, n);\n    }\n    function n() {\n      return F(t, arguments, U(this).constructor);\n    }\n    return n.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: n,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), _(n, t);\n  })(t);\n}\nfunction D(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\nfunction j(t, e) {\n  (null == e || e > t.length) && (e = t.length);\n  for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];\n  return r;\n}\nfunction H(t, e) {\n  var n;\n  if (\"undefined\" == typeof Symbol || null == t[Symbol.iterator]) {\n    if (Array.isArray(t) || (n = function (t, e) {\n      if (t) {\n        if (\"string\" == typeof t) return j(t, void 0);\n        var n = Object.prototype.toString.call(t).slice(8, -1);\n        return \"Object\" === n && t.constructor && (n = t.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(t) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? j(t, void 0) : void 0;\n      }\n    }(t)) || e && t && \"number\" == typeof t.length) {\n      n && (t = n);\n      var r = 0;\n      return function () {\n        return r >= t.length ? {\n          done: !0\n        } : {\n          done: !1,\n          value: t[r++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  return (n = t[Symbol.iterator]()).next.bind(n);\n}\nvar W = \"setPrototypeOf\" in Object,\n  M = function (t) {\n    function e() {\n      var n;\n      return (n = t.call(this) || this).isInsufficientReservesError = !0, n.name = n.constructor.name, W && Object.setPrototypeOf(D(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n    }\n    return N(e, t), e;\n  }(B(Error)),\n  L = function (t) {\n    function e() {\n      var n;\n      return (n = t.call(this) || this).isInsufficientInputAmountError = !0, n.name = n.constructor.name, W && Object.setPrototypeOf(D(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n    }\n    return N(e, t), e;\n  }(B(Error));\nfunction X(t, e) {\n  i.greaterThanOrEqual(t, T) || a(!1), i.lessThanOrEqual(t, q[e]) || a(!1);\n}\nfunction Y(t) {\n  try {\n    return u.getAddress(t);\n  } catch (t) {\n    a(!1);\n  }\n}\nfunction K(t) {\n  return t instanceof i ? t : i.BigInt(\"bigint\" == typeof t ? t.toString() : t);\n}\nfunction V(t) {\n  X(t, v.uint256);\n  var e,\n    n = T;\n  if (i.greaterThan(t, x)) for (n = t, e = i.add(i.divide(t, k), g); i.lessThan(e, n);) n = e, e = i.divide(i.add(i.divide(t, e), e), k);else i.notEqual(t, T) && (n = g);\n  return n;\n}\nfunction G(t, e, n, r) {\n  if (n > 0 || a(!1), t.length <= n || a(!1), 0 === t.length) return t.push(e), null;\n  var o = t.length === n;\n  if (o && r(t[t.length - 1], e) <= 0) return e;\n  for (var i = 0, u = t.length; i < u;) {\n    var s = i + u >>> 1;\n    r(t[s], e) <= 0 ? i = s + 1 : u = s;\n  }\n  return t.splice(i, 0, e), o ? t.pop() : null;\n}\nvar J,\n  Q = function (t, e, n) {\n    X(i.BigInt(t), v.uint8), this.decimals = t, this.symbol = e, this.name = n;\n  },\n  $ = Q.ETHER = new Q(18, \"IP\", \"IP\"),\n  z = function (t) {\n    function e(e, n, r, o, i) {\n      var a;\n      return (a = t.call(this, r, o, i) || this).chainId = e, a.address = Y(n), a;\n    }\n    N(e, t);\n    var n = e.prototype;\n    return n.equals = function (t) {\n      return this === t || this.chainId === t.chainId && this.address === t.address;\n    }, n.sortsBefore = function (t) {\n      return this.chainId !== t.chainId && a(!1), this.address === t.address && a(!1), this.address.toLowerCase() < t.address.toLowerCase();\n    }, e;\n  }(Q);\nfunction Z(t, e) {\n  return t instanceof z && e instanceof z ? t.equals(e) : !(t instanceof z || e instanceof z || t !== e);\n}\nvar tt,\n  et,\n  nt = ((J = {})[exports.ChainId.MAINNET] = new z(exports.ChainId.MAINNET, \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.ROPSTEN] = new z(exports.ChainId.ROPSTEN, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.RINKEBY] = new z(exports.ChainId.RINKEBY, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.GÖRLI] = new z(exports.ChainId.GÖRLI, \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.KOVAN] = new z(exports.ChainId.KOVAN, \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.Sepolia] = new z(exports.ChainId.Sepolia, \"0xC190f8492DEe0e427015Bbe7B4219F497f69b117\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.UniChain] = new z(exports.ChainId.UniChain, \"0x4200000000000000000000000000000000000006\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.Artio] = new z(exports.ChainId.Artio, \"0x7507c1dc16935B82698e4C63f2746A2fCf994dF8\", 18, \"WBERA\", \"Wrapped BERA\"), J[exports.ChainId.BERA] = new z(exports.ChainId.BERA, \"0x6969696969696969696969696969696969696969\", 18, \"WBERA\", \"Wrapped BERA\"), J[exports.ChainId.STORYTestnet] = new z(exports.ChainId.STORYTestnet, \"0x1514000000000000000000000000000000000000\", 18, \"WIP\", \"Wrapped IP\"), J),\n  rt = c(p),\n  ot = c(s),\n  it = ((tt = {})[exports.Rounding.ROUND_DOWN] = rt.ROUND_DOWN, tt[exports.Rounding.ROUND_HALF_UP] = rt.ROUND_HALF_UP, tt[exports.Rounding.ROUND_UP] = rt.ROUND_UP, tt),\n  at = ((et = {})[exports.Rounding.ROUND_DOWN] = 0, et[exports.Rounding.ROUND_HALF_UP] = 1, et[exports.Rounding.ROUND_UP] = 3, et),\n  ut = function () {\n    function t(t, e) {\n      void 0 === e && (e = g), this.numerator = K(t), this.denominator = K(e);\n    }\n    var e = t.prototype;\n    return e.invert = function () {\n      return new t(this.denominator, this.numerator);\n    }, e.add = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.equal(this.denominator, n.denominator) ? new t(i.add(this.numerator, n.numerator), this.denominator) : new t(i.add(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)), i.multiply(this.denominator, n.denominator));\n    }, e.subtract = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.equal(this.denominator, n.denominator) ? new t(i.subtract(this.numerator, n.numerator), this.denominator) : new t(i.subtract(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)), i.multiply(this.denominator, n.denominator));\n    }, e.lessThan = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.lessThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n    }, e.equalTo = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.equal(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n    }, e.greaterThan = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.greaterThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n    }, e.multiply = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return new t(i.multiply(this.numerator, n.numerator), i.multiply(this.denominator, n.denominator));\n    }, e.divide = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return new t(i.multiply(this.numerator, n.denominator), i.multiply(this.denominator, n.numerator));\n    }, e.toSignificant = function (t, e, n) {\n      void 0 === e && (e = {\n        groupSeparator: \"\"\n      }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || a(!1), t > 0 || a(!1), rt.set({\n        precision: t + 1,\n        rounding: it[n]\n      });\n      var r = new rt(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(t);\n      return r.toFormat(r.decimalPlaces(), e);\n    }, e.toFixed = function (t, e, n) {\n      return void 0 === e && (e = {\n        groupSeparator: \"\"\n      }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || a(!1), t >= 0 || a(!1), ot.DP = t, ot.RM = at[n], new ot(this.numerator.toString()).div(this.denominator.toString()).toFormat(t, e);\n    }, R(t, [{\n      key: \"quotient\",\n      get: function () {\n        return i.divide(this.numerator, this.denominator);\n      }\n    }, {\n      key: \"remainder\",\n      get: function () {\n        return new t(i.remainder(this.numerator, this.denominator), this.denominator);\n      }\n    }]), t;\n  }(),\n  st = c(s),\n  ct = function (t) {\n    function e(e, n) {\n      var r,\n        o = K(n);\n      return X(o, v.uint256), (r = t.call(this, o, i.exponentiate(I, i.BigInt(e.decimals))) || this).currency = e, r;\n    }\n    N(e, t), e.ether = function (t) {\n      return new e($, t);\n    };\n    var n = e.prototype;\n    return n.add = function (t) {\n      return Z(this.currency, t.currency) || a(!1), new e(this.currency, i.add(this.raw, t.raw));\n    }, n.subtract = function (t) {\n      return Z(this.currency, t.currency) || a(!1), new e(this.currency, i.subtract(this.raw, t.raw));\n    }, n.toSignificant = function (e, n, r) {\n      return void 0 === e && (e = 6), void 0 === r && (r = exports.Rounding.ROUND_DOWN), t.prototype.toSignificant.call(this, e, n, r);\n    }, n.toFixed = function (e, n, r) {\n      return void 0 === e && (e = this.currency.decimals), void 0 === r && (r = exports.Rounding.ROUND_DOWN), e <= this.currency.decimals || a(!1), t.prototype.toFixed.call(this, e, n, r);\n    }, n.toExact = function (t) {\n      return void 0 === t && (t = {\n        groupSeparator: \"\"\n      }), st.DP = this.currency.decimals, new st(this.numerator.toString()).div(this.denominator.toString()).toFormat(t);\n    }, R(e, [{\n      key: \"raw\",\n      get: function () {\n        return this.numerator;\n      }\n    }]), e;\n  }(ut),\n  pt = function (t) {\n    function e(e, n) {\n      var r;\n      return (r = t.call(this, e, n) || this).token = e, r;\n    }\n    N(e, t);\n    var n = e.prototype;\n    return n.add = function (t) {\n      return this.token.equals(t.token) || a(!1), new e(this.token, i.add(this.raw, t.raw));\n    }, n.subtract = function (t) {\n      return this.token.equals(t.token) || a(!1), new e(this.token, i.subtract(this.raw, t.raw));\n    }, e;\n  }(ct),\n  dt = function (t) {\n    function e(e, n, r, o) {\n      var a;\n      return (a = t.call(this, o, r) || this).baseCurrency = e, a.quoteCurrency = n, a.scalar = new ut(i.exponentiate(I, i.BigInt(e.decimals)), i.exponentiate(I, i.BigInt(n.decimals))), a;\n    }\n    N(e, t), e.fromRoute = function (t) {\n      for (var n, r = [], o = H(t.pairs.entries()); !(n = o()).done;) {\n        var i = n.value,\n          a = i[1];\n        r.push(t.path[i[0]].equals(a.token0) ? new e(a.reserve0.currency, a.reserve1.currency, a.reserve0.raw, a.reserve1.raw) : new e(a.reserve1.currency, a.reserve0.currency, a.reserve1.raw, a.reserve0.raw));\n      }\n      return r.slice(1).reduce(function (t, e) {\n        return t.multiply(e);\n      }, r[0]);\n    };\n    var n = e.prototype;\n    return n.invert = function () {\n      return new e(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n    }, n.multiply = function (n) {\n      Z(this.quoteCurrency, n.baseCurrency) || a(!1);\n      var r = t.prototype.multiply.call(this, n);\n      return new e(this.baseCurrency, n.quoteCurrency, r.denominator, r.numerator);\n    }, n.quote = function (e) {\n      return Z(e.currency, this.baseCurrency) || a(!1), this.quoteCurrency instanceof z ? new pt(this.quoteCurrency, t.prototype.multiply.call(this, e.raw).quotient) : ct.ether(t.prototype.multiply.call(this, e.raw).quotient);\n    }, n.toSignificant = function (t, e, n) {\n      return void 0 === t && (t = 6), this.adjusted.toSignificant(t, e, n);\n    }, n.toFixed = function (t, e, n) {\n      return void 0 === t && (t = 4), this.adjusted.toFixed(t, e, n);\n    }, R(e, [{\n      key: \"raw\",\n      get: function () {\n        return new ut(this.numerator, this.denominator);\n      }\n    }, {\n      key: \"adjusted\",\n      get: function () {\n        return t.prototype.multiply.call(this, this.scalar);\n      }\n    }]), e;\n  }(ut),\n  ft = {},\n  ht = function () {\n    function t(e, n) {\n      var r = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n      this.liquidityToken = new z(r[0].token.chainId, t.getAddress(r[0].token, r[1].token), 18, \"UNI-V2\", \"Uniswap V2\"), this.tokenAmounts = r;\n    }\n    t.getAddress = function (t, e) {\n      var n,\n        r,\n        o,\n        i,\n        a,\n        s = t.sortsBefore(e) ? [t, e] : [e, t];\n      return void 0 === (null === (n = ft) || void 0 === n || null === (r = n[s[0].address]) || void 0 === r ? void 0 : r[s[1].address]) && (ft = P({}, ft, ((a = {})[s[0].address] = P({}, null === (o = ft) || void 0 === o ? void 0 : o[s[0].address], ((i = {})[s[1].address] = u.getCreate2Address(\"0xe9B1b1d6aa91c099a31c4520f746ca503A0848C6\", d.keccak256([\"bytes\"], [d.pack([\"address\", \"address\"], [s[0].address, s[1].address])]), y), i)), a))), ft[s[0].address][s[1].address];\n    };\n    var e = t.prototype;\n    return e.involvesToken = function (t) {\n      return t.equals(this.token0) || t.equals(this.token1);\n    }, e.priceOf = function (t) {\n      return this.involvesToken(t) || a(!1), t.equals(this.token0) ? this.token0Price : this.token1Price;\n    }, e.reserveOf = function (t) {\n      return this.involvesToken(t) || a(!1), t.equals(this.token0) ? this.reserve0 : this.reserve1;\n    }, e.getOutputAmount = function (e) {\n      if (this.involvesToken(e.token) || a(!1), i.equal(this.reserve0.raw, T) || i.equal(this.reserve1.raw, T)) throw new M();\n      var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        o = i.multiply(e.raw, O),\n        u = i.multiply(o, r.raw),\n        s = i.add(i.multiply(n.raw, b), o),\n        c = new pt(e.token.equals(this.token0) ? this.token1 : this.token0, i.divide(u, s));\n      if (i.equal(c.raw, T)) throw new L();\n      return [c, new t(n.add(e), r.subtract(c))];\n    }, e.getInputAmount = function (e) {\n      if (this.involvesToken(e.token) || a(!1), i.equal(this.reserve0.raw, T) || i.equal(this.reserve1.raw, T) || i.greaterThanOrEqual(e.raw, this.reserveOf(e.token).raw)) throw new M();\n      var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        o = i.multiply(i.multiply(r.raw, e.raw), b),\n        u = i.multiply(i.subtract(n.raw, e.raw), O),\n        s = new pt(e.token.equals(this.token0) ? this.token1 : this.token0, i.add(i.divide(o, u), g));\n      return [s, new t(r.add(s), n.subtract(e))];\n    }, e.getLiquidityMinted = function (t, e, n) {\n      t.token.equals(this.liquidityToken) || a(!1);\n      var r,\n        o = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n      if (o[0].token.equals(this.token0) && o[1].token.equals(this.token1) || a(!1), i.equal(t.raw, T)) r = i.subtract(V(i.multiply(o[0].raw, o[1].raw)), w);else {\n        var u = i.divide(i.multiply(o[0].raw, t.raw), this.reserve0.raw),\n          s = i.divide(i.multiply(o[1].raw, t.raw), this.reserve1.raw);\n        r = i.lessThanOrEqual(u, s) ? u : s;\n      }\n      if (!i.greaterThan(r, T)) throw new L();\n      return new pt(this.liquidityToken, r);\n    }, e.getLiquidityValue = function (t, e, n, r, o) {\n      var u;\n      if (void 0 === r && (r = !1), this.involvesToken(t) || a(!1), e.token.equals(this.liquidityToken) || a(!1), n.token.equals(this.liquidityToken) || a(!1), i.lessThanOrEqual(n.raw, e.raw) || a(!1), r) {\n        o || a(!1);\n        var s = K(o);\n        if (i.equal(s, T)) u = e;else {\n          var c = V(i.multiply(this.reserve0.raw, this.reserve1.raw)),\n            p = V(s);\n          if (i.greaterThan(c, p)) {\n            var d = i.multiply(e.raw, i.subtract(c, p)),\n              f = i.add(i.multiply(c, A), p),\n              h = i.divide(d, f);\n            u = e.add(new pt(this.liquidityToken, h));\n          } else u = e;\n        }\n      } else u = e;\n      return new pt(t, i.divide(i.multiply(n.raw, this.reserveOf(t).raw), u.raw));\n    }, R(t, [{\n      key: \"token0Price\",\n      get: function () {\n        return new dt(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n      }\n    }, {\n      key: \"token1Price\",\n      get: function () {\n        return new dt(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n      }\n    }, {\n      key: \"chainId\",\n      get: function () {\n        return this.token0.chainId;\n      }\n    }, {\n      key: \"token0\",\n      get: function () {\n        return this.tokenAmounts[0].token;\n      }\n    }, {\n      key: \"token1\",\n      get: function () {\n        return this.tokenAmounts[1].token;\n      }\n    }, {\n      key: \"reserve0\",\n      get: function () {\n        return this.tokenAmounts[0];\n      }\n    }, {\n      key: \"reserve1\",\n      get: function () {\n        return this.tokenAmounts[1];\n      }\n    }]), t;\n  }(),\n  lt = function () {\n    function t(t, e, n) {\n      t.length > 0 || a(!1), t.every(function (e) {\n        return e.chainId === t[0].chainId;\n      }) || a(!1), e instanceof z && t[0].involvesToken(e) || e === $ && t[0].involvesToken(nt[t[0].chainId]) || a(!1), void 0 === n || n instanceof z && t[t.length - 1].involvesToken(n) || n === $ && t[t.length - 1].involvesToken(nt[t[0].chainId]) || a(!1);\n      for (var r, o = [e instanceof z ? e : nt[t[0].chainId]], i = H(t.entries()); !(r = i()).done;) {\n        var u = r.value,\n          s = u[1],\n          c = o[u[0]];\n        c.equals(s.token0) || c.equals(s.token1) || a(!1);\n        var p = c.equals(s.token0) ? s.token1 : s.token0;\n        o.push(p);\n      }\n      this.pairs = t, this.path = o, this.midPrice = dt.fromRoute(this), this.input = e, this.output = null != n ? n : o[o.length - 1];\n    }\n    return R(t, [{\n      key: \"chainId\",\n      get: function () {\n        return this.pairs[0].chainId;\n      }\n    }]), t;\n  }(),\n  mt = new ut(E),\n  vt = function (t) {\n    function e() {\n      return t.apply(this, arguments) || this;\n    }\n    N(e, t);\n    var n = e.prototype;\n    return n.toSignificant = function (t, e, n) {\n      return void 0 === t && (t = 5), this.multiply(mt).toSignificant(t, e, n);\n    }, n.toFixed = function (t, e, n) {\n      return void 0 === t && (t = 2), this.multiply(mt).toFixed(t, e, n);\n    }, e;\n  }(ut);\nfunction yt(t, e) {\n  return Z(t.inputAmount.currency, e.inputAmount.currency) || a(!1), Z(t.outputAmount.currency, e.outputAmount.currency) || a(!1), t.outputAmount.equalTo(e.outputAmount) ? t.inputAmount.equalTo(e.inputAmount) ? 0 : t.inputAmount.lessThan(e.inputAmount) ? -1 : 1 : t.outputAmount.lessThan(e.outputAmount) ? 1 : -1;\n}\nfunction wt(t, e) {\n  var n = yt(t, e);\n  return 0 !== n ? n : t.priceImpact.lessThan(e.priceImpact) ? -1 : t.priceImpact.greaterThan(e.priceImpact) ? 1 : t.route.path.length - e.route.path.length;\n}\nfunction Tt(t, e) {\n  return t instanceof pt ? t : t.currency === $ ? new pt(nt[e], t.raw) : void a(!1);\n}\nfunction gt(t, e) {\n  return t instanceof z ? t : t === $ ? nt[e] : void a(!1);\n}\nvar kt = function () {\n  function t(t, e, n) {\n    var r,\n      o,\n      i,\n      u = new Array(t.path.length),\n      s = new Array(t.pairs.length);\n    if (n === exports.TradeType.EXACT_INPUT) {\n      Z(e.currency, t.input) || a(!1), u[0] = Tt(e, t.chainId);\n      for (var c = 0; c < t.path.length - 1; c++) {\n        var p = t.pairs[c].getOutputAmount(u[c]),\n          d = p[1];\n        u[c + 1] = p[0], s[c] = d;\n      }\n    } else {\n      Z(e.currency, t.output) || a(!1), u[u.length - 1] = Tt(e, t.chainId);\n      for (var f = t.path.length - 1; f > 0; f--) {\n        var h = t.pairs[f - 1].getInputAmount(u[f]),\n          l = h[1];\n        u[f - 1] = h[0], s[f - 1] = l;\n      }\n    }\n    this.route = t, this.tradeType = n, this.inputAmount = n === exports.TradeType.EXACT_INPUT ? e : t.input === $ ? ct.ether(u[0].raw) : u[0], this.outputAmount = n === exports.TradeType.EXACT_OUTPUT ? e : t.output === $ ? ct.ether(u[u.length - 1].raw) : u[u.length - 1], this.executionPrice = new dt(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw), this.nextMidPrice = dt.fromRoute(new lt(s, t.input)), this.priceImpact = (r = this.outputAmount, i = (o = t.midPrice.raw.multiply(this.inputAmount.raw)).subtract(r.raw).divide(o), new vt(i.numerator, i.denominator));\n  }\n  t.exactIn = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_INPUT);\n  }, t.exactOut = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_OUTPUT);\n  };\n  var e = t.prototype;\n  return e.minimumAmountOut = function (t) {\n    if (t.lessThan(T) && a(!1), this.tradeType === exports.TradeType.EXACT_OUTPUT) return this.outputAmount;\n    var e = new ut(g).add(t).invert().multiply(this.outputAmount.raw).quotient;\n    return this.outputAmount instanceof pt ? new pt(this.outputAmount.token, e) : ct.ether(e);\n  }, e.maximumAmountIn = function (t) {\n    if (t.lessThan(T) && a(!1), this.tradeType === exports.TradeType.EXACT_INPUT) return this.inputAmount;\n    var e = new ut(g).add(t).multiply(this.inputAmount.raw).quotient;\n    return this.inputAmount instanceof pt ? new pt(this.inputAmount.token, e) : ct.ether(e);\n  }, t.bestTradeExactIn = function (e, n, r, o, i, u, s) {\n    var c = void 0 === o ? {} : o,\n      p = c.maxNumResults,\n      d = void 0 === p ? 3 : p,\n      f = c.maxHops,\n      h = void 0 === f ? 3 : f;\n    void 0 === i && (i = []), void 0 === u && (u = n), void 0 === s && (s = []), e.length > 0 || a(!1), h > 0 || a(!1), u === n || i.length > 0 || a(!1);\n    var l = n instanceof pt ? n.token.chainId : r instanceof z ? r.chainId : void 0;\n    void 0 === l && a(!1);\n    for (var m = Tt(n, l), v = gt(r, l), y = 0; y < e.length; y++) {\n      var w = e[y];\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var g = void 0;\n        try {\n          g = w.getOutputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientInputAmountError) continue;\n          throw t;\n        }\n        if (g.token.equals(v)) G(s, new t(new lt([].concat(i, [w]), u.currency, r), u, exports.TradeType.EXACT_INPUT), d, wt);else if (h > 1 && e.length > 1) {\n          var k = e.slice(0, y).concat(e.slice(y + 1, e.length));\n          t.bestTradeExactIn(k, g, r, {\n            maxNumResults: d,\n            maxHops: h - 1\n          }, [].concat(i, [w]), u, s);\n        }\n      }\n    }\n    return s;\n  }, t.bestTradeExactOut = function (e, n, r, o, i, u, s) {\n    var c = void 0 === o ? {} : o,\n      p = c.maxNumResults,\n      d = void 0 === p ? 3 : p,\n      f = c.maxHops,\n      h = void 0 === f ? 3 : f;\n    void 0 === i && (i = []), void 0 === u && (u = r), void 0 === s && (s = []), e.length > 0 || a(!1), h > 0 || a(!1), u === r || i.length > 0 || a(!1);\n    var l = r instanceof pt ? r.token.chainId : n instanceof z ? n.chainId : void 0;\n    void 0 === l && a(!1);\n    for (var m = Tt(r, l), v = gt(n, l), y = 0; y < e.length; y++) {\n      var w = e[y];\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var g = void 0;\n        try {\n          g = w.getInputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientReservesError) continue;\n          throw t;\n        }\n        if (g.token.equals(v)) G(s, new t(new lt([w].concat(i), n, u.currency), u, exports.TradeType.EXACT_OUTPUT), d, wt);else if (h > 1 && e.length > 1) {\n          var k = e.slice(0, y).concat(e.slice(y + 1, e.length));\n          t.bestTradeExactOut(k, n, g, {\n            maxNumResults: d,\n            maxHops: h - 1\n          }, [w].concat(i), u, s);\n        }\n      }\n    }\n    return s;\n  }, t;\n}();\nfunction xt(t) {\n  return \"0x\" + t.raw.toString(16);\n}\nvar At,\n  It = function () {\n    function t() {}\n    return t.swapCallParameters = function (t, e) {\n      var n = t.inputAmount.currency === $,\n        r = t.outputAmount.currency === $;\n      n && r && a(!1), e.ttl > 0 || a(!1);\n      var o,\n        i,\n        u,\n        s = Y(e.recipient),\n        c = xt(t.maximumAmountIn(e.allowedSlippage)),\n        p = xt(t.minimumAmountOut(e.allowedSlippage)),\n        d = t.route.path.map(function (t) {\n          return t.address;\n        }),\n        f = \"0x\" + (Math.floor(new Date().getTime() / 1e3) + e.ttl).toString(16),\n        h = Boolean(e.feeOnTransfer);\n      switch (t.tradeType) {\n        case exports.TradeType.EXACT_INPUT:\n          n ? (o = h ? \"swapExactETHForTokensSupportingFeeOnTransferTokens\" : \"swapExactETHForTokens\", i = [p, d, s, f], u = c) : r ? (o = h ? \"swapExactTokensForETHSupportingFeeOnTransferTokens\" : \"swapExactTokensForETH\", i = [c, p, d, s, f], u = \"0x0\") : (o = h ? \"swapExactTokensForTokensSupportingFeeOnTransferTokens\" : \"swapExactTokensForTokens\", i = [c, p, d, s, f], u = \"0x0\");\n          break;\n        case exports.TradeType.EXACT_OUTPUT:\n          h && a(!1), n ? (o = \"swapETHForExactTokens\", i = [p, d, s, f], u = c) : r ? (o = \"swapTokensForExactETH\", i = [p, c, d, s, f], u = \"0x0\") : (o = \"swapTokensForExactTokens\", i = [p, c, d, s, f], u = \"0x0\");\n      }\n      return {\n        methodName: o,\n        args: i,\n        value: u\n      };\n    }, t;\n  }(),\n  Et = [{\n    constant: !0,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{\n      name: \"\",\n      type: \"uint8\"\n    }],\n    payable: !1,\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    constant: !0,\n    inputs: [{\n      name: \"\",\n      type: \"address\"\n    }],\n    name: \"balanceOf\",\n    outputs: [{\n      name: \"\",\n      type: \"uint256\"\n    }],\n    payable: !1,\n    stateMutability: \"view\",\n    type: \"function\"\n  }],\n  Ot = ((At = {})[exports.ChainId.MAINNET] = {\n    \"0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A\": 9\n  }, At),\n  bt = function () {\n    function t() {}\n    return t.fetchTokenData = function (t, e, n, r, o) {\n      try {\n        var i,\n          a,\n          u = function (n) {\n            return new z(t, e, n, r, o);\n          };\n        void 0 === n && (n = l.getDefaultProvider(h.getNetwork(t)));\n        var s = \"number\" == typeof (null === (i = Ot) || void 0 === i || null === (a = i[t]) || void 0 === a ? void 0 : a[e]);\n        return Promise.resolve(s ? u(Ot[t][e]) : Promise.resolve(new f.Contract(e, Et, n).decimals().then(function (n) {\n          var r, o, i;\n          return Ot = P({}, Ot, ((i = {})[t] = P({}, null === (r = Ot) || void 0 === r ? void 0 : r[t], ((o = {})[e] = n, o)), i)), n;\n        })).then(u));\n      } catch (t) {\n        return Promise.reject(t);\n      }\n    }, t.fetchPairData = function (t, e, n) {\n      try {\n        void 0 === n && (n = l.getDefaultProvider(h.getNetwork(t.chainId))), t.chainId !== e.chainId && a(!1);\n        var r = ht.getAddress(t, e);\n        return Promise.resolve(new f.Contract(r, m.abi, n).getReserves()).then(function (n) {\n          var r = n[0],\n            o = n[1],\n            i = t.sortsBefore(e) ? [r, o] : [o, r];\n          return new ht(new pt(t, i[0]), new pt(e, i[1]));\n        });\n      } catch (t) {\n        return Promise.reject(t);\n      }\n    }, t;\n  }();\nexports.JSBI = i, exports.Currency = Q, exports.CurrencyAmount = ct, exports.ETHER = $, exports.FACTORY_ADDRESS = \"0xe9B1b1d6aa91c099a31c4520f746ca503A0848C6\", exports.Fetcher = bt, exports.Fraction = ut, exports.INIT_CODE_HASH = y, exports.InsufficientInputAmountError = L, exports.InsufficientReservesError = M, exports.MINIMUM_LIQUIDITY = w, exports.Pair = ht, exports.Percent = vt, exports.Price = dt, exports.Route = lt, exports.Router = It, exports.Token = z, exports.TokenAmount = pt, exports.Trade = kt, exports.WETH = nt, exports.currencyEquals = Z, exports.inputOutputComparator = yt, exports.tradeComparator = wt;","map":{"version":3,"names":["n","r","o","i","t","require","a","u","s","c","p","d","f","h","l","m","exports","ChainId","MAINNET","ROPSTEN","RINKEBY","KOVAN","Sepolia","UniChain","Artio","BERA","STORYTestnet","TradeType","EXACT_INPUT","EXACT_OUTPUT","Rounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","v","y","w","BigInt","T","g","k","x","A","I","E","O","b","uint8","uint256","q","e","C","length","enumerable","configurable","writable","Object","defineProperty","key","R","prototype","P","assign","arguments","hasOwnProperty","call","apply","N","create","constructor","__proto__","U","setPrototypeOf","getPrototypeOf","_","S","Reflect","construct","sham","Proxy","Date","toString","F","push","Function","bind","B","Map","indexOf","TypeError","has","get","set","value","D","ReferenceError","j","Array","H","Symbol","iterator","isArray","slice","name","from","test","done","next","W","M","isInsufficientReservesError","Error","L","isInsufficientInputAmountError","X","greaterThanOrEqual","lessThanOrEqual","Y","getAddress","K","V","greaterThan","add","divide","lessThan","notEqual","G","splice","pop","J","Q","Currency","decimals","symbol","$","ETHER","z","chainId","address","equals","sortsBefore","toLowerCase","Z","tt","et","nt","GÖRLI","rt","ot","it","at","ut","numerator","denominator","invert","equal","multiply","subtract","equalTo","toSignificant","groupSeparator","Number","isInteger","precision","rounding","div","toSignificantDigits","toFormat","decimalPlaces","toFixed","DP","RM","remainder","st","ct","exponentiate","currency","ether","raw","toExact","pt","token","dt","baseCurrency","quoteCurrency","scalar","fromRoute","pairs","entries","path","token0","reserve0","reserve1","reduce","quote","quotient","adjusted","ft","ht","liquidityToken","tokenAmounts","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","getInputAmount","getLiquidityMinted","getLiquidityValue","lt","every","midPrice","input","output","mt","vt","yt","inputAmount","outputAmount","wt","priceImpact","route","Tt","gt","kt","tradeType","executionPrice","nextMidPrice","exactIn","exactOut","minimumAmountOut","maximumAmountIn","bestTradeExactIn","maxNumResults","maxHops","concat","bestTradeExactOut","xt","At","It","swapCallParameters","ttl","recipient","allowedSlippage","map","Math","floor","getTime","Boolean","feeOnTransfer","methodName","args","Et","constant","inputs","outputs","type","payable","stateMutability","Ot","bt","fetchTokenData","getDefaultProvider","getNetwork","Promise","resolve","Contract","then","reject","fetchPairData","abi","getReserves","JSBI","CurrencyAmount","FACTORY_ADDRESS","Fetcher","Fraction","INIT_CODE_HASH","InsufficientInputAmountError","InsufficientReservesError","MINIMUM_LIQUIDITY","Pair","Percent","Price","Route","Router","Token","TokenAmount","Trade","WETH","currencyEquals","inputOutputComparator","tradeComparator"],"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  Sepolia = 11155111,\n  UniChain = 130,\n  Artio = 80084,\n  BERA = 80094,\n  STORYTestnet = 1315\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xe9B1b1d6aa91c099a31c4520f746ca503A0848C6'\n\nexport const INIT_CODE_HASH = '0x7ebddd273052fc594ff63ce49f2e274d5b0331aa6557f92cab2ebcfc0e3f283e'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'IP', 'IP')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.Sepolia]: new Token(ChainId.Sepolia, '0xC190f8492DEe0e427015Bbe7B4219F497f69b117', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.UniChain]: new Token(ChainId.UniChain, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.Artio]: new Token(ChainId.Artio, '0x7507c1dc16935B82698e4C63f2746A2fCf994dF8', 18, 'WBERA', 'Wrapped BERA'),\n  [ChainId.BERA]: new Token(ChainId.BERA, '0x6969696969696969696969696969696969696969', 18, 'WBERA', 'Wrapped BERA'),\n  [ChainId.STORYTestnet]: new Token(ChainId.STORYTestnet, '0x1514000000000000000000000000000000000000', 18, 'WIP', 'Wrapped IP')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}