{"ast":null,"code":"import{CurrencyAmount,ETHER,JSBI}from'fomoswap-storytestnet';import{MIN_ETH}from'../constants';/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */export function maxAmountSpend(currencyAmount){if(!currencyAmount)return;if(currencyAmount.currency===ETHER){if(JSBI.greaterThan(currencyAmount.raw,MIN_ETH)){return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw,MIN_ETH));}else{return CurrencyAmount.ether(JSBI.BigInt(0));}}return currencyAmount;}","map":{"version":3,"names":["CurrencyAmount","ETHER","JSBI","MIN_ETH","maxAmountSpend","currencyAmount","currency","greaterThan","raw","ether","subtract","BigInt"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/utils/maxAmountSpend.ts"],"sourcesContent":["import { CurrencyAmount, ETHER, JSBI } from 'fomoswap-storytestnet'\nimport { MIN_ETH } from '../constants'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\n  if (!currencyAmount) return\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_ETH)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_ETH))\n    } else {\n      return CurrencyAmount.ether(JSBI.BigInt(0))\n    }\n  }\n  return currencyAmount\n}\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,KAAK,CAAEC,IAAI,KAAQ,uBAAuB,CACnE,OAASC,OAAO,KAAQ,cAAc,CAEtC;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,cAAcA,CAACC,cAA+B,CAA8B,CAC1F,GAAI,CAACA,cAAc,CAAE,OACrB,GAAIA,cAAc,CAACC,QAAQ,GAAKL,KAAK,CAAE,CACrC,GAAIC,IAAI,CAACK,WAAW,CAACF,cAAc,CAACG,GAAG,CAAEL,OAAO,CAAC,CAAE,CACjD,MAAO,CAAAH,cAAc,CAACS,KAAK,CAACP,IAAI,CAACQ,QAAQ,CAACL,cAAc,CAACG,GAAG,CAAEL,OAAO,CAAC,CAAC,CACzE,CAAC,IAAM,CACL,MAAO,CAAAH,cAAc,CAACS,KAAK,CAACP,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC,CAC7C,CACF,CACA,MAAO,CAAAN,cAAc,CACvB","ignoreList":[]},"metadata":{},"sourceType":"module"}