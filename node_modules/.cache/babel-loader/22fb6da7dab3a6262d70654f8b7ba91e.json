{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  return useCallback((response, {\n    summary,\n    approval\n  } = {}) => {\n    if (!account) return;\n    if (!chainId) return;\n    const {\n      hash\n    } = response;\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary\n    }));\n  }, [dispatch, chainId, account]);\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions() {\n  var _state$chainId;\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const state = useSelector(state => state.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\nexport function useIsTransactionPending(transactionHash) {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress, spender) {\n  const allTransactions = useAllTransactions();\n  return useMemo(() => typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    var _allTransactions$hash;\n    if ((_allTransactions$hash = allTransactions[hash]) === null || _allTransactions$hash === void 0 ? void 0 : _allTransactions$hash.receipt) {\n      return false;\n    } else {\n      var _allTransactions$hash2, _allTransactions$hash3, _allTransactions$hash4, _allTransactions$hash5;\n      return ((_allTransactions$hash2 = allTransactions[hash]) === null || _allTransactions$hash2 === void 0 ? void 0 : (_allTransactions$hash3 = _allTransactions$hash2.approval) === null || _allTransactions$hash3 === void 0 ? void 0 : _allTransactions$hash3.tokenAddress) === tokenAddress && ((_allTransactions$hash4 = allTransactions[hash]) === null || _allTransactions$hash4 === void 0 ? void 0 : (_allTransactions$hash5 = _allTransactions$hash4.approval) === null || _allTransactions$hash5 === void 0 ? void 0 : _allTransactions$hash5.spender) === spender;\n    }\n  }), [allTransactions, spender, tokenAddress]);\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","hash","Error","from","useAllTransactions","_state$chainId","state","transactions","useIsTransactionPending","transactionHash","receipt","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","_allTransactions$hash","_allTransactions$hash2","_allTransactions$hash3","_allTransactions$hash4","_allTransactions$hash5"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/transactions/hooks.tsx"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        if (allTransactions[hash]?.receipt) {\n          return false\n        } else {\n          return (\n            allTransactions[hash]?.approval?.tokenAddress === tokenAddress &&\n            allTransactions[hash]?.approval?.spender === spender\n          )\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,kBAAkB,QAAQ,aAAa;AAEhD,SAASC,cAAc,QAAQ,WAAW;AAG1C;AACA,OAAO,SAASC,mBAAmBA,CAAA,EAGzB;EACR,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGJ,kBAAkB,CAAC,CAAC;EACjD,MAAMK,QAAQ,GAAGP,WAAW,CAAc,CAAC;EAE3C,OAAOF,WAAW,CAChB,CACEU,QAA6B,EAC7B;IAAEC,OAAO;IAAEC;EAAqF,CAAC,GAAG,CAAC,CAAC,KACnG;IACH,IAAI,CAACJ,OAAO,EAAE;IACd,IAAI,CAACD,OAAO,EAAE;IAEd,MAAM;MAAEM;IAAK,CAAC,GAAGH,QAAQ;IACzB,IAAI,CAACG,IAAI,EAAE;MACT,MAAMC,KAAK,CAAC,4BAA4B,CAAC;IAC3C;IACAL,QAAQ,CAACJ,cAAc,CAAC;MAAEQ,IAAI;MAAEE,IAAI,EAAEP,OAAO;MAAED,OAAO;MAAEK,QAAQ;MAAED;IAAQ,CAAC,CAAC,CAAC;EAC/E,CAAC,EACD,CAACF,QAAQ,EAAEF,OAAO,EAAEC,OAAO,CAC7B,CAAC;AACH;;AAEA;AACA,OAAO,SAASQ,kBAAkBA,CAAA,EAA6C;EAAA,IAAAC,cAAA;EAC7E,MAAM;IAAEV;EAAQ,CAAC,GAAGH,kBAAkB,CAAC,CAAC;EAExC,MAAMc,KAAK,GAAGf,WAAW,CAAqCe,KAAK,IAAIA,KAAK,CAACC,YAAY,CAAC;EAE1F,OAAOZ,OAAO,IAAAU,cAAA,GAAGC,KAAK,CAACX,OAAO,CAAC,cAAAU,cAAA,cAAAA,cAAA,GAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAC5C;AAEA,OAAO,SAASG,uBAAuBA,CAACC,eAAwB,EAAW;EACzE,MAAMF,YAAY,GAAGH,kBAAkB,CAAC,CAAC;EAEzC,IAAI,CAACK,eAAe,IAAI,CAACF,YAAY,CAACE,eAAe,CAAC,EAAE,OAAO,KAAK;EAEpE,OAAO,CAACF,YAAY,CAACE,eAAe,CAAC,CAACC,OAAO;AAC/C;;AAEA;AACA,OAAO,SAASC,qBAAqBA,CAACC,YAAgC,EAAEC,OAA2B,EAAW;EAC5G,MAAMC,eAAe,GAAGV,kBAAkB,CAAC,CAAC;EAC5C,OAAOf,OAAO,CACZ,MACE,OAAOuB,YAAY,KAAK,QAAQ,IAChC,OAAOC,OAAO,KAAK,QAAQ,IAC3BE,MAAM,CAACC,IAAI,CAACF,eAAe,CAAC,CAACG,IAAI,CAAChB,IAAI,IAAI;IAAA,IAAAiB,qBAAA;IACxC,KAAAA,qBAAA,GAAIJ,eAAe,CAACb,IAAI,CAAC,cAAAiB,qBAAA,uBAArBA,qBAAA,CAAuBR,OAAO,EAAE;MAClC,OAAO,KAAK;IACd,CAAC,MAAM;MAAA,IAAAS,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACL,OACE,EAAAH,sBAAA,GAAAL,eAAe,CAACb,IAAI,CAAC,cAAAkB,sBAAA,wBAAAC,sBAAA,GAArBD,sBAAA,CAAuBnB,QAAQ,cAAAoB,sBAAA,uBAA/BA,sBAAA,CAAiCR,YAAY,MAAKA,YAAY,IAC9D,EAAAS,sBAAA,GAAAP,eAAe,CAACb,IAAI,CAAC,cAAAoB,sBAAA,wBAAAC,sBAAA,GAArBD,sBAAA,CAAuBrB,QAAQ,cAAAsB,sBAAA,uBAA/BA,sBAAA,CAAiCT,OAAO,MAAKA,OAAO;IAExD;EACF,CAAC,CAAC,EACJ,CAACC,eAAe,EAAED,OAAO,EAAED,YAAY,CACzC,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}