{"ast":null,"code":"import{currencyEquals,ETHER,WETH}from'fomoswap-bera1';import{useMemo}from'react';import{tryParseAmount}from'../state/swap/hooks';import{useTransactionAdder}from'../state/transactions/hooks';import{useCurrencyBalance}from'../state/wallet/hooks';import{useActiveWeb3React}from'./index';import{useWETHContract}from'./useContract';export let WrapType;(function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";})(WrapType||(WrapType={}));const NOT_APPLICABLE={wrapType:WrapType.NOT_APPLICABLE};/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */export default function useWrapCallback(inputCurrency,outputCurrency,typedValue){const{chainId,account}=useActiveWeb3React();const wethContract=useWETHContract();const balance=useCurrencyBalance(account!==null&&account!==void 0?account:undefined,inputCurrency);// we can always parse the amount typed as the input currency, since wrapping is 1:1\nconst inputAmount=useMemo(()=>tryParseAmount(typedValue,inputCurrency),[inputCurrency,typedValue]);const addTransaction=useTransactionAdder();return useMemo(()=>{if(!wethContract||!chainId||!inputCurrency||!outputCurrency)return NOT_APPLICABLE;const sufficientBalance=inputAmount&&balance&&!balance.lessThan(inputAmount);if(inputCurrency===ETHER&&currencyEquals(WETH[chainId],outputCurrency)){return{wrapType:WrapType.WRAP,execute:sufficientBalance&&inputAmount?async()=>{try{const txReceipt=await wethContract.deposit({value:\"0x\".concat(inputAmount.raw.toString(16))});addTransaction(txReceipt,{summary:\"Wrap \".concat(inputAmount.toSignificant(6),\" ETH to WETH\")});}catch(error){console.error('Could not deposit',error);}}:undefined,inputError:sufficientBalance?undefined:'Insufficient ETH balance'};}else if(currencyEquals(WETH[chainId],inputCurrency)&&outputCurrency===ETHER){return{wrapType:WrapType.UNWRAP,execute:sufficientBalance&&inputAmount?async()=>{try{const txReceipt=await wethContract.withdraw(\"0x\".concat(inputAmount.raw.toString(16)));addTransaction(txReceipt,{summary:\"Unwrap \".concat(inputAmount.toSignificant(6),\" WETH to ETH\")});}catch(error){console.error('Could not withdraw',error);}}:undefined,inputError:sufficientBalance?undefined:'Insufficient WETH balance'};}else{return NOT_APPLICABLE;}},[wethContract,chainId,inputCurrency,outputCurrency,inputAmount,balance,addTransaction]);}","map":{"version":3,"names":["currencyEquals","ETHER","WETH","useMemo","tryParseAmount","useTransactionAdder","useCurrencyBalance","useActiveWeb3React","useWETHContract","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","wethContract","balance","undefined","inputAmount","addTransaction","sufficientBalance","lessThan","WRAP","execute","txReceipt","deposit","value","concat","raw","toString","summary","toSignificant","error","console","inputError","UNWRAP","withdraw"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/hooks/useWrapCallback.ts"],"sourcesContent":["import { Currency, currencyEquals, ETHER, WETH } from 'fomoswap-bera1'\nimport { useMemo } from 'react'\nimport { tryParseAmount } from '../state/swap/hooks'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useActiveWeb3React } from './index'\nimport { useWETHContract } from './useContract'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { chainId, account } = useActiveWeb3React()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.raw.toString(16)}` })\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} ETH to WETH` })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient ETH balance'\n      }\n    } else if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.raw.toString(16)}`)\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WETH to ETH` })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient WETH balance'\n      }\n    } else {\n      return NOT_APPLICABLE\n    }\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}