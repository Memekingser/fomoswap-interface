{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport uriToHttp from '../../utils/uriToHttp';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n\n/**\n * Contains the logic for resolving a URL to a valid token list\n * @param listUrl list url\n */\nasync function getTokenList(listUrl) {\n  const urls = uriToHttp(listUrl);\n  for (const url of urls) {\n    let response;\n    try {\n      response = await fetch(url);\n      if (!response.ok) continue;\n    } catch (error) {\n      console.error(`failed to fetch list ${listUrl} at uri ${url}`);\n      continue;\n    }\n    const json = await response.json();\n    if (!tokenListValidator(json)) {\n      var _tokenListValidator$e, _tokenListValidator$e2;\n      throw new Error((_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n        var _error$message;\n        const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'Token list failed validation');\n    }\n    return json;\n  }\n  throw new Error('Unrecognized list URL protocol.');\n}\nconst fetchCache = {};\nexport const fetchTokenList = createAsyncThunk('lists/fetchTokenList', url => {\n  var _fetchCache$url;\n  return (\n    // this makes it so we only ever fetch a list a single time concurrently\n    fetchCache[url] = (_fetchCache$url = fetchCache[url]) !== null && _fetchCache$url !== void 0 ? _fetchCache$url : getTokenList(url).catch(error => {\n      delete fetchCache[url];\n      throw error;\n    })\n  );\n});\nexport const acceptListUpdate = createAction('lists/acceptListUpdate');\nexport const addList = createAction('lists/addList');\nexport const rejectVersionUpdate = createAction('lists/rejectVersionUpdate');","map":{"version":3,"names":["createAction","createAsyncThunk","schema","Ajv","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","urls","url","response","fetch","ok","error","console","json","_tokenListValidator$e","_tokenListValidator$e2","Error","errors","reduce","memo","_error$message","add","dataPath","message","length","fetchCache","fetchTokenList","_fetchCache$url","catch","acceptListUpdate","addList","rejectVersionUpdate"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/lists/actions.ts"],"sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit'\nimport { TokenList, Version } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport uriToHttp from '../../utils/uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a URL to a valid token list\n * @param listUrl list url\n */\nasync function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls = uriToHttp(listUrl)\n  for (const url of urls) {\n    let response\n    try {\n      response = await fetch(url)\n      if (!response.ok) continue\n    } catch (error) {\n      console.error(`failed to fetch list ${listUrl} at uri ${url}`)\n      continue\n    }\n\n    const json = await response.json()\n    if (!tokenListValidator(json)) {\n      throw new Error(\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.dataPath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'Token list failed validation'\n      )\n    }\n    return json\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n\nconst fetchCache: { [url: string]: Promise<TokenList> } = {}\nexport const fetchTokenList = createAsyncThunk<TokenList, string>(\n  'lists/fetchTokenList',\n  (url: string) =>\n    // this makes it so we only ever fetch a list a single time concurrently\n    (fetchCache[url] =\n      fetchCache[url] ??\n      getTokenList(url).catch(error => {\n        delete fetchCache[url]\n        throw error\n      }))\n)\n\nexport const acceptListUpdate = createAction<string>('lists/acceptListUpdate')\nexport const addList = createAction<string>('lists/addList')\nexport const rejectVersionUpdate = createAction<Version>('lists/rejectVersionUpdate')\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEjE,OAAOC,MAAM,MAAM,gDAAgD;AACnE,OAAOC,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,uBAAuB;AAE7C,MAAMC,kBAAkB,GAAG,IAAIF,GAAG,CAAC;EAAEG,SAAS,EAAE;AAAK,CAAC,CAAC,CAACC,OAAO,CAACL,MAAM,CAAC;;AAEvE;AACA;AACA;AACA;AACA,eAAeM,YAAYA,CAACC,OAAe,EAAsB;EAC/D,MAAMC,IAAI,GAAGN,SAAS,CAACK,OAAO,CAAC;EAC/B,KAAK,MAAME,GAAG,IAAID,IAAI,EAAE;IACtB,IAAIE,QAAQ;IACZ,IAAI;MACFA,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAC3B,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwBN,OAAO,WAAWE,GAAG,EAAE,CAAC;MAC9D;IACF;IAEA,MAAMM,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,IAAI,CAACZ,kBAAkB,CAACY,IAAI,CAAC,EAAE;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MAC7B,MAAM,IAAIC,KAAK,EAAAF,qBAAA,IAAAC,sBAAA,GACbd,kBAAkB,CAACgB,MAAM,cAAAF,sBAAA,uBAAzBA,sBAAA,CAA2BG,MAAM,CAAS,CAACC,IAAI,EAAER,KAAK,KAAK;QAAA,IAAAS,cAAA;QACzD,MAAMC,GAAG,GAAG,GAAGV,KAAK,CAACW,QAAQ,KAAAF,cAAA,GAAIT,KAAK,CAACY,OAAO,cAAAH,cAAA,cAAAA,cAAA,GAAI,EAAE,EAAE;QACtD,OAAOD,IAAI,CAACK,MAAM,GAAG,CAAC,GAAG,GAAGL,IAAI,KAAKE,GAAG,EAAE,GAAG,GAAGA,GAAG,EAAE;MACvD,CAAC,EAAE,EAAE,CAAC,cAAAP,qBAAA,cAAAA,qBAAA,GAAI,8BACZ,CAAC;IACH;IACA,OAAOD,IAAI;EACb;EACA,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;AACpD;AAEA,MAAMS,UAAiD,GAAG,CAAC,CAAC;AAC5D,OAAO,MAAMC,cAAc,GAAG7B,gBAAgB,CAC5C,sBAAsB,EACrBU,GAAW;EAAA,IAAAoB,eAAA;EAAA;IACV;IACCF,UAAU,CAAClB,GAAG,CAAC,IAAAoB,eAAA,GACdF,UAAU,CAAClB,GAAG,CAAC,cAAAoB,eAAA,cAAAA,eAAA,GACfvB,YAAY,CAACG,GAAG,CAAC,CAACqB,KAAK,CAACjB,KAAK,IAAI;MAC/B,OAAOc,UAAU,CAAClB,GAAG,CAAC;MACtB,MAAMI,KAAK;IACb,CAAC;EAAC;AAAA,CACR,CAAC;AAED,OAAO,MAAMkB,gBAAgB,GAAGjC,YAAY,CAAS,wBAAwB,CAAC;AAC9E,OAAO,MAAMkC,OAAO,GAAGlC,YAAY,CAAS,eAAe,CAAC;AAC5D,OAAO,MAAMmC,mBAAmB,GAAGnC,YAAY,CAAU,2BAA2B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}