{"ast":null,"code":"import { WETH } from 'fomoswap-artio';\nimport { useMemo } from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAllTokenBalances } from '../../state/wallet/hooks';\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA, balanceB) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1;\n  } else if (balanceA && balanceA.greaterThan('0')) {\n    return -1;\n  } else if (balanceB && balanceB.greaterThan('0')) {\n    return 1;\n  }\n  return 0;\n}\nfunction getTokenComparator(weth, balances) {\n  return function sortTokens(tokenA, tokenB) {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort BERA first\n    if (weth) {\n      if (tokenA.equals(weth)) return -1;\n      if (tokenB.equals(weth)) return 1;\n    }\n\n    // sort by balances\n    const balanceA = balances[tokenA.address];\n    const balanceB = balances[tokenB.address];\n    const balanceComp = balanceComparator(balanceA, balanceB);\n    if (balanceComp !== 0) return balanceComp;\n\n    // sort by symbol\n    return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1;\n  };\n}\nexport function useTokenComparator(inverted) {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const weth = WETH[chainId];\n  const balances = useAllTokenBalances();\n  const comparator = useMemo(() => getTokenComparator(weth, balances !== null && balances !== void 0 ? balances : {}), [balances, weth]);\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA, tokenB) => comparator(tokenA, tokenB) * -1;\n    } else {\n      return comparator;\n    }\n  }, [inverted, comparator]);\n}","map":{"version":3,"names":["WETH","useMemo","useActiveWeb3React","useAllTokenBalances","balanceComparator","balanceA","balanceB","greaterThan","equalTo","getTokenComparator","weth","balances","sortTokens","tokenA","tokenB","equals","address","balanceComp","symbol","toLowerCase","useTokenComparator","inverted","chainId","comparator"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/components/SearchModal/sorting.ts"],"sourcesContent":["import { Token, TokenAmount, WETH } from 'fomoswap-artio'\nimport { useMemo } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\n  } else if (balanceA && balanceA.greaterThan('0')) {\n    return -1\n  } else if (balanceB && balanceB.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\nfunction getTokenComparator(\n  weth: Token | undefined,\n  balances: { [tokenAddress: string]: TokenAmount }\n): (tokenA: Token, tokenB: Token) => number {\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort BERA first\n    if (weth) {\n      if (tokenA.equals(weth)) return -1\n      if (tokenB.equals(weth)) return 1\n    }\n\n    // sort by balances\n    const balanceA = balances[tokenA.address]\n    const balanceB = balances[tokenB.address]\n\n    const balanceComp = balanceComparator(balanceA, balanceB)\n    if (balanceComp !== 0) return balanceComp\n\n    // sort by symbol\n    return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\n  }\n}\n\nexport function useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\n  const { chainId } = useActiveWeb3React()\n  const weth = WETH[chainId]\n  const balances = useAllTokenBalances()\n  const comparator = useMemo(() => getTokenComparator(weth, balances ?? {}), [balances, weth])\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\n    } else {\n      return comparator\n    }\n  }, [inverted, comparator])\n}\n"],"mappings":"AAAA,SAA6BA,IAAI,QAAQ,gBAAgB;AACzD,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,mBAAmB,QAAQ,0BAA0B;;AAE9D;AACA,SAASC,iBAAiBA,CAACC,QAAsB,EAAEC,QAAsB,EAAE;EACzE,IAAID,QAAQ,IAAIC,QAAQ,EAAE;IACxB,OAAOD,QAAQ,CAACE,WAAW,CAACD,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAGD,QAAQ,CAACG,OAAO,CAACF,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;EACjF,CAAC,MAAM,IAAID,QAAQ,IAAIA,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC,EAAE;IAChD,OAAO,CAAC,CAAC;EACX,CAAC,MAAM,IAAID,QAAQ,IAAIA,QAAQ,CAACC,WAAW,CAAC,GAAG,CAAC,EAAE;IAChD,OAAO,CAAC;EACV;EACA,OAAO,CAAC;AACV;AAEA,SAASE,kBAAkBA,CACzBC,IAAuB,EACvBC,QAAiD,EACP;EAC1C,OAAO,SAASC,UAAUA,CAACC,MAAa,EAAEC,MAAa,EAAU;IAC/D;IACA;;IAEA;IACA,IAAIJ,IAAI,EAAE;MACR,IAAIG,MAAM,CAACE,MAAM,CAACL,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;MAClC,IAAII,MAAM,CAACC,MAAM,CAACL,IAAI,CAAC,EAAE,OAAO,CAAC;IACnC;;IAEA;IACA,MAAML,QAAQ,GAAGM,QAAQ,CAACE,MAAM,CAACG,OAAO,CAAC;IACzC,MAAMV,QAAQ,GAAGK,QAAQ,CAACG,MAAM,CAACE,OAAO,CAAC;IAEzC,MAAMC,WAAW,GAAGb,iBAAiB,CAACC,QAAQ,EAAEC,QAAQ,CAAC;IACzD,IAAIW,WAAW,KAAK,CAAC,EAAE,OAAOA,WAAW;;IAEzC;IACA,OAAOJ,MAAM,CAACK,MAAM,CAACC,WAAW,CAAC,CAAC,GAAGL,MAAM,CAACI,MAAM,CAACC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC3E,CAAC;AACH;AAEA,OAAO,SAASC,kBAAkBA,CAACC,QAAiB,EAA4C;EAC9F,MAAM;IAAEC;EAAQ,CAAC,GAAGpB,kBAAkB,CAAC,CAAC;EACxC,MAAMQ,IAAI,GAAGV,IAAI,CAACsB,OAAO,CAAC;EAC1B,MAAMX,QAAQ,GAAGR,mBAAmB,CAAC,CAAC;EACtC,MAAMoB,UAAU,GAAGtB,OAAO,CAAC,MAAMQ,kBAAkB,CAACC,IAAI,EAAEC,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,CAAC,CAAC,CAAC,EAAE,CAACA,QAAQ,EAAED,IAAI,CAAC,CAAC;EAC5F,OAAOT,OAAO,CAAC,MAAM;IACnB,IAAIoB,QAAQ,EAAE;MACZ,OAAO,CAACR,MAAa,EAAEC,MAAa,KAAKS,UAAU,CAACV,MAAM,EAAEC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC1E,CAAC,MAAM;MACL,OAAOS,UAAU;IACnB;EACF,CAAC,EAAE,CAACF,QAAQ,EAAEE,UAAU,CAAC,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module"}