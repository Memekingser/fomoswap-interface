{"ast":null,"code":"import { MaxUint256 } from '@ethersproject/constants';\nimport { ETHER, Token, TradeType } from 'fomoswap-bera1';\nimport { getTradeVersion } from '../data/V1';\nimport { Version } from '../hooks/useToggledVersion';\nfunction toHex(currencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`;\n}\nfunction deadlineFromNow(ttl) {\n  return `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n}\n\n/**\n * Get the arguments to make for a swap\n * @param trade trade to get v1 arguments for swapping\n * @param options options for swapping\n */\nexport default function v1SwapArguments(trade, options) {\n  if (getTradeVersion(trade) !== Version.v1) {\n    throw new Error('invalid trade version');\n  }\n  if (trade.route.pairs.length > 2) {\n    throw new Error('too many pairs');\n  }\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT;\n  const inputETH = trade.inputAmount.currency === ETHER;\n  const outputETH = trade.outputAmount.currency === ETHER;\n  if (inputETH && outputETH) throw new Error('ETHER to ETHER');\n  const minimumAmountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n  const maximumAmountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n  const deadline = deadlineFromNow(options.ttl);\n  if (isExactIn) {\n    if (inputETH) {\n      return {\n        methodName: 'ethToTokenTransferInput',\n        args: [minimumAmountOut, deadline, options.recipient],\n        value: maximumAmountIn\n      };\n    } else if (outputETH) {\n      return {\n        methodName: 'tokenToEthTransferInput',\n        args: [maximumAmountIn, minimumAmountOut, deadline, options.recipient],\n        value: '0x0'\n      };\n    } else {\n      const outputToken = trade.outputAmount.currency;\n      // should never happen, needed for type check\n      if (!(outputToken instanceof Token)) {\n        throw new Error('token to token');\n      }\n      return {\n        methodName: 'tokenToTokenTransferInput',\n        args: [maximumAmountIn, minimumAmountOut, '0x1', deadline, options.recipient, outputToken.address],\n        value: '0x0'\n      };\n    }\n  } else {\n    if (inputETH) {\n      return {\n        methodName: 'ethToTokenTransferOutput',\n        args: [minimumAmountOut, deadline, options.recipient],\n        value: maximumAmountIn\n      };\n    } else if (outputETH) {\n      return {\n        methodName: 'tokenToEthTransferOutput',\n        args: [minimumAmountOut, maximumAmountIn, deadline, options.recipient],\n        value: '0x0'\n      };\n    } else {\n      const output = trade.outputAmount.currency;\n      if (!(output instanceof Token)) {\n        throw new Error('invalid output amount currency');\n      }\n      return {\n        methodName: 'tokenToTokenTransferOutput',\n        args: [minimumAmountOut, maximumAmountIn, MaxUint256.toHexString(), deadline, options.recipient, output.address],\n        value: '0x0'\n      };\n    }\n  }\n}","map":{"version":3,"names":["MaxUint256","ETHER","Token","TradeType","getTradeVersion","Version","toHex","currencyAmount","raw","toString","deadlineFromNow","ttl","Math","floor","Date","getTime","v1SwapArguments","trade","options","v1","Error","route","pairs","length","isExactIn","tradeType","EXACT_INPUT","inputETH","inputAmount","currency","outputETH","outputAmount","minimumAmountOut","allowedSlippage","maximumAmountIn","deadline","methodName","args","recipient","value","outputToken","address","output","toHexString"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/utils/v1SwapArguments.ts"],"sourcesContent":["import { MaxUint256 } from '@ethersproject/constants'\nimport { CurrencyAmount, ETHER, SwapParameters, Token, Trade, TradeOptions, TradeType } from 'fomoswap-bera1'\nimport { getTradeVersion } from '../data/V1'\nimport { Version } from '../hooks/useToggledVersion'\n\nfunction toHex(currencyAmount: CurrencyAmount): string {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nfunction deadlineFromNow(ttl: number): string {\n  return `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`\n}\n\n/**\n * Get the arguments to make for a swap\n * @param trade trade to get v1 arguments for swapping\n * @param options options for swapping\n */\nexport default function v1SwapArguments(trade: Trade, options: Omit<TradeOptions, 'feeOnTransfer'>): SwapParameters {\n  if (getTradeVersion(trade) !== Version.v1) {\n    throw new Error('invalid trade version')\n  }\n  if (trade.route.pairs.length > 2) {\n    throw new Error('too many pairs')\n  }\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\n  const inputETH = trade.inputAmount.currency === ETHER\n  const outputETH = trade.outputAmount.currency === ETHER\n  if (inputETH && outputETH) throw new Error('ETHER to ETHER')\n  const minimumAmountOut = toHex(trade.minimumAmountOut(options.allowedSlippage))\n  const maximumAmountIn = toHex(trade.maximumAmountIn(options.allowedSlippage))\n  const deadline = deadlineFromNow(options.ttl)\n  if (isExactIn) {\n    if (inputETH) {\n      return {\n        methodName: 'ethToTokenTransferInput',\n        args: [minimumAmountOut, deadline, options.recipient],\n        value: maximumAmountIn\n      }\n    } else if (outputETH) {\n      return {\n        methodName: 'tokenToEthTransferInput',\n        args: [maximumAmountIn, minimumAmountOut, deadline, options.recipient],\n        value: '0x0'\n      }\n    } else {\n      const outputToken = trade.outputAmount.currency\n      // should never happen, needed for type check\n      if (!(outputToken instanceof Token)) {\n        throw new Error('token to token')\n      }\n      return {\n        methodName: 'tokenToTokenTransferInput',\n        args: [maximumAmountIn, minimumAmountOut, '0x1', deadline, options.recipient, outputToken.address],\n        value: '0x0'\n      }\n    }\n  } else {\n    if (inputETH) {\n      return {\n        methodName: 'ethToTokenTransferOutput',\n        args: [minimumAmountOut, deadline, options.recipient],\n        value: maximumAmountIn\n      }\n    } else if (outputETH) {\n      return {\n        methodName: 'tokenToEthTransferOutput',\n        args: [minimumAmountOut, maximumAmountIn, deadline, options.recipient],\n        value: '0x0'\n      }\n    } else {\n      const output = trade.outputAmount.currency\n      if (!(output instanceof Token)) {\n        throw new Error('invalid output amount currency')\n      }\n\n      return {\n        methodName: 'tokenToTokenTransferOutput',\n        args: [\n          minimumAmountOut,\n          maximumAmountIn,\n          MaxUint256.toHexString(),\n          deadline,\n          options.recipient,\n          output.address\n        ],\n        value: '0x0'\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}