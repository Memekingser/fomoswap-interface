{"ast":null,"code":"import { INITIAL_ALLOWED_SLIPPAGE, DEFAULT_DEADLINE_FROM_NOW } from '../../constants';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addSerializedPair, addSerializedToken, dismissTokenWarning, removeSerializedPair, removeSerializedToken, updateMatchesDarkMode, updateUserDarkMode, updateVersion, updateUserExpertMode, updateUserSlippageTolerance, updateUserDeadline } from './actions';\nconst currentTimestamp = () => new Date().getTime();\nfunction pairKey(token0Address, token1Address) {\n  return `${token0Address};${token1Address}`;\n}\nexport const initialState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp()\n};\nexport default createReducer(initialState, builder => builder.addCase(updateVersion, state => {\n  // slippage isnt being tracked in local storage, reset to default\n  if (typeof state.userSlippageTolerance !== 'number') {\n    state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE;\n  }\n\n  // deadline isnt being tracked in local storage, reset to default\n  if (typeof state.userDeadline !== 'number') {\n    state.userDeadline = DEFAULT_DEADLINE_FROM_NOW;\n  }\n  state.lastUpdateVersionTimestamp = currentTimestamp();\n}).addCase(updateUserDarkMode, (state, action) => {\n  state.userDarkMode = action.payload.userDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateMatchesDarkMode, (state, action) => {\n  state.matchesDarkMode = action.payload.matchesDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserExpertMode, (state, action) => {\n  state.userExpertMode = action.payload.userExpertMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserSlippageTolerance, (state, action) => {\n  state.userSlippageTolerance = action.payload.userSlippageTolerance;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserDeadline, (state, action) => {\n  state.userDeadline = action.payload.userDeadline;\n  state.timestamp = currentTimestamp();\n}).addCase(addSerializedToken, (state, {\n  payload: {\n    serializedToken\n  }\n}) => {\n  state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};\n  state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedToken, (state, {\n  payload: {\n    address,\n    chainId\n  }\n}) => {\n  state.tokens[chainId] = state.tokens[chainId] || {};\n  delete state.tokens[chainId][address];\n  state.timestamp = currentTimestamp();\n}).addCase(dismissTokenWarning, (state, {\n  payload: {\n    chainId,\n    tokenAddress\n  }\n}) => {\n  var _state$dismissedToken, _state$dismissedToken2;\n  state.dismissedTokenWarnings = (_state$dismissedToken = state.dismissedTokenWarnings) !== null && _state$dismissedToken !== void 0 ? _state$dismissedToken : {};\n  state.dismissedTokenWarnings[chainId] = (_state$dismissedToken2 = state.dismissedTokenWarnings[chainId]) !== null && _state$dismissedToken2 !== void 0 ? _state$dismissedToken2 : {};\n  state.dismissedTokenWarnings[chainId][tokenAddress] = true;\n}).addCase(addSerializedPair, (state, {\n  payload: {\n    serializedPair\n  }\n}) => {\n  if (serializedPair.token0.chainId === serializedPair.token1.chainId && serializedPair.token0.address !== serializedPair.token1.address) {\n    const chainId = serializedPair.token0.chainId;\n    state.pairs[chainId] = state.pairs[chainId] || {};\n    state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;\n  }\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedPair, (state, {\n  payload: {\n    chainId,\n    tokenAAddress,\n    tokenBAddress\n  }\n}) => {\n  if (state.pairs[chainId]) {\n    // just delete both keys if either exists\n    delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\n    delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\n  }\n  state.timestamp = currentTimestamp();\n}));","map":{"version":3,"names":["INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","createReducer","addSerializedPair","addSerializedToken","dismissTokenWarning","removeSerializedPair","removeSerializedToken","updateMatchesDarkMode","updateUserDarkMode","updateVersion","updateUserExpertMode","updateUserSlippageTolerance","updateUserDeadline","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","initialState","userDarkMode","matchesDarkMode","userExpertMode","userSlippageTolerance","userDeadline","tokens","pairs","timestamp","builder","addCase","state","lastUpdateVersionTimestamp","action","payload","serializedToken","chainId","address","tokenAddress","_state$dismissedToken","_state$dismissedToken2","dismissedTokenWarnings","serializedPair","token0","token1","tokenAAddress","tokenBAddress"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/user/reducer.ts"],"sourcesContent":["import { INITIAL_ALLOWED_SLIPPAGE, DEFAULT_DEADLINE_FROM_NOW } from '../../constants'\nimport { createReducer } from '@reduxjs/toolkit'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  dismissTokenWarning,\n  removeSerializedPair,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  updateMatchesDarkMode,\n  updateUserDarkMode,\n  updateVersion,\n  updateUserExpertMode,\n  updateUserSlippageTolerance,\n  updateUserDeadline\n} from './actions'\n\nconst currentTimestamp = () => new Date().getTime()\n\nexport interface UserState {\n  // the timestamp of the last updateVersion action\n  lastUpdateVersionTimestamp?: number\n\n  userDarkMode: boolean | null // the user's choice for dark mode or light mode\n  matchesDarkMode: boolean // whether the dark mode media query matches\n\n  userExpertMode: boolean\n\n  // user defined slippage tolerance in bips, used in all txns\n  userSlippageTolerance: number\n\n  // deadline set by user in minutes, used in all txns\n  userDeadline: number\n\n  tokens: {\n    [chainId: number]: {\n      [address: string]: SerializedToken\n    }\n  }\n\n  // the token warnings that the user has dismissed\n  dismissedTokenWarnings?: {\n    [chainId: number]: {\n      [tokenAddress: string]: true\n    }\n  }\n\n  pairs: {\n    [chainId: number]: {\n      // keyed by token0Address:token1Address\n      [key: string]: SerializedPair\n    }\n  }\n\n  timestamp: number\n}\n\nfunction pairKey(token0Address: string, token1Address: string) {\n  return `${token0Address};${token1Address}`\n}\n\nexport const initialState: UserState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp()\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(updateVersion, state => {\n      // slippage isnt being tracked in local storage, reset to default\n      if (typeof state.userSlippageTolerance !== 'number') {\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      if (typeof state.userDeadline !== 'number') {\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\n      }\n\n      state.lastUpdateVersionTimestamp = currentTimestamp()\n    })\n    .addCase(updateUserDarkMode, (state, action) => {\n      state.userDarkMode = action.payload.userDarkMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateMatchesDarkMode, (state, action) => {\n      state.matchesDarkMode = action.payload.matchesDarkMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserExpertMode, (state, action) => {\n      state.userExpertMode = action.payload.userExpertMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSlippageTolerance, (state, action) => {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserDeadline, (state, action) => {\n      state.userDeadline = action.payload.userDeadline\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\n      state.tokens[chainId] = state.tokens[chainId] || {}\n      delete state.tokens[chainId][address]\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(dismissTokenWarning, (state, { payload: { chainId, tokenAddress } }) => {\n      state.dismissedTokenWarnings = state.dismissedTokenWarnings ?? {}\n      state.dismissedTokenWarnings[chainId] = state.dismissedTokenWarnings[chainId] ?? {}\n      state.dismissedTokenWarnings[chainId][tokenAddress] = true\n    })\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\n      if (\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\n        serializedPair.token0.address !== serializedPair.token1.address\n      ) {\n        const chainId = serializedPair.token0.chainId\n        state.pairs[chainId] = state.pairs[chainId] || {}\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\n      if (state.pairs[chainId]) {\n        // just delete both keys if either exists\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)]\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)]\n      }\n      state.timestamp = currentTimestamp()\n    })\n)\n"],"mappings":"AAAA,SAASA,wBAAwB,EAAEC,yBAAyB,QAAQ,iBAAiB;AACrF,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SACEC,iBAAiB,EACjBC,kBAAkB,EAClBC,mBAAmB,EACnBC,oBAAoB,EACpBC,qBAAqB,EAGrBC,qBAAqB,EACrBC,kBAAkB,EAClBC,aAAa,EACbC,oBAAoB,EACpBC,2BAA2B,EAC3BC,kBAAkB,QACb,WAAW;AAElB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AAwCnD,SAASC,OAAOA,CAACC,aAAqB,EAAEC,aAAqB,EAAE;EAC7D,OAAO,GAAGD,aAAa,IAAIC,aAAa,EAAE;AAC5C;AAEA,OAAO,MAAMC,YAAuB,GAAG;EACrCC,YAAY,EAAE,IAAI;EAClBC,eAAe,EAAE,KAAK;EACtBC,cAAc,EAAE,KAAK;EACrBC,qBAAqB,EAAExB,wBAAwB;EAC/CyB,YAAY,EAAExB,yBAAyB;EACvCyB,MAAM,EAAE,CAAC,CAAC;EACVC,KAAK,EAAE,CAAC,CAAC;EACTC,SAAS,EAAEd,gBAAgB,CAAC;AAC9B,CAAC;AAED,eAAeZ,aAAa,CAACkB,YAAY,EAAES,OAAO,IAChDA,OAAO,CACJC,OAAO,CAACpB,aAAa,EAAEqB,KAAK,IAAI;EAC/B;EACA,IAAI,OAAOA,KAAK,CAACP,qBAAqB,KAAK,QAAQ,EAAE;IACnDO,KAAK,CAACP,qBAAqB,GAAGxB,wBAAwB;EACxD;;EAEA;EACA,IAAI,OAAO+B,KAAK,CAACN,YAAY,KAAK,QAAQ,EAAE;IAC1CM,KAAK,CAACN,YAAY,GAAGxB,yBAAyB;EAChD;EAEA8B,KAAK,CAACC,0BAA0B,GAAGlB,gBAAgB,CAAC,CAAC;AACvD,CAAC,CAAC,CACDgB,OAAO,CAACrB,kBAAkB,EAAE,CAACsB,KAAK,EAAEE,MAAM,KAAK;EAC9CF,KAAK,CAACV,YAAY,GAAGY,MAAM,CAACC,OAAO,CAACb,YAAY;EAChDU,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAACtB,qBAAqB,EAAE,CAACuB,KAAK,EAAEE,MAAM,KAAK;EACjDF,KAAK,CAACT,eAAe,GAAGW,MAAM,CAACC,OAAO,CAACZ,eAAe;EACtDS,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAACnB,oBAAoB,EAAE,CAACoB,KAAK,EAAEE,MAAM,KAAK;EAChDF,KAAK,CAACR,cAAc,GAAGU,MAAM,CAACC,OAAO,CAACX,cAAc;EACpDQ,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAAClB,2BAA2B,EAAE,CAACmB,KAAK,EAAEE,MAAM,KAAK;EACvDF,KAAK,CAACP,qBAAqB,GAAGS,MAAM,CAACC,OAAO,CAACV,qBAAqB;EAClEO,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAACjB,kBAAkB,EAAE,CAACkB,KAAK,EAAEE,MAAM,KAAK;EAC9CF,KAAK,CAACN,YAAY,GAAGQ,MAAM,CAACC,OAAO,CAACT,YAAY;EAChDM,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAAC1B,kBAAkB,EAAE,CAAC2B,KAAK,EAAE;EAAEG,OAAO,EAAE;IAAEC;EAAgB;AAAE,CAAC,KAAK;EACxEJ,KAAK,CAACL,MAAM,CAACS,eAAe,CAACC,OAAO,CAAC,GAAGL,KAAK,CAACL,MAAM,CAACS,eAAe,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;EACnFL,KAAK,CAACL,MAAM,CAACS,eAAe,CAACC,OAAO,CAAC,CAACD,eAAe,CAACE,OAAO,CAAC,GAAGF,eAAe;EAChFJ,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAACvB,qBAAqB,EAAE,CAACwB,KAAK,EAAE;EAAEG,OAAO,EAAE;IAAEG,OAAO;IAAED;EAAQ;AAAE,CAAC,KAAK;EAC5EL,KAAK,CAACL,MAAM,CAACU,OAAO,CAAC,GAAGL,KAAK,CAACL,MAAM,CAACU,OAAO,CAAC,IAAI,CAAC,CAAC;EACnD,OAAOL,KAAK,CAACL,MAAM,CAACU,OAAO,CAAC,CAACC,OAAO,CAAC;EACrCN,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAACzB,mBAAmB,EAAE,CAAC0B,KAAK,EAAE;EAAEG,OAAO,EAAE;IAAEE,OAAO;IAAEE;EAAa;AAAE,CAAC,KAAK;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EAC/ET,KAAK,CAACU,sBAAsB,IAAAF,qBAAA,GAAGR,KAAK,CAACU,sBAAsB,cAAAF,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;EACjER,KAAK,CAACU,sBAAsB,CAACL,OAAO,CAAC,IAAAI,sBAAA,GAAGT,KAAK,CAACU,sBAAsB,CAACL,OAAO,CAAC,cAAAI,sBAAA,cAAAA,sBAAA,GAAI,CAAC,CAAC;EACnFT,KAAK,CAACU,sBAAsB,CAACL,OAAO,CAAC,CAACE,YAAY,CAAC,GAAG,IAAI;AAC5D,CAAC,CAAC,CACDR,OAAO,CAAC3B,iBAAiB,EAAE,CAAC4B,KAAK,EAAE;EAAEG,OAAO,EAAE;IAAEQ;EAAe;AAAE,CAAC,KAAK;EACtE,IACEA,cAAc,CAACC,MAAM,CAACP,OAAO,KAAKM,cAAc,CAACE,MAAM,CAACR,OAAO,IAC/DM,cAAc,CAACC,MAAM,CAACN,OAAO,KAAKK,cAAc,CAACE,MAAM,CAACP,OAAO,EAC/D;IACA,MAAMD,OAAO,GAAGM,cAAc,CAACC,MAAM,CAACP,OAAO;IAC7CL,KAAK,CAACJ,KAAK,CAACS,OAAO,CAAC,GAAGL,KAAK,CAACJ,KAAK,CAACS,OAAO,CAAC,IAAI,CAAC,CAAC;IACjDL,KAAK,CAACJ,KAAK,CAACS,OAAO,CAAC,CAACnB,OAAO,CAACyB,cAAc,CAACC,MAAM,CAACN,OAAO,EAAEK,cAAc,CAACE,MAAM,CAACP,OAAO,CAAC,CAAC,GAAGK,cAAc;EAC9G;EACAX,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC,CACDgB,OAAO,CAACxB,oBAAoB,EAAE,CAACyB,KAAK,EAAE;EAAEG,OAAO,EAAE;IAAEE,OAAO;IAAES,aAAa;IAAEC;EAAc;AAAE,CAAC,KAAK;EAChG,IAAIf,KAAK,CAACJ,KAAK,CAACS,OAAO,CAAC,EAAE;IACxB;IACA,OAAOL,KAAK,CAACJ,KAAK,CAACS,OAAO,CAAC,CAACnB,OAAO,CAAC4B,aAAa,EAAEC,aAAa,CAAC,CAAC;IAClE,OAAOf,KAAK,CAACJ,KAAK,CAACS,OAAO,CAAC,CAACnB,OAAO,CAAC6B,aAAa,EAAED,aAAa,CAAC,CAAC;EACpE;EACAd,KAAK,CAACH,SAAS,GAAGd,gBAAgB,CAAC,CAAC;AACtC,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}