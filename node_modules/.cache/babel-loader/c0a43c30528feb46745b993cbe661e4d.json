{"ast":null,"code":"import{CurrencyAmount,ETHER,JSBI,Token,TokenAmount}from'fomoswap-artio';import{useMemo}from'react';import ERC20_INTERFACE from'../../constants/abis/erc20';import{useAllTokens}from'../../hooks/Tokens';import{useActiveWeb3React}from'../../hooks';import{useMulticallContract}from'../../hooks/useContract';import{isAddress}from'../../utils';import{useSingleContractMultipleData,useMultipleContractSingleData}from'../multicall/hooks';/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */export function useETHBalances(uncheckedAddresses){const multicallContract=useMulticallContract();const addresses=useMemo(()=>uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(a=>a!==false).sort():[],[uncheckedAddresses]);const results=useSingleContractMultipleData(multicallContract,'getEthBalance',addresses.map(address=>[address]));return useMemo(()=>addresses.reduce((memo,address,i)=>{var _results$i,_results$i$result;const value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value)memo[address]=CurrencyAmount.ether(JSBI.BigInt(value.toString()));return memo;},{}),[addresses,results]);}/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */export function useTokenBalancesWithLoadingIndicator(address,tokens){const validatedTokens=useMemo(()=>{var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(t=>isAddress(t===null||t===void 0?void 0:t.address)!==false))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[tokens]);const validatedTokenAddresses=useMemo(()=>validatedTokens.map(vt=>vt.address),[validatedTokens]);const balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'balanceOf',[address]);const anyLoading=useMemo(()=>balances.some(callState=>callState.loading),[balances]);return[useMemo(()=>address&&validatedTokens.length>0?validatedTokens.reduce((memo,token,i)=>{var _balances$i,_balances$i$result;const value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];const amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address]=new TokenAmount(token,amount);}return memo;},{}):{},[address,validatedTokens,balances]),anyLoading];}export function useTokenBalances(address,tokens){return useTokenBalancesWithLoadingIndicator(address,tokens)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token){const tokenBalances=useTokenBalances(account,[token]);if(!token)return;return tokenBalances[token.address];}export function useCurrencyBalances(account,currencies){const tokens=useMemo(()=>{var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(currency=>currency instanceof Token))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);const tokenBalances=useTokenBalances(account,tokens);const containsETH=useMemo(()=>{var _currencies$some;return(_currencies$some=currencies===null||currencies===void 0?void 0:currencies.some(currency=>currency===ETHER))!==null&&_currencies$some!==void 0?_currencies$some:false;},[currencies]);const ethBalance=useETHBalances(containsETH?[account]:[]);return useMemo(()=>{var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(currency=>{if(!account||!currency)return;if(currency instanceof Token)return tokenBalances[currency.address];if(currency===ETHER)return ethBalance[account];return;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,currencies,ethBalance,tokenBalances]);}export function useCurrencyBalance(account,currency){return useCurrencyBalances(account,[currency])[0];}// mimics useAllBalances\nexport function useAllTokenBalances(){const{account}=useActiveWeb3React();const allTokens=useAllTokens();const allTokensArray=useMemo(()=>Object.values(allTokens!==null&&allTokens!==void 0?allTokens:{}),[allTokens]);const balances=useTokenBalances(account!==null&&account!==void 0?account:undefined,allTokensArray);return balances!==null&&balances!==void 0?balances:{};}","map":{"version":3,"names":["CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useMemo","ERC20_INTERFACE","useAllTokens","useActiveWeb3React","useMulticallContract","isAddress","useSingleContractMultipleData","useMultipleContractSingleData","useETHBalances","uncheckedAddresses","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","_results$i","_results$i$result","value","result","ether","BigInt","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","_tokens$filter","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","_balances$i","_balances$i$result","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","_currencies$filter","currency","containsETH","_currencies$some","ethBalance","_currencies$map","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/wallet/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from 'fomoswap-artio'\nimport { useMemo } from 'react'\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHBalances(\n  uncheckedAddresses?: (string | undefined)[]\n): { [address: string]: CurrencyAmount | undefined } {\n  const multicallContract = useMulticallContract()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map(address => [address])\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, results]\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token.address] = new TokenAmount(token, amount)\n              }\n              return memo\n            }, {})\n          : {},\n      [address, validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: TokenAmount | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount | undefined)[] {\n  const tokens = useMemo(() => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [], [\n    currencies\n  ])\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some(currency => currency === ETHER) ?? false, [currencies])\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map(currency => {\n        if (!account || !currency) return\n        if (currency instanceof Token) return tokenBalances[currency.address]\n        if (currency === ETHER) return ethBalance[account]\n        return\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\n  return useCurrencyBalances(account, [currency])[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n"],"mappings":"AAAA,OAAmBA,cAAc,CAAEC,KAAK,CAAEC,IAAI,CAAEC,KAAK,CAAEC,WAAW,KAAQ,gBAAgB,CAC1F,OAASC,OAAO,KAAQ,OAAO,CAC/B,MAAO,CAAAC,eAAe,KAAM,4BAA4B,CACxD,OAASC,YAAY,KAAQ,oBAAoB,CACjD,OAASC,kBAAkB,KAAQ,aAAa,CAChD,OAASC,oBAAoB,KAAQ,yBAAyB,CAC9D,OAASC,SAAS,KAAQ,aAAa,CACvC,OAASC,6BAA6B,CAAEC,6BAA6B,KAAQ,oBAAoB,CAEjG;AACA;AACA,GACA,MAAO,SAAS,CAAAC,cAAcA,CAC5BC,kBAA2C,CACQ,CACnD,KAAM,CAAAC,iBAAiB,CAAGN,oBAAoB,CAAC,CAAC,CAEhD,KAAM,CAAAO,SAAmB,CAAGX,OAAO,CACjC,IACES,kBAAkB,CACdA,kBAAkB,CACfG,GAAG,CAACP,SAAS,CAAC,CACdQ,MAAM,CAAEC,CAAC,EAAkBA,CAAC,GAAK,KAAK,CAAC,CACvCC,IAAI,CAAC,CAAC,CACT,EAAE,CACR,CAACN,kBAAkB,CACrB,CAAC,CAED,KAAM,CAAAO,OAAO,CAAGV,6BAA6B,CAC3CI,iBAAiB,CACjB,eAAe,CACfC,SAAS,CAACC,GAAG,CAACK,OAAO,EAAI,CAACA,OAAO,CAAC,CACpC,CAAC,CAED,MAAO,CAAAjB,OAAO,CACZ,IACEW,SAAS,CAACO,MAAM,CAAwC,CAACC,IAAI,CAAEF,OAAO,CAAEG,CAAC,GAAK,KAAAC,UAAA,CAAAC,iBAAA,CAC5E,KAAM,CAAAC,KAAK,CAAGP,OAAO,SAAPA,OAAO,kBAAAK,UAAA,CAAPL,OAAO,CAAGI,CAAC,CAAC,UAAAC,UAAA,kBAAAC,iBAAA,CAAZD,UAAA,CAAcG,MAAM,UAAAF,iBAAA,iBAApBA,iBAAA,CAAuB,CAAC,CAAC,CACvC,GAAIC,KAAK,CAAEJ,IAAI,CAACF,OAAO,CAAC,CAAGtB,cAAc,CAAC8B,KAAK,CAAC5B,IAAI,CAAC6B,MAAM,CAACH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9E,MAAO,CAAAR,IAAI,CACb,CAAC,CAAE,CAAC,CAAC,CAAC,CACR,CAACR,SAAS,CAAEK,OAAO,CACrB,CAAC,CACH,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAY,oCAAoCA,CAClDX,OAAgB,CAChBY,MAA8B,CACkC,CAChE,KAAM,CAAAC,eAAwB,CAAG9B,OAAO,CACtC,SAAA+B,cAAA,QAAAA,cAAA,CAAMF,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEhB,MAAM,CAAEmB,CAAS,EAAiB3B,SAAS,CAAC2B,CAAC,SAADA,CAAC,iBAADA,CAAC,CAAEf,OAAO,CAAC,GAAK,KAAK,CAAC,UAAAc,cAAA,UAAAA,cAAA,CAAI,EAAE,GACtF,CAACF,MAAM,CACT,CAAC,CAED,KAAM,CAAAI,uBAAuB,CAAGjC,OAAO,CAAC,IAAM8B,eAAe,CAAClB,GAAG,CAACsB,EAAE,EAAIA,EAAE,CAACjB,OAAO,CAAC,CAAE,CAACa,eAAe,CAAC,CAAC,CAEvG,KAAM,CAAAK,QAAQ,CAAG5B,6BAA6B,CAAC0B,uBAAuB,CAAEhC,eAAe,CAAE,WAAW,CAAE,CAACgB,OAAO,CAAC,CAAC,CAEhH,KAAM,CAAAmB,UAAmB,CAAGpC,OAAO,CAAC,IAAMmC,QAAQ,CAACE,IAAI,CAACC,SAAS,EAAIA,SAAS,CAACC,OAAO,CAAC,CAAE,CAACJ,QAAQ,CAAC,CAAC,CAEpG,MAAO,CACLnC,OAAO,CACL,IACEiB,OAAO,EAAIa,eAAe,CAACU,MAAM,CAAG,CAAC,CACjCV,eAAe,CAACZ,MAAM,CAAsD,CAACC,IAAI,CAAEsB,KAAK,CAAErB,CAAC,GAAK,KAAAsB,WAAA,CAAAC,kBAAA,CAC9F,KAAM,CAAApB,KAAK,CAAGY,QAAQ,SAARA,QAAQ,kBAAAO,WAAA,CAARP,QAAQ,CAAGf,CAAC,CAAC,UAAAsB,WAAA,kBAAAC,kBAAA,CAAbD,WAAA,CAAelB,MAAM,UAAAmB,kBAAA,iBAArBA,kBAAA,CAAwB,CAAC,CAAC,CACxC,KAAM,CAAAC,MAAM,CAAGrB,KAAK,CAAG1B,IAAI,CAAC6B,MAAM,CAACH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAGkB,SAAS,CAChE,GAAID,MAAM,CAAE,CACVzB,IAAI,CAACsB,KAAK,CAACxB,OAAO,CAAC,CAAG,GAAI,CAAAlB,WAAW,CAAC0C,KAAK,CAAEG,MAAM,CAAC,CACtD,CACA,MAAO,CAAAzB,IAAI,CACb,CAAC,CAAE,CAAC,CAAC,CAAC,CACN,CAAC,CAAC,CACR,CAACF,OAAO,CAAEa,eAAe,CAAEK,QAAQ,CACrC,CAAC,CACDC,UAAU,CACX,CACH,CAEA,MAAO,SAAS,CAAAU,gBAAgBA,CAC9B7B,OAAgB,CAChBY,MAA8B,CACuB,CACrD,MAAO,CAAAD,oCAAoC,CAACX,OAAO,CAAEY,MAAM,CAAC,CAAC,CAAC,CAAC,CACjE,CAEA;AACA,MAAO,SAAS,CAAAkB,eAAeA,CAACC,OAAgB,CAAEP,KAAa,CAA2B,CACxF,KAAM,CAAAQ,aAAa,CAAGH,gBAAgB,CAACE,OAAO,CAAE,CAACP,KAAK,CAAC,CAAC,CACxD,GAAI,CAACA,KAAK,CAAE,OACZ,MAAO,CAAAQ,aAAa,CAACR,KAAK,CAACxB,OAAO,CAAC,CACrC,CAEA,MAAO,SAAS,CAAAiC,mBAAmBA,CACjCF,OAAgB,CAChBG,UAAqC,CACL,CAChC,KAAM,CAAAtB,MAAM,CAAG7B,OAAO,CAAC,SAAAoD,kBAAA,QAAAA,kBAAA,CAAMD,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEtC,MAAM,CAAEwC,QAAQ,EAAwBA,QAAQ,WAAY,CAAAvD,KAAK,CAAC,UAAAsD,kBAAA,UAAAA,kBAAA,CAAI,EAAE,GAAE,CACjHD,UAAU,CACX,CAAC,CAEF,KAAM,CAAAF,aAAa,CAAGH,gBAAgB,CAACE,OAAO,CAAEnB,MAAM,CAAC,CACvD,KAAM,CAAAyB,WAAoB,CAAGtD,OAAO,CAAC,SAAAuD,gBAAA,QAAAA,gBAAA,CAAMJ,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEd,IAAI,CAACgB,QAAQ,EAAIA,QAAQ,GAAKzD,KAAK,CAAC,UAAA2D,gBAAA,UAAAA,gBAAA,CAAI,KAAK,GAAE,CAACJ,UAAU,CAAC,CAAC,CACnH,KAAM,CAAAK,UAAU,CAAGhD,cAAc,CAAC8C,WAAW,CAAG,CAACN,OAAO,CAAC,CAAG,EAAE,CAAC,CAE/D,MAAO,CAAAhD,OAAO,CACZ,SAAAyD,eAAA,QAAAA,eAAA,CACEN,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEvC,GAAG,CAACyC,QAAQ,EAAI,CAC1B,GAAI,CAACL,OAAO,EAAI,CAACK,QAAQ,CAAE,OAC3B,GAAIA,QAAQ,WAAY,CAAAvD,KAAK,CAAE,MAAO,CAAAmD,aAAa,CAACI,QAAQ,CAACpC,OAAO,CAAC,CACrE,GAAIoC,QAAQ,GAAKzD,KAAK,CAAE,MAAO,CAAA4D,UAAU,CAACR,OAAO,CAAC,CAClD,OACF,CAAC,CAAC,UAAAS,eAAA,UAAAA,eAAA,CAAI,EAAE,GACV,CAACT,OAAO,CAAEG,UAAU,CAAEK,UAAU,CAAEP,aAAa,CACjD,CAAC,CACH,CAEA,MAAO,SAAS,CAAAS,kBAAkBA,CAACV,OAAgB,CAAEK,QAAmB,CAA8B,CACpG,MAAO,CAAAH,mBAAmB,CAACF,OAAO,CAAE,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CACpD,CAEA;AACA,MAAO,SAAS,CAAAM,mBAAmBA,CAAA,CAAwD,CACzF,KAAM,CAAEX,OAAQ,CAAC,CAAG7C,kBAAkB,CAAC,CAAC,CACxC,KAAM,CAAAyD,SAAS,CAAG1D,YAAY,CAAC,CAAC,CAChC,KAAM,CAAA2D,cAAc,CAAG7D,OAAO,CAAC,IAAM8D,MAAM,CAACC,MAAM,CAACH,SAAS,SAATA,SAAS,UAATA,SAAS,CAAI,CAAC,CAAC,CAAC,CAAE,CAACA,SAAS,CAAC,CAAC,CACjF,KAAM,CAAAzB,QAAQ,CAAGW,gBAAgB,CAACE,OAAO,SAAPA,OAAO,UAAPA,OAAO,CAAIH,SAAS,CAAEgB,cAAc,CAAC,CACvE,MAAO,CAAA1B,QAAQ,SAARA,QAAQ,UAARA,QAAQ,CAAI,CAAC,CAAC,CACvB","ignoreList":[]},"metadata":{},"sourceType":"module"}