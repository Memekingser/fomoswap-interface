{"ast":null,"code":"import { JSBI, Percent, TokenAmount } from 'fomoswap-story';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { useActiveWeb3React } from '../../hooks';\nimport { wrappedCurrency } from '../../utils/wrappedCurrency';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nexport function useBurnState() {\n  return useSelector(state => state.burn);\n}\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  var _pair$liquidityToken$, _pair$liquidityToken;\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState();\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB);\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  };\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100');\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair === null || pair === void 0 ? void 0 : pair.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n      const liquidityValue = liquidityValues[independentField];\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\n      }\n    }\n  }\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined\n  };\n  let error;\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\nexport function useBurnActionHandlers() {\n  const dispatch = useDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}","map":{"version":3,"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","_pair$liquidityToken$","_pair$liquidityToken","account","chainId","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","_error","useBurnActionHandlers","dispatch","onUserInput","field"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/burn/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from 'fomoswap-story'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>(state => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: CurrencyAmount\n    [Field.CURRENCY_B]?: CurrencyAmount\n  }\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n      const liquidityValue = liquidityValues[independentField]\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onUserInput\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}