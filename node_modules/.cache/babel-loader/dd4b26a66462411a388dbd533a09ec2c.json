{"ast":null,"code":"import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DEFAULT_TOKEN_LIST_URL } from '../../constants';\nimport { addPopup } from '../application/actions';\nimport { acceptListUpdate, addList, fetchTokenList } from './actions';\nexport default function Updater() {\n  const dispatch = useDispatch();\n  const lists = useSelector(state => state.lists.byUrl);\n\n  // we should always fetch the default token list, so add it\n  useEffect(() => {\n    if (!lists[DEFAULT_TOKEN_LIST_URL]) dispatch(addList(DEFAULT_TOKEN_LIST_URL));\n  }, [dispatch, lists]);\n\n  // on initial mount, refetch all the lists in storage\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => dispatch(fetchTokenList(listUrl)));\n    // we only do this once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        dispatch(fetchTokenList(listUrl));\n      }\n    });\n  }, [dispatch, lists]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens);\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n              dispatch(addPopup({\n                key: listUrl,\n                content: {\n                  listUpdate: {\n                    listUrl,\n                    oldList: list.current,\n                    newList: list.pendingUpdate,\n                    auto: true\n                  }\n                }\n              }));\n            } else {\n              console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n            }\n            break;\n\n          // this will be turned on later\n          // case VersionUpgrade.MAJOR:\n          // dispatch(\n          //   addPopup({\n          //     key: listUrl,\n          //     content: {\n          //       listUpdate: {\n          //         listUrl,\n          //         auto: false,\n          //         oldList: list.current,\n          //         newList: list.pendingUpdate\n          //       }\n          //     }\n          //   })\n          // )\n        }\n      }\n    });\n  }, [dispatch, lists]);\n  return null;\n}","map":{"version":3,"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useEffect","useDispatch","useSelector","DEFAULT_TOKEN_LIST_URL","addPopup","acceptListUpdate","addList","fetchTokenList","Updater","dispatch","lists","state","byUrl","Object","keys","forEach","listUrl","list","current","loadingRequestId","error","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR","min","tokens","key","content","listUpdate","oldList","newList","auto","console"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/lists/updater.ts"],"sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DEFAULT_TOKEN_LIST_URL } from '../../constants'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate, addList, fetchTokenList } from './actions'\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n\n  // we should always fetch the default token list, so add it\n  useEffect(() => {\n    if (!lists[DEFAULT_TOKEN_LIST_URL]) dispatch(addList(DEFAULT_TOKEN_LIST_URL))\n  }, [dispatch, lists])\n\n  // on initial mount, refetch all the lists in storage\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => dispatch(fetchTokenList(listUrl) as any))\n    // we only do this once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch])\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        dispatch(fetchTokenList(listUrl) as any)\n      }\n    })\n  }, [dispatch, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      oldList: list.current,\n                      newList: list.pendingUpdate,\n                      auto: true\n                    }\n                  }\n                })\n              )\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          // this will be turned on later\n          // case VersionUpgrade.MAJOR:\n          // dispatch(\n          //   addPopup({\n          //     key: listUrl,\n          //     content: {\n          //       listUpdate: {\n          //         listUrl,\n          //         auto: false,\n          //         oldList: list.current,\n          //         newList: list.pendingUpdate\n          //       }\n          //     }\n          //   })\n          // )\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}