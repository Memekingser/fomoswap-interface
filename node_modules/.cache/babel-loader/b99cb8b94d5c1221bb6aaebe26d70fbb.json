{"ast":null,"code":"import useENS from'../../hooks/useENS';import{Version}from'../../hooks/useToggledVersion';import{parseUnits}from'@ethersproject/units';import{CurrencyAmount,ETHER,JSBI,Token,TokenAmount}from'fomoswap-artio';import{useCallback,useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{useV1Trade}from'../../data/V1';import{useActiveWeb3React}from'../../hooks';import{useCurrency}from'../../hooks/Tokens';import{useTradeExactIn,useTradeExactOut}from'../../hooks/Trades';import useParsedQueryString from'../../hooks/useParsedQueryString';import{isAddress}from'../../utils';import{useCurrencyBalances}from'../wallet/hooks';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';import useToggledVersion from'../../hooks/useToggledVersion';import{useUserSlippageTolerance}from'../user/hooks';import{computeSlippageAdjustedAmounts}from'../../utils/prices';export function useSwapState(){return useSelector(state=>state.swap);}export function useSwapActionHandlers(){const dispatch=useDispatch();const onCurrencySelection=useCallback((field,currency)=>{dispatch(selectCurrency({field,currencyId:currency instanceof Token?currency.address:currency===ETHER?'ETH':''}));},[dispatch]);const onSwitchTokens=useCallback(()=>{dispatch(switchCurrencies());},[dispatch]);const onUserInput=useCallback((field,typedValue)=>{dispatch(typeInput({field,typedValue}));},[dispatch]);const onChangeRecipient=useCallback(recipient=>{dispatch(setRecipient({recipient}));},[dispatch]);return{onSwitchTokens,onCurrencySelection,onUserInput,onChangeRecipient};}// try to parse a user entered amount for a given token\nexport function tryParseAmount(value,currency){if(!value||!currency){return;}try{const typedValueParsed=parseUnits(value,currency.decimals).toString();if(typedValueParsed!=='0'){return currency instanceof Token?new TokenAmount(currency,JSBI.BigInt(typedValueParsed)):CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));}}catch(error){// should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\nconsole.debug(\"Failed to parse input amount: \\\"\".concat(value,\"\\\"\"),error);}// necessary for all paths to return a value\nreturn;}// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(){var _ref,_ref2;const{account}=useActiveWeb3React();const toggledVersion=useToggledVersion();const{independentField,typedValue,[Field.INPUT]:{currencyId:inputCurrencyId},[Field.OUTPUT]:{currencyId:outputCurrencyId},recipient}=useSwapState();const inputCurrency=useCurrency(inputCurrencyId);const outputCurrency=useCurrency(outputCurrencyId);const recipientLookup=useENS(recipient!==null&&recipient!==void 0?recipient:undefined);const to=(_ref=recipient===null?account:recipientLookup.address)!==null&&_ref!==void 0?_ref:null;const relevantTokenBalances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,[inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined]);const isExactIn=independentField===Field.INPUT;const parsedAmount=tryParseAmount(typedValue,(_ref2=isExactIn?inputCurrency:outputCurrency)!==null&&_ref2!==void 0?_ref2:undefined);const bestTradeExactIn=useTradeExactIn(isExactIn?parsedAmount:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined);const bestTradeExactOut=useTradeExactOut(inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,!isExactIn?parsedAmount:undefined);const v2Trade=isExactIn?bestTradeExactIn:bestTradeExactOut;const currencyBalances={[Field.INPUT]:relevantTokenBalances[0],[Field.OUTPUT]:relevantTokenBalances[1]};const currencies={[Field.INPUT]:inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,[Field.OUTPUT]:outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined};// get link to trade on v1, if a better rate exists\nconst v1Trade=useV1Trade(isExactIn,currencies[Field.INPUT],currencies[Field.OUTPUT],parsedAmount);let inputError;if(!account){inputError='Connect Wallet';}if(!parsedAmount){var _inputError;inputError=(_inputError=inputError)!==null&&_inputError!==void 0?_inputError:'Enter an amount';}if(!currencies[Field.INPUT]||!currencies[Field.OUTPUT]){var _inputError2;inputError=(_inputError2=inputError)!==null&&_inputError2!==void 0?_inputError2:'Select a token';}if(!to){var _inputError3;inputError=(_inputError3=inputError)!==null&&_inputError3!==void 0?_inputError3:'Enter a recipient';}const[allowedSlippage]=useUserSlippageTolerance();const slippageAdjustedAmounts=v2Trade&&allowedSlippage&&computeSlippageAdjustedAmounts(v2Trade,allowedSlippage);const slippageAdjustedAmountsV1=v1Trade&&allowedSlippage&&computeSlippageAdjustedAmounts(v1Trade,allowedSlippage);// compare input balance to max input based on version\nconst[balanceIn,amountIn]=[currencyBalances[Field.INPUT],toggledVersion===Version.v1?slippageAdjustedAmountsV1?slippageAdjustedAmountsV1[Field.INPUT]:null:slippageAdjustedAmounts?slippageAdjustedAmounts[Field.INPUT]:null];if(balanceIn&&amountIn&&balanceIn.lessThan(amountIn)){inputError='Insufficient '+amountIn.currency.symbol+' balance';}return{currencies,currencyBalances,parsedAmount,v2Trade:v2Trade!==null&&v2Trade!==void 0?v2Trade:undefined,inputError,v1Trade};}function parseCurrencyFromURLParameter(urlParam){var _ETH;if(typeof urlParam==='string'){const valid=isAddress(urlParam);if(valid)return valid;if(urlParam.toUpperCase()==='ETH')return'ETH';if(valid===false)return'ETH';}return(_ETH='ETH')!==null&&_ETH!==void 0?_ETH:'';}function parseTokenAmountURLParameter(urlParam){return typeof urlParam==='string'&&!isNaN(parseFloat(urlParam))?urlParam:'';}function parseIndependentFieldURLParameter(urlParam){return typeof urlParam==='string'&&urlParam.toLowerCase()==='output'?Field.OUTPUT:Field.INPUT;}const ENS_NAME_REGEX=/^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;const ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;function validatedRecipient(recipient){if(typeof recipient!=='string')return null;const address=isAddress(recipient);if(address)return address;if(ENS_NAME_REGEX.test(recipient))return recipient;if(ADDRESS_REGEX.test(recipient))return recipient;return null;}export function queryParametersToSwapState(parsedQs){let inputCurrency=parseCurrencyFromURLParameter(parsedQs.inputCurrency);let outputCurrency=parseCurrencyFromURLParameter(parsedQs.outputCurrency);if(inputCurrency===outputCurrency){if(typeof parsedQs.outputCurrency==='string'){inputCurrency='';}else{outputCurrency='';}}const recipient=validatedRecipient(parsedQs.recipient);return{[Field.INPUT]:{currencyId:inputCurrency},[Field.OUTPUT]:{currencyId:outputCurrency},typedValue:parseTokenAmountURLParameter(parsedQs.exactAmount),independentField:parseIndependentFieldURLParameter(parsedQs.exactField),recipient};}// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch(){const{chainId}=useActiveWeb3React();const dispatch=useDispatch();const parsedQs=useParsedQueryString();useEffect(()=>{if(!chainId)return;const parsed=queryParametersToSwapState(parsedQs);dispatch(replaceSwapState({typedValue:parsed.typedValue,field:parsed.independentField,inputCurrencyId:parsed[Field.INPUT].currencyId,outputCurrencyId:parsed[Field.OUTPUT].currencyId,recipient:parsed.recipient}));// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,chainId]);}","map":{"version":3,"names":["useENS","Version","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useDispatch","useSelector","useV1Trade","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useToggledVersion","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","concat","useDerivedSwapInfo","_ref","_ref2","account","toggledVersion","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","undefined","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","v1Trade","inputError","_inputError","_inputError2","_inputError3","allowedSlippage","slippageAdjustedAmounts","slippageAdjustedAmountsV1","balanceIn","amountIn","v1","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","_ETH","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","parsed"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/swap/hooks.ts"],"sourcesContent":["import useENS from '../../hooks/useENS'\nimport { Version } from '../../hooks/useToggledVersion'\nimport { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from 'fomoswap-artio'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useV1Trade } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport useToggledVersion from '../../hooks/useToggledVersion'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n  v1Trade: Trade | undefined\n} {\n  const { account } = useActiveWeb3React()\n\n  const toggledVersion = useToggledVersion()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined\n  }\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount)\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  if (!to) {\n    inputError = inputError ?? 'Enter a recipient'\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  const slippageAdjustedAmountsV1 =\n    v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    toggledVersion === Version.v1\n      ? slippageAdjustedAmountsV1\n        ? slippageAdjustedAmountsV1[Field.INPUT]\n        : null\n      : slippageAdjustedAmounts\n      ? slippageAdjustedAmounts[Field.INPUT]\n      : null\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance'\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n    v1Trade\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\n    if (valid === false) return 'ETH'\n  }\n  return 'ETH' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient\n      })\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}