{"ast":null,"code":"import _objectSpread from\"/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{parseBytes32String}from'@ethersproject/strings';import{ETHER,Token}from'fomoswap-story';import{useMemo}from'react';import{useDefaultTokenList}from'../state/lists/hooks';import{NEVER_RELOAD,useSingleCallResult}from'../state/multicall/hooks';import{useUserAddedTokens}from'../state/user/hooks';import{isAddress}from'../utils';import{useActiveWeb3React}from'./index';import{useBytes32TokenContract,useTokenContract}from'./useContract';export function useAllTokens(){const{chainId}=useActiveWeb3React();const userAddedTokens=useUserAddedTokens();const allTokens=useDefaultTokenList();return useMemo(()=>{if(!chainId)return{};return userAddedTokens// reduce into all ALL_TOKENS filtered by the current chain\n.reduce((tokenMap,token)=>{tokenMap[token.address]=token;return tokenMap;},// must make a copy because reduce modifies the map, and we do not\n// want to make a copy in every iteration\n_objectSpread({},allTokens[chainId]));},[chainId,userAddedTokens,allTokens]);}// parse a name or symbol from a token response\nconst BYTES32_REGEX=/^0x[a-fA-F0-9]{64}$/;function parseStringOrBytes32(str,bytes32,defaultValue){return str&&str.length>0?str:bytes32&&BYTES32_REGEX.test(bytes32)?parseBytes32String(bytes32):defaultValue;}// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress){const{chainId}=useActiveWeb3React();const tokens=useAllTokens();const address=isAddress(tokenAddress);const tokenContract=useTokenContract(address?address:undefined,false);const tokenContractBytes32=useBytes32TokenContract(address?address:undefined,false);const token=address?tokens[address]:undefined;const tokenName=useSingleCallResult(token?undefined:tokenContract,'name',undefined,NEVER_RELOAD);const tokenNameBytes32=useSingleCallResult(token?undefined:tokenContractBytes32,'name',undefined,NEVER_RELOAD);const symbol=useSingleCallResult(token?undefined:tokenContract,'symbol',undefined,NEVER_RELOAD);const symbolBytes32=useSingleCallResult(token?undefined:tokenContractBytes32,'symbol',undefined,NEVER_RELOAD);const decimals=useSingleCallResult(token?undefined:tokenContract,'decimals',undefined,NEVER_RELOAD);return useMemo(()=>{if(token)return token;if(!chainId||!address)return undefined;if(decimals.loading||symbol.loading||tokenName.loading)return null;if(decimals.result){var _symbol$result,_symbolBytes32$result,_tokenName$result,_tokenNameBytes32$res;return new Token(chainId,address,decimals.result[0],parseStringOrBytes32((_symbol$result=symbol.result)===null||_symbol$result===void 0?void 0:_symbol$result[0],(_symbolBytes32$result=symbolBytes32.result)===null||_symbolBytes32$result===void 0?void 0:_symbolBytes32$result[0],'UNKNOWN'),parseStringOrBytes32((_tokenName$result=tokenName.result)===null||_tokenName$result===void 0?void 0:_tokenName$result[0],(_tokenNameBytes32$res=tokenNameBytes32.result)===null||_tokenNameBytes32$res===void 0?void 0:_tokenNameBytes32$res[0],'Unknown Token'));}return undefined;},[address,chainId,decimals.loading,decimals.result,symbol.loading,symbol.result,symbolBytes32.result,token,tokenName.loading,tokenName.result,tokenNameBytes32.result]);}export function useCurrency(currencyId){const isETH=(currencyId===null||currencyId===void 0?void 0:currencyId.toUpperCase())==='ETH';const token=useToken(isETH?undefined:currencyId);return isETH?ETHER:token;}","map":{"version":3,"names":["parseBytes32String","ETHER","Token","useMemo","useDefaultTokenList","NEVER_RELOAD","useSingleCallResult","useUserAddedTokens","isAddress","useActiveWeb3React","useBytes32TokenContract","useTokenContract","useAllTokens","chainId","userAddedTokens","allTokens","reduce","tokenMap","token","address","_objectSpread","BYTES32_REGEX","parseStringOrBytes32","str","bytes32","defaultValue","length","test","useToken","tokenAddress","tokens","tokenContract","undefined","tokenContractBytes32","tokenName","tokenNameBytes32","symbol","symbolBytes32","decimals","loading","result","_symbol$result","_symbolBytes32$result","_tokenName$result","_tokenNameBytes32$res","useCurrency","currencyId","isETH","toUpperCase"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/hooks/Tokens.ts"],"sourcesContent":["import { parseBytes32String } from '@ethersproject/strings'\nimport { Currency, ETHER, Token } from 'fomoswap-story'\nimport { useMemo } from 'react'\nimport { useDefaultTokenList } from '../state/lists/hooks'\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\nimport { useUserAddedTokens } from '../state/user/hooks'\nimport { isAddress } from '../utils'\n\nimport { useActiveWeb3React } from './index'\nimport { useBytes32TokenContract, useTokenContract } from './useContract'\n\nexport function useAllTokens(): { [address: string]: Token } {\n  const { chainId } = useActiveWeb3React()\n  const userAddedTokens = useUserAddedTokens()\n  const allTokens = useDefaultTokenList()\n\n  return useMemo(() => {\n    if (!chainId) return {}\n    return (\n      userAddedTokens\n        // reduce into all ALL_TOKENS filtered by the current chain\n        .reduce<{ [address: string]: Token }>(\n          (tokenMap, token) => {\n            tokenMap[token.address] = token\n            return tokenMap\n          },\n          // must make a copy because reduce modifies the map, and we do not\n          // want to make a copy in every iteration\n          { ...allTokens[chainId] }\n        )\n    )\n  }, [chainId, userAddedTokens, allTokens])\n}\n\n// parse a name or symbol from a token response\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\nfunction parseStringOrBytes32(str: string | undefined, bytes32: string | undefined, defaultValue: string): string {\n  return str && str.length > 0\n    ? str\n    : bytes32 && BYTES32_REGEX.test(bytes32)\n    ? parseBytes32String(bytes32)\n    : defaultValue\n}\n\n// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress?: string): Token | undefined | null {\n  const { chainId } = useActiveWeb3React()\n  const tokens = useAllTokens()\n\n  const address = isAddress(tokenAddress)\n\n  const tokenContract = useTokenContract(address ? address : undefined, false)\n  const tokenContractBytes32 = useBytes32TokenContract(address ? address : undefined, false)\n  const token: Token | undefined = address ? tokens[address] : undefined\n\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, 'name', undefined, NEVER_RELOAD)\n  const tokenNameBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    'name',\n    undefined,\n    NEVER_RELOAD\n  )\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, 'symbol', undefined, NEVER_RELOAD)\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, 'decimals', undefined, NEVER_RELOAD)\n\n  return useMemo(() => {\n    if (token) return token\n    if (!chainId || !address) return undefined\n    if (decimals.loading || symbol.loading || tokenName.loading) return null\n    if (decimals.result) {\n      return new Token(\n        chainId,\n        address,\n        decimals.result[0],\n        parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], 'UNKNOWN'),\n        parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], 'Unknown Token')\n      )\n    }\n    return undefined\n  }, [\n    address,\n    chainId,\n    decimals.loading,\n    decimals.result,\n    symbol.loading,\n    symbol.result,\n    symbolBytes32.result,\n    token,\n    tokenName.loading,\n    tokenName.result,\n    tokenNameBytes32.result\n  ])\n}\n\nexport function useCurrency(currencyId: string | undefined): Currency | null | undefined {\n  const isETH = currencyId?.toUpperCase() === 'ETH'\n  const token = useToken(isETH ? undefined : currencyId)\n  return isETH ? ETHER : token\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}