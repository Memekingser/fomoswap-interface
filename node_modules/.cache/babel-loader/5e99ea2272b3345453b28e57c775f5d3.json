{"ast":null,"code":"import{createAction,createAsyncThunk}from'@reduxjs/toolkit';import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';import uriToHttp from'../../utils/uriToHttp';const tokenListValidator=new Ajv({allErrors:true}).compile(schema);/**\n * Contains the logic for resolving a URL to a valid token list\n * @param listUrl list url\n */async function getTokenList(listUrl){const urls=uriToHttp(listUrl);for(const url of urls){let response;try{response=await fetch(url);if(!response.ok)continue;}catch(error){console.error(\"failed to fetch list \".concat(listUrl,\" at uri \").concat(url));continue;}const json=await response.json();if(!tokenListValidator(json)){var _tokenListValidator$e,_tokenListValidator$e2;throw new Error((_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce((memo,error)=>{var _error$message;const add=\"\".concat(error.dataPath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'Token list failed validation');}return json;}throw new Error('Unrecognized list URL protocol.');}const fetchCache={};export const fetchTokenList=createAsyncThunk('lists/fetchTokenList',url=>{var _fetchCache$url;return(// this makes it so we only ever fetch a list a single time concurrently\nfetchCache[url]=(_fetchCache$url=fetchCache[url])!==null&&_fetchCache$url!==void 0?_fetchCache$url:getTokenList(url).catch(error=>{delete fetchCache[url];throw error;}));});export const acceptListUpdate=createAction('lists/acceptListUpdate');export const addList=createAction('lists/addList');export const rejectVersionUpdate=createAction('lists/rejectVersionUpdate');","map":{"version":3,"names":["createAction","createAsyncThunk","schema","Ajv","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","urls","url","response","fetch","ok","error","console","concat","json","_tokenListValidator$e","_tokenListValidator$e2","Error","errors","reduce","memo","_error$message","add","dataPath","message","length","fetchCache","fetchTokenList","_fetchCache$url","catch","acceptListUpdate","addList","rejectVersionUpdate"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/lists/actions.ts"],"sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit'\nimport { TokenList, Version } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport uriToHttp from '../../utils/uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a URL to a valid token list\n * @param listUrl list url\n */\nasync function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls = uriToHttp(listUrl)\n  for (const url of urls) {\n    let response\n    try {\n      response = await fetch(url)\n      if (!response.ok) continue\n    } catch (error) {\n      console.error(`failed to fetch list ${listUrl} at uri ${url}`)\n      continue\n    }\n\n    const json = await response.json()\n    if (!tokenListValidator(json)) {\n      throw new Error(\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.dataPath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'Token list failed validation'\n      )\n    }\n    return json\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n\nconst fetchCache: { [url: string]: Promise<TokenList> } = {}\nexport const fetchTokenList = createAsyncThunk<TokenList, string>(\n  'lists/fetchTokenList',\n  (url: string) =>\n    // this makes it so we only ever fetch a list a single time concurrently\n    (fetchCache[url] =\n      fetchCache[url] ??\n      getTokenList(url).catch(error => {\n        delete fetchCache[url]\n        throw error\n      }))\n)\n\nexport const acceptListUpdate = createAction<string>('lists/acceptListUpdate')\nexport const addList = createAction<string>('lists/addList')\nexport const rejectVersionUpdate = createAction<Version>('lists/rejectVersionUpdate')\n"],"mappings":"AAAA,OAASA,YAAY,CAAEC,gBAAgB,KAAQ,kBAAkB,CAEjE,MAAO,CAAAC,MAAM,KAAM,gDAAgD,CACnE,MAAO,CAAAC,GAAG,KAAM,KAAK,CACrB,MAAO,CAAAC,SAAS,KAAM,uBAAuB,CAE7C,KAAM,CAAAC,kBAAkB,CAAG,GAAI,CAAAF,GAAG,CAAC,CAAEG,SAAS,CAAE,IAAK,CAAC,CAAC,CAACC,OAAO,CAACL,MAAM,CAAC,CAEvE;AACA;AACA;AACA,GACA,cAAe,CAAAM,YAAYA,CAACC,OAAe,CAAsB,CAC/D,KAAM,CAAAC,IAAI,CAAGN,SAAS,CAACK,OAAO,CAAC,CAC/B,IAAK,KAAM,CAAAE,GAAG,GAAI,CAAAD,IAAI,CAAE,CACtB,GAAI,CAAAE,QAAQ,CACZ,GAAI,CACFA,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,GAAG,CAAC,CAC3B,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,SACpB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,yBAAAE,MAAA,CAAyBR,OAAO,aAAAQ,MAAA,CAAWN,GAAG,CAAE,CAAC,CAC9D,SACF,CAEA,KAAM,CAAAO,IAAI,CAAG,KAAM,CAAAN,QAAQ,CAACM,IAAI,CAAC,CAAC,CAClC,GAAI,CAACb,kBAAkB,CAACa,IAAI,CAAC,CAAE,KAAAC,qBAAA,CAAAC,sBAAA,CAC7B,KAAM,IAAI,CAAAC,KAAK,EAAAF,qBAAA,EAAAC,sBAAA,CACbf,kBAAkB,CAACiB,MAAM,UAAAF,sBAAA,iBAAzBA,sBAAA,CAA2BG,MAAM,CAAS,CAACC,IAAI,CAAET,KAAK,GAAK,KAAAU,cAAA,CACzD,KAAM,CAAAC,GAAG,IAAAT,MAAA,CAAMF,KAAK,CAACY,QAAQ,MAAAV,MAAA,EAAAQ,cAAA,CAAIV,KAAK,CAACa,OAAO,UAAAH,cAAA,UAAAA,cAAA,CAAI,EAAE,CAAE,CACtD,MAAO,CAAAD,IAAI,CAACK,MAAM,CAAG,CAAC,IAAAZ,MAAA,CAAMO,IAAI,OAAAP,MAAA,CAAKS,GAAG,KAAAT,MAAA,CAAQS,GAAG,CAAE,CACvD,CAAC,CAAE,EAAE,CAAC,UAAAP,qBAAA,UAAAA,qBAAA,CAAI,8BACZ,CAAC,CACH,CACA,MAAO,CAAAD,IAAI,CACb,CACA,KAAM,IAAI,CAAAG,KAAK,CAAC,iCAAiC,CAAC,CACpD,CAEA,KAAM,CAAAS,UAAiD,CAAG,CAAC,CAAC,CAC5D,MAAO,MAAM,CAAAC,cAAc,CAAG9B,gBAAgB,CAC5C,sBAAsB,CACrBU,GAAW,OAAAqB,eAAA,QACV;AACCF,UAAU,CAACnB,GAAG,CAAC,EAAAqB,eAAA,CACdF,UAAU,CAACnB,GAAG,CAAC,UAAAqB,eAAA,UAAAA,eAAA,CACfxB,YAAY,CAACG,GAAG,CAAC,CAACsB,KAAK,CAAClB,KAAK,EAAI,CAC/B,MAAO,CAAAe,UAAU,CAACnB,GAAG,CAAC,CACtB,KAAM,CAAAI,KAAK,CACb,CAAC,CAAC,GACR,CAAC,CAED,MAAO,MAAM,CAAAmB,gBAAgB,CAAGlC,YAAY,CAAS,wBAAwB,CAAC,CAC9E,MAAO,MAAM,CAAAmC,OAAO,CAAGnC,YAAY,CAAS,eAAe,CAAC,CAC5D,MAAO,MAAM,CAAAoC,mBAAmB,CAAGpC,YAAY,CAAU,2BAA2B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}