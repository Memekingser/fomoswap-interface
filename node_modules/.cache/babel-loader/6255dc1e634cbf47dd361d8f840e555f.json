{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n};\nvar FortmaticConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(FortmaticConnector, _AbstractConnector);\n  function FortmaticConnector(_ref) {\n    var _this;\n    var apiKey = _ref.apiKey,\n      chainId = _ref.chainId;\n    !Object.keys(chainIdToNetwork).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Unsupported chainId \" + chainId) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.apiKey = apiKey;\n    _this.chainId = chainId;\n    return _this;\n  }\n  var _proto = FortmaticConnector.prototype;\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.fortmatic.getProvider().enable().then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.fortmatic.getProvider(),\n            chainId: _this3.chainId,\n            account: account\n          };\n        });\n      };\n      var _this3 = this;\n      var _temp4 = function () {\n        if (!_this3.fortmatic) {\n          return Promise.resolve(import('fortmatic')).then(function (_ref2) {\n            var Fortmatic = _ref2[\"default\"];\n            _this3.fortmatic = new Fortmatic(_this3.apiKey, _this3.chainId === 1 || _this3.chainId === 4 ? undefined : chainIdToNetwork[_this3.chainId]);\n          });\n        }\n      }();\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n      return Promise.resolve(_this5.fortmatic.getProvider());\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n      return Promise.resolve(_this9.fortmatic.getProvider().send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.deactivate = function deactivate() {};\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n      return Promise.resolve(_this11.fortmatic.user.logout()).then(function () {\n        _this11.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  return FortmaticConnector;\n}(AbstractConnector);\nexport { FortmaticConnector };","map":{"version":3,"names":["chainIdToNetwork","FortmaticConnector","_AbstractConnector","_inheritsLoose","_ref","apiKey","chainId","Object","keys","includes","toString","process","env","NODE_ENV","invariant","_this","call","supportedChainIds","_proto","prototype","activate","_this3","fortmatic","getProvider","enable","then","accounts","account","provider","_ref2","Fortmatic","undefined","e","Promise","reject","resolve","_this5","getChainId","_this7","getAccount","_this9","send","deactivate","close","_this11","user","logout","emitDeactivate","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"mappings":";;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;EACtD,GAAG,SADmD;EAEtD,GAAG,SAFmD;EAGtD,GAAG,SAHmD;EAItD,IAAI;AAJkD,CAAxD;IAYaC,kBAAb,0BAAAC,kBAAA;EAAAC,cAAA,CAAAF,kBAAA,EAAAC,kBAAA;EAME,SAAAD,mBAAAG,IAAA;;QAAcC,MAAA,GAAAD,IAAA,CAAAC,MAAA;MAAQC,OAAA,GAAAF,IAAA,CAAAE,OAAA;IACpB,CAAUC,MAAM,CAACC,IAAP,CAAYR,gBAAZ,EAA8BS,QAA9B,CAAuCH,OAAO,CAACI,QAAR,EAAvC,CAAV,GAAAC,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAAC,SAAS,iCAAoFR,OAApF,CAAT,GAAAQ,SAAS,OAAT;IACAC,KAAA,GAAAb,kBAAA,CAAAc,IAAA,OAAM;MAAEC,iBAAiB,EAAE,CAACX,OAAD;IAArB,CAAN;IAEAS,KAAA,CAAKV,MAAL,GAAcA,MAAd;IACAU,KAAA,CAAKT,OAAL,GAAeA,OAAf;;EACD;EAZH,IAAAY,MAAA,GAAAjB,kBAAA,CAAAkB,SAAA;EAAAD,MAAA,CAceE,QAdf,YAAAA,SAAA;IAAA;;+BAuB0BC,MAAA,CAAKC,SAAL,CACnBC,WADmB,GAEnBC,MAFmB,GAGnBC,IAHmB,CAGd,UAACC,QAAD;UAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;QAAA,CAHc,GAAAD,IAAA,WAAhBE,OAAA;UAKN,OAAO;YAAEC,QAAQ,EAAEP,MAAA,CAAKC,SAAL,CAAeC,WAAf,EAAZ;YAA0CjB,OAAO,EAAEe,MAAA,CAAKf,OAAxD;YAAiEqB,OAAO,EAAPA;UAAjE,CAAP;;;mBAbK;;YAAD,CAACN,MAAA,CAAKC,SAAA;iCAC6B,OAAO,WAAP,GAAAG,IAAA,WAAAI,KAAA;gBAApBC,SAAA,GAAAD,KAAA;YACjBR,MAAA,CAAKC,SAAL,GAAiB,IAAIQ,SAAJ,CACfT,MAAA,CAAKhB,MADU,EAEfgB,MAAA,CAAKf,OAAL,KAAiB,CAAjB,IAAsBe,MAAA,CAAKf,OAAL,KAAiB,CAAvC,GAA2CyB,SAA3C,GAAuD/B,gBAAgB,CAACqB,MAAA,CAAKf,OAAN,CAFxD,CAAjB;;;;;IAYH,CA7BH,QAAA0B,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EAAAd,MAAA,CA+BeK,WA/Bf,YAAAA,YAAA;IAAA;mBAgCW;MAAP,OAAAU,OAAA,CAAAE,OAAA,CAAOC,MAAA,CAAKd,SAAL,CAAeC,WAAf,EAAP;IACD,CAjCH,QAAAS,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EAAAd,MAAA,CAmCemB,UAnCf,YAAAA,WAAA;IAAA;mBAoCW;MAAP,OAAAJ,OAAA,CAAAE,OAAA,CAAOG,MAAA,CAAKhC,OAAZ;IACD,CArCH,QAAA0B,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EAAAd,MAAA,CAuCeqB,UAvCf,YAAAA,WAAA;IAAA;mBAwCW;MAAP,OAAAN,OAAA,CAAAE,OAAA,CAAOK,MAAA,CAAKlB,SAAL,CACJC,WADI,GAEJkB,IAFI,CAEC,cAFD,EAGJhB,IAHI,CAGC,UAACC,QAAD;QAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;MAAA,CAHD,CAAP;IAID,CA5CH,QAAAM,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EAAAd,MAAA,CA8CSwB,UA9CT,GA8CS,SAAAA,WAAA,IA9CT;EAAAxB,MAAA,CAgDeyB,KAhDf,YAAAA,MAAA;IAAA;oBAiDU;6BAAAC,OAAA,CAAKtB,SAAL,CAAeuB,IAAf,CAAoBC,MAApB,IAAArB,IAAA;QACNmB,OAAA,CAAKG,cAAL;;IACD,CAnDH,QAAAf,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EAAA,OAAA/B,kBAAA;AAAA,EAAwC+C,iBAAxC","ignoreList":[]},"metadata":{},"sourceType":"module"}