{"ast":null,"code":"\"use strict\";\n\nfunction t(t) {\n  return t && \"object\" == typeof t && \"default\" in t ? t.default : t;\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\nvar e,\n  n,\n  r,\n  o,\n  i = t(require(\"jsbi\")),\n  a = t(require(\"tiny-invariant\")),\n  u = (t(require(\"tiny-warning\")), require(\"@ethersproject/address\")),\n  s = t(require(\"big.js\")),\n  c = t(require(\"toformat\")),\n  p = t(require(\"decimal.js-light\")),\n  d = require(\"@ethersproject/solidity\"),\n  h = require(\"@ethersproject/contracts\"),\n  f = require(\"@ethersproject/networks\"),\n  l = require(\"@ethersproject/providers\"),\n  m = t(require(\"@uniswap/v2-core/build/IUniswapV2Pair.json\"));\n(n = exports.ChainId || (exports.ChainId = {}))[n.MAINNET = 1] = \"MAINNET\", n[n.ROPSTEN = 3] = \"ROPSTEN\", n[n.RINKEBY = 4] = \"RINKEBY\", n[n[\"GÖRLI\"] = 5] = \"GÖRLI\", n[n.KOVAN = 42] = \"KOVAN\", n[n.Sepolia = 11155111] = \"Sepolia\", n[n.UniChain = 130] = \"UniChain\", n[n.Artio = 80084] = \"Artio\", n[n.BERA = 80094] = \"BERA\", n[n.STORYTestnet = 1315] = \"STORYTestnet\", n[n.STORY = 1514] = \"STORY\", (r = exports.TradeType || (exports.TradeType = {}))[r.EXACT_INPUT = 0] = \"EXACT_INPUT\", r[r.EXACT_OUTPUT = 1] = \"EXACT_OUTPUT\", (o = exports.Rounding || (exports.Rounding = {}))[o.ROUND_DOWN = 0] = \"ROUND_DOWN\", o[o.ROUND_HALF_UP = 1] = \"ROUND_HALF_UP\", o[o.ROUND_UP = 2] = \"ROUND_UP\";\nvar v,\n  y = \"0x95d460835c5c71dce32bcaeeec5dbca25a8644524669d9b7c5dc90570f19e5ae\",\n  w = i.BigInt(1e3),\n  T = i.BigInt(0),\n  g = i.BigInt(1),\n  k = i.BigInt(2),\n  x = i.BigInt(3),\n  I = i.BigInt(5),\n  A = i.BigInt(10),\n  E = i.BigInt(100),\n  O = i.BigInt(997),\n  b = i.BigInt(1e3);\n!function (t) {\n  t.uint8 = \"uint8\", t.uint256 = \"uint256\";\n}(v || (v = {}));\nvar q = ((e = {})[v.uint8] = i.BigInt(\"0xff\"), e[v.uint256] = i.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), e);\nfunction R(t, e) {\n  for (var n = 0; n < e.length; n++) {\n    var r = e[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n  }\n}\nfunction C(t, e, n) {\n  return e && R(t.prototype, e), n && R(t, n), t;\n}\nfunction P() {\n  return (P = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nfunction N(t, e) {\n  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;\n}\nfunction U(t) {\n  return (U = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  })(t);\n}\nfunction _(t, e) {\n  return (_ = Object.setPrototypeOf || function (t, e) {\n    return t.__proto__ = e, t;\n  })(t, e);\n}\nfunction S() {\n  if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n  if (Reflect.construct.sham) return !1;\n  if (\"function\" == typeof Proxy) return !0;\n  try {\n    return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;\n  } catch (t) {\n    return !1;\n  }\n}\nfunction F(t, e, n) {\n  return (F = S() ? Reflect.construct : function (t, e, n) {\n    var r = [null];\n    r.push.apply(r, e);\n    var o = new (Function.bind.apply(t, r))();\n    return n && _(o, n.prototype), o;\n  }).apply(null, arguments);\n}\nfunction B(t) {\n  var e = \"function\" == typeof Map ? new Map() : void 0;\n  return (B = function (t) {\n    if (null === t || -1 === Function.toString.call(t).indexOf(\"[native code]\")) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== e) {\n      if (e.has(t)) return e.get(t);\n      e.set(t, n);\n    }\n    function n() {\n      return F(t, arguments, U(this).constructor);\n    }\n    return n.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: n,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), _(n, t);\n  })(t);\n}\nfunction D(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\nfunction j(t, e) {\n  (null == e || e > t.length) && (e = t.length);\n  for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];\n  return r;\n}\nfunction W(t, e) {\n  var n;\n  if (\"undefined\" == typeof Symbol || null == t[Symbol.iterator]) {\n    if (Array.isArray(t) || (n = function (t, e) {\n      if (t) {\n        if (\"string\" == typeof t) return j(t, void 0);\n        var n = Object.prototype.toString.call(t).slice(8, -1);\n        return \"Object\" === n && t.constructor && (n = t.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(t) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? j(t, void 0) : void 0;\n      }\n    }(t)) || e && t && \"number\" == typeof t.length) {\n      n && (t = n);\n      var r = 0;\n      return function () {\n        return r >= t.length ? {\n          done: !0\n        } : {\n          done: !1,\n          value: t[r++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  return (n = t[Symbol.iterator]()).next.bind(n);\n}\nvar H = \"setPrototypeOf\" in Object,\n  M = function (t) {\n    function e() {\n      var n;\n      return (n = t.call(this) || this).isInsufficientReservesError = !0, n.name = n.constructor.name, H && Object.setPrototypeOf(D(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n    }\n    return N(e, t), e;\n  }(B(Error)),\n  L = function (t) {\n    function e() {\n      var n;\n      return (n = t.call(this) || this).isInsufficientInputAmountError = !0, n.name = n.constructor.name, H && Object.setPrototypeOf(D(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n    }\n    return N(e, t), e;\n  }(B(Error));\nfunction X(t, e) {\n  i.greaterThanOrEqual(t, T) || a(!1), i.lessThanOrEqual(t, q[e]) || a(!1);\n}\nfunction Y(t) {\n  try {\n    return u.getAddress(t);\n  } catch (t) {\n    a(!1);\n  }\n}\nfunction K(t) {\n  return t instanceof i ? t : i.BigInt(\"bigint\" == typeof t ? t.toString() : t);\n}\nfunction V(t) {\n  X(t, v.uint256);\n  var e,\n    n = T;\n  if (i.greaterThan(t, x)) for (n = t, e = i.add(i.divide(t, k), g); i.lessThan(e, n);) n = e, e = i.divide(i.add(i.divide(t, e), e), k);else i.notEqual(t, T) && (n = g);\n  return n;\n}\nfunction G(t, e, n, r) {\n  if (n > 0 || a(!1), t.length <= n || a(!1), 0 === t.length) return t.push(e), null;\n  var o = t.length === n;\n  if (o && r(t[t.length - 1], e) <= 0) return e;\n  for (var i = 0, u = t.length; i < u;) {\n    var s = i + u >>> 1;\n    r(t[s], e) <= 0 ? i = s + 1 : u = s;\n  }\n  return t.splice(i, 0, e), o ? t.pop() : null;\n}\nvar J,\n  Q = function (t, e, n) {\n    X(i.BigInt(t), v.uint8), this.decimals = t, this.symbol = e, this.name = n;\n  },\n  $ = Q.ETHER = new Q(18, \"IP\", \"IP\"),\n  z = function (t) {\n    function e(e, n, r, o, i) {\n      var a;\n      return (a = t.call(this, r, o, i) || this).chainId = e, a.address = Y(n), a;\n    }\n    N(e, t);\n    var n = e.prototype;\n    return n.equals = function (t) {\n      return this === t || this.chainId === t.chainId && this.address === t.address;\n    }, n.sortsBefore = function (t) {\n      return this.chainId !== t.chainId && a(!1), this.address === t.address && a(!1), this.address.toLowerCase() < t.address.toLowerCase();\n    }, e;\n  }(Q);\nfunction Z(t, e) {\n  return t instanceof z && e instanceof z ? t.equals(e) : !(t instanceof z || e instanceof z || t !== e);\n}\nvar tt,\n  et,\n  nt = ((J = {})[exports.ChainId.MAINNET] = new z(exports.ChainId.MAINNET, \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.ROPSTEN] = new z(exports.ChainId.ROPSTEN, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.RINKEBY] = new z(exports.ChainId.RINKEBY, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.GÖRLI] = new z(exports.ChainId.GÖRLI, \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.KOVAN] = new z(exports.ChainId.KOVAN, \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.Sepolia] = new z(exports.ChainId.Sepolia, \"0xC190f8492DEe0e427015Bbe7B4219F497f69b117\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.UniChain] = new z(exports.ChainId.UniChain, \"0x4200000000000000000000000000000000000006\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.Artio] = new z(exports.ChainId.Artio, \"0x7507c1dc16935B82698e4C63f2746A2fCf994dF8\", 18, \"WBERA\", \"Wrapped BERA\"), J[exports.ChainId.BERA] = new z(exports.ChainId.BERA, \"0x6969696969696969696969696969696969696969\", 18, \"WBERA\", \"Wrapped BERA\"), J[exports.ChainId.STORYTestnet] = new z(exports.ChainId.STORYTestnet, \"0x1514000000000000000000000000000000000000\", 18, \"WIP\", \"Wrapped IP\"), J[exports.ChainId.STORY] = new z(exports.ChainId.STORY, \"0x1514000000000000000000000000000000000000\", 18, \"WIP\", \"Wrapped IP\"), J),\n  rt = c(p),\n  ot = c(s),\n  it = ((tt = {})[exports.Rounding.ROUND_DOWN] = rt.ROUND_DOWN, tt[exports.Rounding.ROUND_HALF_UP] = rt.ROUND_HALF_UP, tt[exports.Rounding.ROUND_UP] = rt.ROUND_UP, tt),\n  at = ((et = {})[exports.Rounding.ROUND_DOWN] = 0, et[exports.Rounding.ROUND_HALF_UP] = 1, et[exports.Rounding.ROUND_UP] = 3, et),\n  ut = function () {\n    function t(t, e) {\n      void 0 === e && (e = g), this.numerator = K(t), this.denominator = K(e);\n    }\n    var e = t.prototype;\n    return e.invert = function () {\n      return new t(this.denominator, this.numerator);\n    }, e.add = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.equal(this.denominator, n.denominator) ? new t(i.add(this.numerator, n.numerator), this.denominator) : new t(i.add(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)), i.multiply(this.denominator, n.denominator));\n    }, e.subtract = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.equal(this.denominator, n.denominator) ? new t(i.subtract(this.numerator, n.numerator), this.denominator) : new t(i.subtract(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)), i.multiply(this.denominator, n.denominator));\n    }, e.lessThan = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.lessThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n    }, e.equalTo = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.equal(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n    }, e.greaterThan = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return i.greaterThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n    }, e.multiply = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return new t(i.multiply(this.numerator, n.numerator), i.multiply(this.denominator, n.denominator));\n    }, e.divide = function (e) {\n      var n = e instanceof t ? e : new t(K(e));\n      return new t(i.multiply(this.numerator, n.denominator), i.multiply(this.denominator, n.numerator));\n    }, e.toSignificant = function (t, e, n) {\n      void 0 === e && (e = {\n        groupSeparator: \"\"\n      }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || a(!1), t > 0 || a(!1), rt.set({\n        precision: t + 1,\n        rounding: it[n]\n      });\n      var r = new rt(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(t);\n      return r.toFormat(r.decimalPlaces(), e);\n    }, e.toFixed = function (t, e, n) {\n      return void 0 === e && (e = {\n        groupSeparator: \"\"\n      }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || a(!1), t >= 0 || a(!1), ot.DP = t, ot.RM = at[n], new ot(this.numerator.toString()).div(this.denominator.toString()).toFormat(t, e);\n    }, C(t, [{\n      key: \"quotient\",\n      get: function () {\n        return i.divide(this.numerator, this.denominator);\n      }\n    }, {\n      key: \"remainder\",\n      get: function () {\n        return new t(i.remainder(this.numerator, this.denominator), this.denominator);\n      }\n    }]), t;\n  }(),\n  st = c(s),\n  ct = function (t) {\n    function e(e, n) {\n      var r,\n        o = K(n);\n      return X(o, v.uint256), (r = t.call(this, o, i.exponentiate(A, i.BigInt(e.decimals))) || this).currency = e, r;\n    }\n    N(e, t), e.ether = function (t) {\n      return new e($, t);\n    };\n    var n = e.prototype;\n    return n.add = function (t) {\n      return Z(this.currency, t.currency) || a(!1), new e(this.currency, i.add(this.raw, t.raw));\n    }, n.subtract = function (t) {\n      return Z(this.currency, t.currency) || a(!1), new e(this.currency, i.subtract(this.raw, t.raw));\n    }, n.toSignificant = function (e, n, r) {\n      return void 0 === e && (e = 6), void 0 === r && (r = exports.Rounding.ROUND_DOWN), t.prototype.toSignificant.call(this, e, n, r);\n    }, n.toFixed = function (e, n, r) {\n      return void 0 === e && (e = this.currency.decimals), void 0 === r && (r = exports.Rounding.ROUND_DOWN), e <= this.currency.decimals || a(!1), t.prototype.toFixed.call(this, e, n, r);\n    }, n.toExact = function (t) {\n      return void 0 === t && (t = {\n        groupSeparator: \"\"\n      }), st.DP = this.currency.decimals, new st(this.numerator.toString()).div(this.denominator.toString()).toFormat(t);\n    }, C(e, [{\n      key: \"raw\",\n      get: function () {\n        return this.numerator;\n      }\n    }]), e;\n  }(ut),\n  pt = function (t) {\n    function e(e, n) {\n      var r;\n      return (r = t.call(this, e, n) || this).token = e, r;\n    }\n    N(e, t);\n    var n = e.prototype;\n    return n.add = function (t) {\n      return this.token.equals(t.token) || a(!1), new e(this.token, i.add(this.raw, t.raw));\n    }, n.subtract = function (t) {\n      return this.token.equals(t.token) || a(!1), new e(this.token, i.subtract(this.raw, t.raw));\n    }, e;\n  }(ct),\n  dt = function (t) {\n    function e(e, n, r, o) {\n      var a;\n      return (a = t.call(this, o, r) || this).baseCurrency = e, a.quoteCurrency = n, a.scalar = new ut(i.exponentiate(A, i.BigInt(e.decimals)), i.exponentiate(A, i.BigInt(n.decimals))), a;\n    }\n    N(e, t), e.fromRoute = function (t) {\n      for (var n, r = [], o = W(t.pairs.entries()); !(n = o()).done;) {\n        var i = n.value,\n          a = i[1];\n        r.push(t.path[i[0]].equals(a.token0) ? new e(a.reserve0.currency, a.reserve1.currency, a.reserve0.raw, a.reserve1.raw) : new e(a.reserve1.currency, a.reserve0.currency, a.reserve1.raw, a.reserve0.raw));\n      }\n      return r.slice(1).reduce(function (t, e) {\n        return t.multiply(e);\n      }, r[0]);\n    };\n    var n = e.prototype;\n    return n.invert = function () {\n      return new e(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n    }, n.multiply = function (n) {\n      Z(this.quoteCurrency, n.baseCurrency) || a(!1);\n      var r = t.prototype.multiply.call(this, n);\n      return new e(this.baseCurrency, n.quoteCurrency, r.denominator, r.numerator);\n    }, n.quote = function (e) {\n      return Z(e.currency, this.baseCurrency) || a(!1), this.quoteCurrency instanceof z ? new pt(this.quoteCurrency, t.prototype.multiply.call(this, e.raw).quotient) : ct.ether(t.prototype.multiply.call(this, e.raw).quotient);\n    }, n.toSignificant = function (t, e, n) {\n      return void 0 === t && (t = 6), this.adjusted.toSignificant(t, e, n);\n    }, n.toFixed = function (t, e, n) {\n      return void 0 === t && (t = 4), this.adjusted.toFixed(t, e, n);\n    }, C(e, [{\n      key: \"raw\",\n      get: function () {\n        return new ut(this.numerator, this.denominator);\n      }\n    }, {\n      key: \"adjusted\",\n      get: function () {\n        return t.prototype.multiply.call(this, this.scalar);\n      }\n    }]), e;\n  }(ut),\n  ht = {},\n  ft = function () {\n    function t(e, n) {\n      var r = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n      this.liquidityToken = new z(r[0].token.chainId, t.getAddress(r[0].token, r[1].token), 18, \"UNI-V2\", \"Uniswap V2\"), this.tokenAmounts = r;\n    }\n    t.getAddress = function (t, e) {\n      var n,\n        r,\n        o,\n        i,\n        a,\n        s = t.sortsBefore(e) ? [t, e] : [e, t];\n      return void 0 === (null === (n = ht) || void 0 === n || null === (r = n[s[0].address]) || void 0 === r ? void 0 : r[s[1].address]) && (ht = P({}, ht, ((a = {})[s[0].address] = P({}, null === (o = ht) || void 0 === o ? void 0 : o[s[0].address], ((i = {})[s[1].address] = u.getCreate2Address(\"0xe9B1b1d6aa91c099a31c4520f746ca503A0848C6\", d.keccak256([\"bytes\"], [d.pack([\"address\", \"address\"], [s[0].address, s[1].address])]), y), i)), a))), ht[s[0].address][s[1].address];\n    };\n    var e = t.prototype;\n    return e.involvesToken = function (t) {\n      return t.equals(this.token0) || t.equals(this.token1);\n    }, e.priceOf = function (t) {\n      return this.involvesToken(t) || a(!1), t.equals(this.token0) ? this.token0Price : this.token1Price;\n    }, e.reserveOf = function (t) {\n      return this.involvesToken(t) || a(!1), t.equals(this.token0) ? this.reserve0 : this.reserve1;\n    }, e.getOutputAmount = function (e) {\n      if (this.involvesToken(e.token) || a(!1), i.equal(this.reserve0.raw, T) || i.equal(this.reserve1.raw, T)) throw new M();\n      var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        o = i.multiply(e.raw, O),\n        u = i.multiply(o, r.raw),\n        s = i.add(i.multiply(n.raw, b), o),\n        c = new pt(e.token.equals(this.token0) ? this.token1 : this.token0, i.divide(u, s));\n      if (i.equal(c.raw, T)) throw new L();\n      return [c, new t(n.add(e), r.subtract(c))];\n    }, e.getInputAmount = function (e) {\n      if (this.involvesToken(e.token) || a(!1), i.equal(this.reserve0.raw, T) || i.equal(this.reserve1.raw, T) || i.greaterThanOrEqual(e.raw, this.reserveOf(e.token).raw)) throw new M();\n      var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        o = i.multiply(i.multiply(r.raw, e.raw), b),\n        u = i.multiply(i.subtract(n.raw, e.raw), O),\n        s = new pt(e.token.equals(this.token0) ? this.token1 : this.token0, i.add(i.divide(o, u), g));\n      return [s, new t(r.add(s), n.subtract(e))];\n    }, e.getLiquidityMinted = function (t, e, n) {\n      t.token.equals(this.liquidityToken) || a(!1);\n      var r,\n        o = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n      if (o[0].token.equals(this.token0) && o[1].token.equals(this.token1) || a(!1), i.equal(t.raw, T)) r = i.subtract(V(i.multiply(o[0].raw, o[1].raw)), w);else {\n        var u = i.divide(i.multiply(o[0].raw, t.raw), this.reserve0.raw),\n          s = i.divide(i.multiply(o[1].raw, t.raw), this.reserve1.raw);\n        r = i.lessThanOrEqual(u, s) ? u : s;\n      }\n      if (!i.greaterThan(r, T)) throw new L();\n      return new pt(this.liquidityToken, r);\n    }, e.getLiquidityValue = function (t, e, n, r, o) {\n      var u;\n      if (void 0 === r && (r = !1), this.involvesToken(t) || a(!1), e.token.equals(this.liquidityToken) || a(!1), n.token.equals(this.liquidityToken) || a(!1), i.lessThanOrEqual(n.raw, e.raw) || a(!1), r) {\n        o || a(!1);\n        var s = K(o);\n        if (i.equal(s, T)) u = e;else {\n          var c = V(i.multiply(this.reserve0.raw, this.reserve1.raw)),\n            p = V(s);\n          if (i.greaterThan(c, p)) {\n            var d = i.multiply(e.raw, i.subtract(c, p)),\n              h = i.add(i.multiply(c, I), p),\n              f = i.divide(d, h);\n            u = e.add(new pt(this.liquidityToken, f));\n          } else u = e;\n        }\n      } else u = e;\n      return new pt(t, i.divide(i.multiply(n.raw, this.reserveOf(t).raw), u.raw));\n    }, C(t, [{\n      key: \"token0Price\",\n      get: function () {\n        return new dt(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n      }\n    }, {\n      key: \"token1Price\",\n      get: function () {\n        return new dt(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n      }\n    }, {\n      key: \"chainId\",\n      get: function () {\n        return this.token0.chainId;\n      }\n    }, {\n      key: \"token0\",\n      get: function () {\n        return this.tokenAmounts[0].token;\n      }\n    }, {\n      key: \"token1\",\n      get: function () {\n        return this.tokenAmounts[1].token;\n      }\n    }, {\n      key: \"reserve0\",\n      get: function () {\n        return this.tokenAmounts[0];\n      }\n    }, {\n      key: \"reserve1\",\n      get: function () {\n        return this.tokenAmounts[1];\n      }\n    }]), t;\n  }(),\n  lt = function () {\n    function t(t, e, n) {\n      t.length > 0 || a(!1), t.every(function (e) {\n        return e.chainId === t[0].chainId;\n      }) || a(!1), e instanceof z && t[0].involvesToken(e) || e === $ && t[0].involvesToken(nt[t[0].chainId]) || a(!1), void 0 === n || n instanceof z && t[t.length - 1].involvesToken(n) || n === $ && t[t.length - 1].involvesToken(nt[t[0].chainId]) || a(!1);\n      for (var r, o = [e instanceof z ? e : nt[t[0].chainId]], i = W(t.entries()); !(r = i()).done;) {\n        var u = r.value,\n          s = u[1],\n          c = o[u[0]];\n        c.equals(s.token0) || c.equals(s.token1) || a(!1);\n        var p = c.equals(s.token0) ? s.token1 : s.token0;\n        o.push(p);\n      }\n      this.pairs = t, this.path = o, this.midPrice = dt.fromRoute(this), this.input = e, this.output = null != n ? n : o[o.length - 1];\n    }\n    return C(t, [{\n      key: \"chainId\",\n      get: function () {\n        return this.pairs[0].chainId;\n      }\n    }]), t;\n  }(),\n  mt = new ut(E),\n  vt = function (t) {\n    function e() {\n      return t.apply(this, arguments) || this;\n    }\n    N(e, t);\n    var n = e.prototype;\n    return n.toSignificant = function (t, e, n) {\n      return void 0 === t && (t = 5), this.multiply(mt).toSignificant(t, e, n);\n    }, n.toFixed = function (t, e, n) {\n      return void 0 === t && (t = 2), this.multiply(mt).toFixed(t, e, n);\n    }, e;\n  }(ut);\nfunction yt(t, e) {\n  return Z(t.inputAmount.currency, e.inputAmount.currency) || a(!1), Z(t.outputAmount.currency, e.outputAmount.currency) || a(!1), t.outputAmount.equalTo(e.outputAmount) ? t.inputAmount.equalTo(e.inputAmount) ? 0 : t.inputAmount.lessThan(e.inputAmount) ? -1 : 1 : t.outputAmount.lessThan(e.outputAmount) ? 1 : -1;\n}\nfunction wt(t, e) {\n  var n = yt(t, e);\n  return 0 !== n ? n : t.priceImpact.lessThan(e.priceImpact) ? -1 : t.priceImpact.greaterThan(e.priceImpact) ? 1 : t.route.path.length - e.route.path.length;\n}\nfunction Tt(t, e) {\n  return t instanceof pt ? t : t.currency === $ ? new pt(nt[e], t.raw) : void a(!1);\n}\nfunction gt(t, e) {\n  return t instanceof z ? t : t === $ ? nt[e] : void a(!1);\n}\nvar kt = function () {\n  function t(t, e, n) {\n    var r,\n      o,\n      i,\n      u = new Array(t.path.length),\n      s = new Array(t.pairs.length);\n    if (n === exports.TradeType.EXACT_INPUT) {\n      Z(e.currency, t.input) || a(!1), u[0] = Tt(e, t.chainId);\n      for (var c = 0; c < t.path.length - 1; c++) {\n        var p = t.pairs[c].getOutputAmount(u[c]),\n          d = p[1];\n        u[c + 1] = p[0], s[c] = d;\n      }\n    } else {\n      Z(e.currency, t.output) || a(!1), u[u.length - 1] = Tt(e, t.chainId);\n      for (var h = t.path.length - 1; h > 0; h--) {\n        var f = t.pairs[h - 1].getInputAmount(u[h]),\n          l = f[1];\n        u[h - 1] = f[0], s[h - 1] = l;\n      }\n    }\n    this.route = t, this.tradeType = n, this.inputAmount = n === exports.TradeType.EXACT_INPUT ? e : t.input === $ ? ct.ether(u[0].raw) : u[0], this.outputAmount = n === exports.TradeType.EXACT_OUTPUT ? e : t.output === $ ? ct.ether(u[u.length - 1].raw) : u[u.length - 1], this.executionPrice = new dt(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw), this.nextMidPrice = dt.fromRoute(new lt(s, t.input)), this.priceImpact = (r = this.outputAmount, i = (o = t.midPrice.raw.multiply(this.inputAmount.raw)).subtract(r.raw).divide(o), new vt(i.numerator, i.denominator));\n  }\n  t.exactIn = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_INPUT);\n  }, t.exactOut = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_OUTPUT);\n  };\n  var e = t.prototype;\n  return e.minimumAmountOut = function (t) {\n    if (t.lessThan(T) && a(!1), this.tradeType === exports.TradeType.EXACT_OUTPUT) return this.outputAmount;\n    var e = new ut(g).add(t).invert().multiply(this.outputAmount.raw).quotient;\n    return this.outputAmount instanceof pt ? new pt(this.outputAmount.token, e) : ct.ether(e);\n  }, e.maximumAmountIn = function (t) {\n    if (t.lessThan(T) && a(!1), this.tradeType === exports.TradeType.EXACT_INPUT) return this.inputAmount;\n    var e = new ut(g).add(t).multiply(this.inputAmount.raw).quotient;\n    return this.inputAmount instanceof pt ? new pt(this.inputAmount.token, e) : ct.ether(e);\n  }, t.bestTradeExactIn = function (e, n, r, o, i, u, s) {\n    var c = void 0 === o ? {} : o,\n      p = c.maxNumResults,\n      d = void 0 === p ? 3 : p,\n      h = c.maxHops,\n      f = void 0 === h ? 3 : h;\n    void 0 === i && (i = []), void 0 === u && (u = n), void 0 === s && (s = []), e.length > 0 || a(!1), f > 0 || a(!1), u === n || i.length > 0 || a(!1);\n    var l = n instanceof pt ? n.token.chainId : r instanceof z ? r.chainId : void 0;\n    void 0 === l && a(!1);\n    for (var m = Tt(n, l), v = gt(r, l), y = 0; y < e.length; y++) {\n      var w = e[y];\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var g = void 0;\n        try {\n          g = w.getOutputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientInputAmountError) continue;\n          throw t;\n        }\n        if (g.token.equals(v)) G(s, new t(new lt([].concat(i, [w]), u.currency, r), u, exports.TradeType.EXACT_INPUT), d, wt);else if (f > 1 && e.length > 1) {\n          var k = e.slice(0, y).concat(e.slice(y + 1, e.length));\n          t.bestTradeExactIn(k, g, r, {\n            maxNumResults: d,\n            maxHops: f - 1\n          }, [].concat(i, [w]), u, s);\n        }\n      }\n    }\n    return s;\n  }, t.bestTradeExactOut = function (e, n, r, o, i, u, s) {\n    var c = void 0 === o ? {} : o,\n      p = c.maxNumResults,\n      d = void 0 === p ? 3 : p,\n      h = c.maxHops,\n      f = void 0 === h ? 3 : h;\n    void 0 === i && (i = []), void 0 === u && (u = r), void 0 === s && (s = []), e.length > 0 || a(!1), f > 0 || a(!1), u === r || i.length > 0 || a(!1);\n    var l = r instanceof pt ? r.token.chainId : n instanceof z ? n.chainId : void 0;\n    void 0 === l && a(!1);\n    for (var m = Tt(r, l), v = gt(n, l), y = 0; y < e.length; y++) {\n      var w = e[y];\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var g = void 0;\n        try {\n          g = w.getInputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientReservesError) continue;\n          throw t;\n        }\n        if (g.token.equals(v)) G(s, new t(new lt([w].concat(i), n, u.currency), u, exports.TradeType.EXACT_OUTPUT), d, wt);else if (f > 1 && e.length > 1) {\n          var k = e.slice(0, y).concat(e.slice(y + 1, e.length));\n          t.bestTradeExactOut(k, n, g, {\n            maxNumResults: d,\n            maxHops: f - 1\n          }, [w].concat(i), u, s);\n        }\n      }\n    }\n    return s;\n  }, t;\n}();\nfunction xt(t) {\n  return \"0x\" + t.raw.toString(16);\n}\nvar It,\n  At = function () {\n    function t() {}\n    return t.swapCallParameters = function (t, e) {\n      var n = t.inputAmount.currency === $,\n        r = t.outputAmount.currency === $;\n      n && r && a(!1), e.ttl > 0 || a(!1);\n      var o,\n        i,\n        u,\n        s = Y(e.recipient),\n        c = xt(t.maximumAmountIn(e.allowedSlippage)),\n        p = xt(t.minimumAmountOut(e.allowedSlippage)),\n        d = t.route.path.map(function (t) {\n          return t.address;\n        }),\n        h = \"0x\" + (Math.floor(new Date().getTime() / 1e3) + e.ttl).toString(16),\n        f = Boolean(e.feeOnTransfer);\n      switch (t.tradeType) {\n        case exports.TradeType.EXACT_INPUT:\n          n ? (o = f ? \"swapExactETHForTokensSupportingFeeOnTransferTokens\" : \"swapExactETHForTokens\", i = [p, d, s, h], u = c) : r ? (o = f ? \"swapExactTokensForETHSupportingFeeOnTransferTokens\" : \"swapExactTokensForETH\", i = [c, p, d, s, h], u = \"0x0\") : (o = f ? \"swapExactTokensForTokensSupportingFeeOnTransferTokens\" : \"swapExactTokensForTokens\", i = [c, p, d, s, h], u = \"0x0\");\n          break;\n        case exports.TradeType.EXACT_OUTPUT:\n          f && a(!1), n ? (o = \"swapETHForExactTokens\", i = [p, d, s, h], u = c) : r ? (o = \"swapTokensForExactETH\", i = [p, c, d, s, h], u = \"0x0\") : (o = \"swapTokensForExactTokens\", i = [p, c, d, s, h], u = \"0x0\");\n      }\n      return {\n        methodName: o,\n        args: i,\n        value: u\n      };\n    }, t;\n  }(),\n  Et = [{\n    constant: !0,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{\n      name: \"\",\n      type: \"uint8\"\n    }],\n    payable: !1,\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    constant: !0,\n    inputs: [{\n      name: \"\",\n      type: \"address\"\n    }],\n    name: \"balanceOf\",\n    outputs: [{\n      name: \"\",\n      type: \"uint256\"\n    }],\n    payable: !1,\n    stateMutability: \"view\",\n    type: \"function\"\n  }],\n  Ot = ((It = {})[exports.ChainId.MAINNET] = {\n    \"0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A\": 9\n  }, It),\n  bt = function () {\n    function t() {}\n    return t.fetchTokenData = function (t, e, n, r, o) {\n      try {\n        var i,\n          a,\n          u = function (n) {\n            return new z(t, e, n, r, o);\n          };\n        void 0 === n && (n = l.getDefaultProvider(f.getNetwork(t)));\n        var s = \"number\" == typeof (null === (i = Ot) || void 0 === i || null === (a = i[t]) || void 0 === a ? void 0 : a[e]);\n        return Promise.resolve(s ? u(Ot[t][e]) : Promise.resolve(new h.Contract(e, Et, n).decimals().then(function (n) {\n          var r, o, i;\n          return Ot = P({}, Ot, ((i = {})[t] = P({}, null === (r = Ot) || void 0 === r ? void 0 : r[t], ((o = {})[e] = n, o)), i)), n;\n        })).then(u));\n      } catch (t) {\n        return Promise.reject(t);\n      }\n    }, t.fetchPairData = function (t, e, n) {\n      try {\n        void 0 === n && (n = l.getDefaultProvider(f.getNetwork(t.chainId))), t.chainId !== e.chainId && a(!1);\n        var r = ft.getAddress(t, e);\n        return Promise.resolve(new h.Contract(r, m.abi, n).getReserves()).then(function (n) {\n          var r = n[0],\n            o = n[1],\n            i = t.sortsBefore(e) ? [r, o] : [o, r];\n          return new ft(new pt(t, i[0]), new pt(e, i[1]));\n        });\n      } catch (t) {\n        return Promise.reject(t);\n      }\n    }, t;\n  }();\nexports.JSBI = i, exports.Currency = Q, exports.CurrencyAmount = ct, exports.ETHER = $, exports.FACTORY_ADDRESS = \"0xe9B1b1d6aa91c099a31c4520f746ca503A0848C6\", exports.Fetcher = bt, exports.Fraction = ut, exports.INIT_CODE_HASH = y, exports.InsufficientInputAmountError = L, exports.InsufficientReservesError = M, exports.MINIMUM_LIQUIDITY = w, exports.Pair = ft, exports.Percent = vt, exports.Price = dt, exports.Route = lt, exports.Router = At, exports.Token = z, exports.TokenAmount = pt, exports.Trade = kt, exports.WETH = nt, exports.currencyEquals = Z, exports.inputOutputComparator = yt, exports.tradeComparator = wt;","map":{"version":3,"names":["n","r","o","i","t","require","a","u","s","c","p","d","h","f","l","m","exports","ChainId","MAINNET","ROPSTEN","RINKEBY","KOVAN","Sepolia","UniChain","Artio","BERA","STORYTestnet","STORY","TradeType","EXACT_INPUT","EXACT_OUTPUT","Rounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","v","y","w","BigInt","T","g","k","x","I","A","E","O","b","uint8","uint256","q","e","R","length","enumerable","configurable","writable","Object","defineProperty","key","C","prototype","P","assign","arguments","hasOwnProperty","call","apply","N","create","constructor","__proto__","U","setPrototypeOf","getPrototypeOf","_","S","Reflect","construct","sham","Proxy","Date","toString","F","push","Function","bind","B","Map","indexOf","TypeError","has","get","set","value","D","ReferenceError","j","Array","W","Symbol","iterator","isArray","slice","name","from","test","done","next","H","M","isInsufficientReservesError","Error","L","isInsufficientInputAmountError","X","greaterThanOrEqual","lessThanOrEqual","Y","getAddress","K","V","greaterThan","add","divide","lessThan","notEqual","G","splice","pop","J","Q","Currency","decimals","symbol","$","ETHER","z","chainId","address","equals","sortsBefore","toLowerCase","Z","tt","et","nt","GÖRLI","rt","ot","it","at","ut","numerator","denominator","invert","equal","multiply","subtract","equalTo","toSignificant","groupSeparator","Number","isInteger","precision","rounding","div","toSignificantDigits","toFormat","decimalPlaces","toFixed","DP","RM","remainder","st","ct","exponentiate","currency","ether","raw","toExact","pt","token","dt","baseCurrency","quoteCurrency","scalar","fromRoute","pairs","entries","path","token0","reserve0","reserve1","reduce","quote","quotient","adjusted","ht","ft","liquidityToken","tokenAmounts","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","getInputAmount","getLiquidityMinted","getLiquidityValue","lt","every","midPrice","input","output","mt","vt","yt","inputAmount","outputAmount","wt","priceImpact","route","Tt","gt","kt","tradeType","executionPrice","nextMidPrice","exactIn","exactOut","minimumAmountOut","maximumAmountIn","bestTradeExactIn","maxNumResults","maxHops","concat","bestTradeExactOut","xt","It","At","swapCallParameters","ttl","recipient","allowedSlippage","map","Math","floor","getTime","Boolean","feeOnTransfer","methodName","args","Et","constant","inputs","outputs","type","payable","stateMutability","Ot","bt","fetchTokenData","getDefaultProvider","getNetwork","Promise","resolve","Contract","then","reject","fetchPairData","abi","getReserves","JSBI","CurrencyAmount","FACTORY_ADDRESS","Fetcher","Fraction","INIT_CODE_HASH","InsufficientInputAmountError","InsufficientReservesError","MINIMUM_LIQUIDITY","Pair","Percent","Price","Route","Router","Token","TokenAmount","Trade","WETH","currencyEquals","inputOutputComparator","tradeComparator"],"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  Sepolia = 11155111,\n  UniChain = 130,\n  Artio = 80084,\n  BERA = 80094,\n  STORYTestnet = 1315,\n  STORY = 1514\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xe9B1b1d6aa91c099a31c4520f746ca503A0848C6'\n\nexport const INIT_CODE_HASH = '0x95d460835c5c71dce32bcaeeec5dbca25a8644524669d9b7c5dc90570f19e5ae'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'IP', 'IP')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.Sepolia]: new Token(ChainId.Sepolia, '0xC190f8492DEe0e427015Bbe7B4219F497f69b117', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.UniChain]: new Token(ChainId.UniChain, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.Artio]: new Token(ChainId.Artio, '0x7507c1dc16935B82698e4C63f2746A2fCf994dF8', 18, 'WBERA', 'Wrapped BERA'),\n  [ChainId.BERA]: new Token(ChainId.BERA, '0x6969696969696969696969696969696969696969', 18, 'WBERA', 'Wrapped BERA'),\n  [ChainId.STORYTestnet]: new Token(ChainId.STORYTestnet, '0x1514000000000000000000000000000000000000', 18, 'WIP', 'Wrapped IP'),\n  [ChainId.STORY]: new Token(ChainId.STORY, '0x1514000000000000000000000000000000000000', 18, 'WIP', 'Wrapped IP')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}