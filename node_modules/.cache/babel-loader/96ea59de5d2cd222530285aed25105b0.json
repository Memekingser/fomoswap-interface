{"ast":null,"code":"import{CurrencyAmount,ETHER,JSBI,Percent,Price}from'fomoswap-artio';import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{PairState,usePair}from'../../data/Reserves';import{useTotalSupply}from'../../data/TotalSupply';import{useActiveWeb3React}from'../../hooks';import{wrappedCurrency,wrappedCurrencyAmount}from'../../utils/wrappedCurrency';import{tryParseAmount}from'../swap/hooks';import{useCurrencyBalances}from'../wallet/hooks';import{Field,typeInput}from'./actions';const ZERO=JSBI.BigInt(0);export function useMintState(){return useSelector(state=>state.mint);}export function useDerivedMintInfo(currencyA,currencyB){var _currencyBalances$Fie,_currencyBalances$Fie2;const{account,chainId}=useActiveWeb3React();const{independentField,typedValue,otherTypedValue}=useMintState();const dependentField=independentField===Field.CURRENCY_A?Field.CURRENCY_B:Field.CURRENCY_A;// tokens\nconst currencies=useMemo(()=>({[Field.CURRENCY_A]:currencyA!==null&&currencyA!==void 0?currencyA:undefined,[Field.CURRENCY_B]:currencyB!==null&&currencyB!==void 0?currencyB:undefined}),[currencyA,currencyB]);// pair\nconst[pairState,pair]=usePair(currencies[Field.CURRENCY_A],currencies[Field.CURRENCY_B]);const totalSupply=useTotalSupply(pair===null||pair===void 0?void 0:pair.liquidityToken);const noLiquidity=pairState===PairState.NOT_EXISTS||Boolean(totalSupply&&JSBI.equal(totalSupply.raw,ZERO));// balances\nconst balances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,[currencies[Field.CURRENCY_A],currencies[Field.CURRENCY_B]]);const currencyBalances={[Field.CURRENCY_A]:balances[0],[Field.CURRENCY_B]:balances[1]};// amounts\nconst independentAmount=tryParseAmount(typedValue,currencies[independentField]);const dependentAmount=useMemo(()=>{if(noLiquidity){if(otherTypedValue&&currencies[dependentField]){return tryParseAmount(otherTypedValue,currencies[dependentField]);}return;}else if(independentAmount){// we wrap the currencies just to get the price in terms of the other token\nconst wrappedIndependentAmount=wrappedCurrencyAmount(independentAmount,chainId);const[tokenA,tokenB]=[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)];if(tokenA&&tokenB&&wrappedIndependentAmount&&pair){const dependentCurrency=dependentField===Field.CURRENCY_B?currencyB:currencyA;const dependentTokenAmount=dependentField===Field.CURRENCY_B?pair.priceOf(tokenA).quote(wrappedIndependentAmount):pair.priceOf(tokenB).quote(wrappedIndependentAmount);return dependentCurrency===ETHER?CurrencyAmount.ether(dependentTokenAmount.raw):dependentTokenAmount;}return;}else{return;}},[noLiquidity,otherTypedValue,currencies,dependentField,independentAmount,currencyA,chainId,currencyB,pair]);const parsedAmounts={[Field.CURRENCY_A]:independentField===Field.CURRENCY_A?independentAmount:dependentAmount,[Field.CURRENCY_B]:independentField===Field.CURRENCY_A?dependentAmount:independentAmount};const token0Price=pair===null||pair===void 0?void 0:pair.token0Price;const price=useMemo(()=>{if(noLiquidity){const{[Field.CURRENCY_A]:currencyAAmount,[Field.CURRENCY_B]:currencyBAmount}=parsedAmounts;if(currencyAAmount&&currencyBAmount){return new Price(currencyAAmount.currency,currencyBAmount.currency,currencyAAmount.raw,currencyBAmount.raw);}return;}else{return token0Price;}},[noLiquidity,token0Price,parsedAmounts]);// liquidity minted\nconst liquidityMinted=useMemo(()=>{const{[Field.CURRENCY_A]:currencyAAmount,[Field.CURRENCY_B]:currencyBAmount}=parsedAmounts;const[tokenAmountA,tokenAmountB]=[wrappedCurrencyAmount(currencyAAmount,chainId),wrappedCurrencyAmount(currencyBAmount,chainId)];if(pair&&totalSupply&&tokenAmountA&&tokenAmountB){return pair.getLiquidityMinted(totalSupply,tokenAmountA,tokenAmountB);}else{return;}},[parsedAmounts,chainId,pair,totalSupply]);const poolTokenPercentage=useMemo(()=>{if(liquidityMinted&&totalSupply){return new Percent(liquidityMinted.raw,totalSupply.add(liquidityMinted).raw);}else{return;}},[liquidityMinted,totalSupply]);let error;if(!account){error='Connect Wallet';}if(pairState===PairState.INVALID){var _error;error=(_error=error)!==null&&_error!==void 0?_error:'Invalid pair';}if(!parsedAmounts[Field.CURRENCY_A]||!parsedAmounts[Field.CURRENCY_B]){var _error2;error=(_error2=error)!==null&&_error2!==void 0?_error2:'Enter an amount';}const{[Field.CURRENCY_A]:currencyAAmount,[Field.CURRENCY_B]:currencyBAmount}=parsedAmounts;if(currencyAAmount&&(currencyBalances===null||currencyBalances===void 0?void 0:(_currencyBalances$Fie=currencyBalances[Field.CURRENCY_A])===null||_currencyBalances$Fie===void 0?void 0:_currencyBalances$Fie.lessThan(currencyAAmount))){var _currencies$Field$CUR;error='Insufficient '+((_currencies$Field$CUR=currencies[Field.CURRENCY_A])===null||_currencies$Field$CUR===void 0?void 0:_currencies$Field$CUR.symbol)+' balance';}if(currencyBAmount&&(currencyBalances===null||currencyBalances===void 0?void 0:(_currencyBalances$Fie2=currencyBalances[Field.CURRENCY_B])===null||_currencyBalances$Fie2===void 0?void 0:_currencyBalances$Fie2.lessThan(currencyBAmount))){var _currencies$Field$CUR2;error='Insufficient '+((_currencies$Field$CUR2=currencies[Field.CURRENCY_B])===null||_currencies$Field$CUR2===void 0?void 0:_currencies$Field$CUR2.symbol)+' balance';}return{dependentField,currencies,pair,pairState,currencyBalances,parsedAmounts,price,noLiquidity,liquidityMinted,poolTokenPercentage,error};}export function useMintActionHandlers(noLiquidity){const dispatch=useDispatch();const onFieldAInput=useCallback(typedValue=>{dispatch(typeInput({field:Field.CURRENCY_A,typedValue,noLiquidity:noLiquidity===true}));},[dispatch,noLiquidity]);const onFieldBInput=useCallback(typedValue=>{dispatch(typeInput({field:Field.CURRENCY_B,typedValue,noLiquidity:noLiquidity===true}));},[dispatch,noLiquidity]);return{onFieldAInput,onFieldBInput};}","map":{"version":3,"names":["CurrencyAmount","ETHER","JSBI","Percent","Price","useCallback","useMemo","useDispatch","useSelector","PairState","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","wrappedCurrencyAmount","tryParseAmount","useCurrencyBalances","Field","typeInput","ZERO","BigInt","useMintState","state","mint","useDerivedMintInfo","currencyA","currencyB","_currencyBalances$Fie","_currencyBalances$Fie2","account","chainId","independentField","typedValue","otherTypedValue","dependentField","CURRENCY_A","CURRENCY_B","currencies","undefined","pairState","pair","totalSupply","liquidityToken","noLiquidity","NOT_EXISTS","Boolean","equal","raw","balances","currencyBalances","independentAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ether","parsedAmounts","token0Price","price","currencyAAmount","currencyBAmount","currency","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","poolTokenPercentage","add","error","INVALID","_error","_error2","lessThan","_currencies$Field$CUR","symbol","_currencies$Field$CUR2","useMintActionHandlers","dispatch","onFieldAInput","field","onFieldBInput"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/mint/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from 'fomoswap-artio'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PairState, usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>(state => state.mint)\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined\n    }),\n    [currencyA, currencyB]\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B]\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1]\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return\n    } else if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return\n    } else {\n      return\n    }\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount\n  }\n\n  const token0Price = pair?.token0Price\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return\n    } else {\n      return token0Price\n    }\n  }, [noLiquidity, token0Price, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId)\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n    } else {\n      return\n    }\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    } else {\n      return\n    }\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? 'Invalid pair'\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = 'Insufficient ' + currencies[Field.CURRENCY_A]?.symbol + ' balance'\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = 'Insufficient ' + currencies[Field.CURRENCY_B]?.symbol + ' balance'\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  }\n}\n\nexport function useMintActionHandlers(\n  noLiquidity: boolean | undefined\n): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}