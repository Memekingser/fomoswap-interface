{"ast":null,"code":"import { BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants';\nimport { CurrencyAmount, JSBI, Percent, TokenAmount } from 'fomoswap-bera1';\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM } from '../constants';\nimport { Field } from '../state/swap/actions';\nimport { basisPointsToPercent } from './index';\nconst BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000));\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE);\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade) {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade ? undefined : ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(currentFee => currentFee.multiply(INPUT_FRACTION_AFTER_FEE), ONE_HUNDRED_PERCENT));\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined;\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined;\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount = realizedLPFee && trade && (trade.inputAmount instanceof TokenAmount ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient) : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient));\n  return {\n    priceImpactWithoutFee: priceImpactWithoutFeePercent,\n    realizedLPFee: realizedLPFeeAmount\n  };\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(trade, allowedSlippage) {\n  const pct = basisPointsToPercent(allowedSlippage);\n  return {\n    [Field.INPUT]: trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade === null || trade === void 0 ? void 0 : trade.minimumAmountOut(pct)\n  };\n}\nexport function warningSeverity(priceImpact) {\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT))) return 4;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH))) return 3;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM))) return 2;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_LOW))) return 1;\n  return 0;\n}\nexport function formatExecutionPrice(trade, inverted) {\n  if (!trade) {\n    return '';\n  }\n  return inverted ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${trade.outputAmount.currency.symbol}` : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${trade.inputAmount.currency.symbol}`;\n}","map":{"version":3,"names":["BLOCKED_PRICE_IMPACT_NON_EXPERT","CurrencyAmount","JSBI","Percent","TokenAmount","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","Field","basisPointsToPercent","BASE_FEE","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","computeTradePriceBreakdown","trade","realizedLPFee","undefined","route","pairs","reduce","currentFee","multiply","priceImpactWithoutFeeFraction","priceImpact","priceImpactWithoutFeePercent","numerator","denominator","realizedLPFeeAmount","inputAmount","token","raw","quotient","ether","priceImpactWithoutFee","computeSlippageAdjustedAmounts","allowedSlippage","pct","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","warningSeverity","lessThan","formatExecutionPrice","inverted","executionPrice","invert","toSignificant","currency","symbol","outputAmount"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/utils/prices.ts"],"sourcesContent":["import { BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants'\nimport { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from 'fomoswap-bera1'\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM } from '../constants'\nimport { Field } from '../state/swap/actions'\nimport { basisPointsToPercent } from './index'\n\nconst BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(\n  trade?: Trade\n): { priceImpactWithoutFee?: Percent; realizedLPFee?: CurrencyAmount } {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n          ONE_HUNDRED_PERCENT\n        )\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    (trade.inputAmount instanceof TokenAmount\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: Trade | undefined,\n  allowedSlippage: number\n): { [field in Field]?: CurrencyAmount } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct)\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}