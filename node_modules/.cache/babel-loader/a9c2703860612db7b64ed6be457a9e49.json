{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addPopup, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nexport function useBlockNumber() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useSelector(state => state.application.blockNumber[chainId !== null && chainId !== void 0 ? chainId : -1]);\n}\nexport function useWalletModalOpen() {\n  return useSelector(state => state.application.walletModalOpen);\n}\nexport function useWalletModalToggle() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\nexport function useSettingsMenuOpen() {\n  return useSelector(state => state.application.settingsMenuOpen);\n}\nexport function useToggleSettingsMenu() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup() {\n  const dispatch = useDispatch();\n  return useCallback((content, key) => {\n    dispatch(addPopup({\n      content,\n      key\n    }));\n  }, [dispatch]);\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup() {\n  const dispatch = useDispatch();\n  return useCallback(key => {\n    dispatch(removePopup({\n      key\n    }));\n  }, [dispatch]);\n}\n\n// get the list of active popups\nexport function useActivePopups() {\n  const list = useSelector(state => state.application.popupList);\n  return useMemo(() => list.filter(item => item.show), [list]);\n}","map":{"version":3,"names":["useCallback","useMemo","useActiveWeb3React","addPopup","removePopup","toggleWalletModal","toggleSettingsMenu","useSelector","useDispatch","useBlockNumber","chainId","state","application","blockNumber","useWalletModalOpen","walletModalOpen","useWalletModalToggle","dispatch","useSettingsMenuOpen","settingsMenuOpen","useToggleSettingsMenu","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/application/hooks.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { AppState } from '../index'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen)\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch])\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch])\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter(item => item.show), [list])\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5C,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,QAAQ,EAAgBC,WAAW,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,WAAW;AACtG,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAGtD,OAAO,SAASC,cAAcA,CAAA,EAAuB;EACnD,MAAM;IAAEC;EAAQ,CAAC,GAAGR,kBAAkB,CAAC,CAAC;EAExC,OAAOK,WAAW,CAAEI,KAAe,IAAKA,KAAK,CAACC,WAAW,CAACC,WAAW,CAACH,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,CAAC,CAAC,CAAC;AACvF;AAEA,OAAO,SAASI,kBAAkBA,CAAA,EAAY;EAC5C,OAAOP,WAAW,CAAEI,KAAe,IAAKA,KAAK,CAACC,WAAW,CAACG,eAAe,CAAC;AAC5E;AAEA,OAAO,SAASC,oBAAoBA,CAAA,EAAe;EACjD,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,OAAOR,WAAW,CAAC,MAAMiB,QAAQ,CAACZ,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAACY,QAAQ,CAAC,CAAC;AACrE;AAEA,OAAO,SAASC,mBAAmBA,CAAA,EAAY;EAC7C,OAAOX,WAAW,CAAEI,KAAe,IAAKA,KAAK,CAACC,WAAW,CAACO,gBAAgB,CAAC;AAC7E;AAEA,OAAO,SAASC,qBAAqBA,CAAA,EAAe;EAClD,MAAMH,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,OAAOR,WAAW,CAAC,MAAMiB,QAAQ,CAACX,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAACW,QAAQ,CAAC,CAAC;AACtE;;AAEA;AACA,OAAO,SAASI,WAAWA,CAAA,EAAkD;EAC3E,MAAMJ,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,OAAOR,WAAW,CAChB,CAACsB,OAAqB,EAAEC,GAAY,KAAK;IACvCN,QAAQ,CAACd,QAAQ,CAAC;MAAEmB,OAAO;MAAEC;IAAI,CAAC,CAAC,CAAC;EACtC,CAAC,EACD,CAACN,QAAQ,CACX,CAAC;AACH;;AAEA;AACA,OAAO,SAASO,cAAcA,CAAA,EAA0B;EACtD,MAAMP,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,OAAOR,WAAW,CACfuB,GAAW,IAAK;IACfN,QAAQ,CAACb,WAAW,CAAC;MAAEmB;IAAI,CAAC,CAAC,CAAC;EAChC,CAAC,EACD,CAACN,QAAQ,CACX,CAAC;AACH;;AAEA;AACA,OAAO,SAASQ,eAAeA,CAAA,EAAyC;EACtE,MAAMC,IAAI,GAAGnB,WAAW,CAAEI,KAAe,IAAKA,KAAK,CAACC,WAAW,CAACe,SAAS,CAAC;EAC1E,OAAO1B,OAAO,CAAC,MAAMyB,IAAI,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module"}