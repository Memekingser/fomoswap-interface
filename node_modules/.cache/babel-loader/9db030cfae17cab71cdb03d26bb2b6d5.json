{"ast":null,"code":"import { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport useDebounce from '../../hooks/useDebounce';\nimport chunkArray from '../../utils/chunkArray';\nimport { CancelledError, retry, RetryableError } from '../../utils/retry';\nimport { useBlockNumber } from '../application/hooks';\nimport { errorFetchingMulticallResults, fetchingMulticallResults, parseCallKey, updateMulticallResults } from './actions';\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500;\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(multicallContract, chunk, minBlockNumber) {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\n  let resultsBlockNumber, returnData;\n  try {\n    ;\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(chunk.map(obj => [obj.address, obj.callData]));\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error);\n    throw error;\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`);\n    throw new RetryableError('Fetched for old block number');\n  }\n  return {\n    results: returnData,\n    blockNumber: resultsBlockNumber.toNumber()\n  };\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(allListeners, chainId) {\n  if (!allListeners || !chainId) return {};\n  const listeners = allListeners[chainId];\n  if (!listeners) return {};\n  return Object.keys(listeners).reduce((memo, callKey) => {\n    const keyListeners = listeners[callKey];\n    memo[callKey] = Object.keys(keyListeners).filter(key => {\n      const blocksPerFetch = parseInt(key);\n      if (blocksPerFetch <= 0) return false;\n      return keyListeners[blocksPerFetch] > 0;\n    }).reduce((previousMin, current) => {\n      return Math.min(previousMin, parseInt(current));\n    }, Infinity);\n    return memo;\n  }, {});\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(callResults, listeningKeys, chainId, latestBlockNumber) {\n  if (!chainId || !latestBlockNumber) return [];\n  const results = callResults[chainId];\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys);\n  return Object.keys(listeningKeys).filter(callKey => {\n    const blocksPerFetch = listeningKeys[callKey];\n    const data = callResults[chainId][callKey];\n    // no data, must fetch\n    if (!data) return true;\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1);\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false;\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\n  });\n}\nexport default function Updater() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.multicall);\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100);\n  const latestBlockNumber = useBlockNumber();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const multicallContract = useMulticallContract();\n  const cancellations = useRef();\n  const listeningKeys = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId);\n  }, [debouncedListeners, chainId]);\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\n  const serializedOutdatedCallKeys = useMemo(() => JSON.stringify(unserializedOutdatedCallKeys.sort()), [unserializedOutdatedCallKeys]);\n  useEffect(() => {\n    var _cancellations$curren;\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\n    const outdatedCallKeys = JSON.parse(serializedOutdatedCallKeys);\n    if (outdatedCallKeys.length === 0) return;\n    const calls = outdatedCallKeys.map(key => parseCallKey(key));\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\n    if (((_cancellations$curren = cancellations.current) === null || _cancellations$curren === void 0 ? void 0 : _cancellations$curren.blockNumber) !== latestBlockNumber) {\n      var _cancellations$curren2, _cancellations$curren3;\n      (_cancellations$curren2 = cancellations.current) === null || _cancellations$curren2 === void 0 ? void 0 : (_cancellations$curren3 = _cancellations$curren2.cancellations) === null || _cancellations$curren3 === void 0 ? void 0 : _cancellations$curren3.forEach(c => c());\n    }\n    dispatch(fetchingMulticallResults({\n      calls,\n      chainId,\n      fetchingBlockNumber: latestBlockNumber\n    }));\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const {\n          cancel,\n          promise\n        } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500\n        });\n        promise.then(({\n          results: returnData,\n          blockNumber: fetchBlockNumber\n        }) => {\n          cancellations.current = {\n            cancellations: [],\n            blockNumber: latestBlockNumber\n          };\n\n          // accumulates the length of all previous indices\n          const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce((memo, curr) => memo + curr.length, 0);\n          const lastCallKeyIndex = firstCallKeyIndex + returnData.length;\n          dispatch(updateMulticallResults({\n            chainId,\n            results: outdatedCallKeys.slice(firstCallKeyIndex, lastCallKeyIndex).reduce((memo, callKey, i) => {\n              var _returnData$i;\n              memo[callKey] = (_returnData$i = returnData[i]) !== null && _returnData$i !== void 0 ? _returnData$i : null;\n              return memo;\n            }, {}),\n            blockNumber: fetchBlockNumber\n          }));\n        }).catch(error => {\n          if (error instanceof CancelledError) {\n            console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\n            return;\n          }\n          console.error('Failed to fetch multicall chunk', chunk, chainId, error);\n          dispatch(errorFetchingMulticallResults({\n            calls: chunk,\n            chainId,\n            fetchingBlockNumber: latestBlockNumber\n          }));\n        });\n        return cancel;\n      })\n    };\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\n  return null;\n}","map":{"version":3,"names":["useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","chunkArray","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","CALL_CHUNK_SIZE","fetchChunk","multicallContract","chunk","minBlockNumber","console","debug","resultsBlockNumber","returnData","aggregate","map","obj","address","callData","error","toNumber","toString","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","Object","keys","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","multicall","debouncedListeners","callListeners","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","_cancellations$curren","outdatedCallKeys","parse","length","calls","chunkedCalls","_cancellations$curren2","_cancellations$curren3","forEach","c","index","cancel","promise","n","minWait","maxWait","then","fetchBlockNumber","firstCallKeyIndex","slice","curr","lastCallKeyIndex","i","_returnData$i","catch"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/state/multicall/updater.tsx"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport useDebounce from '../../hooks/useDebounce'\nimport chunkArray from '../../utils/chunkArray'\nimport { CancelledError, retry, RetryableError } from '../../utils/retry'\nimport { useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults\n} from './actions'\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\n  let resultsBlockNumber, returnData\n  try {\n    ;[resultsBlockNumber, returnData] = await multicallContract.aggregate(chunk.map(obj => [obj.address, obj.callData]))\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error)\n    throw error\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\n    throw new RetryableError('Fetched for old block number')\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter(key => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter(callKey => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\nexport default function Updater() {\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['multicall']>(state => state.multicall)\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const latestBlockNumber = useBlockNumber()\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticallContract()\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\n\n  const serializedOutdatedCallKeys = useMemo(() => JSON.stringify(unserializedOutdatedCallKeys.sort()), [\n    unserializedOutdatedCallKeys\n  ])\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !multicallContract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map(key => parseCallKey(key))\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\n\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\n      cancellations.current?.cancellations?.forEach(c => c())\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber\n      })\n    )\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500\n        })\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber }\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null\n                    return memo\n                  }, {}),\n                blockNumber: fetchBlockNumber\n              })\n            )\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber)\n              return\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: latestBlockNumber\n              })\n            )\n          })\n        return cancel\n      })\n    }\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber])\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}