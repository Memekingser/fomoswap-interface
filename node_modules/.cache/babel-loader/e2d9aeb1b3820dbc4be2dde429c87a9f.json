{"ast":null,"code":"import { ChainId } from 'fomoswap-storytestnet';\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nexport const OVERLAY_READY = 'OVERLAY_READY';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan'\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n      const {\n        apiKey,\n        chainId\n      } = this;\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`);\n      }\n    }\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n}","map":{"version":3,"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","ROPSTEN","RINKEBY","KOVAN","activate","fortmatic","default","Fortmatic","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/connectors/Fortmatic.ts"],"sourcesContent":["import { ChainId } from 'fomoswap-storytestnet'\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\n\nexport const OVERLAY_READY = 'OVERLAY_READY'\n\ntype FormaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.ROPSTEN | ChainId.RINKEBY | ChainId.KOVAN>\n\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan'\n}\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n      const { apiKey, chainId } = this as any\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`)\n      }\n    }\n\n    const provider = this.fortmatic.getProvider()\n\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval)\n          this.emit(OVERLAY_READY)\n          resolve()\n        }\n      }, 200)\n    })\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady\n    ])\n\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,kBAAkB,IAAIC,sBAAsB,QAAQ,iCAAiC;AAE9F,OAAO,MAAMC,aAAa,GAAG,eAAe;AAI5C,MAAMC,yBAAgG,GAAG;EACvG,CAACJ,OAAO,CAACK,OAAO,GAAGC,SAAS;EAC5B,CAACN,OAAO,CAACO,OAAO,GAAG,SAAS;EAC5B,CAACP,OAAO,CAACQ,OAAO,GAAG,SAAS;EAC5B,CAACR,OAAO,CAACS,KAAK,GAAG;AACnB,CAAC;AAED,OAAO,MAAMR,kBAAkB,SAASC,sBAAsB,CAAC;EAC7D,MAAMQ,QAAQA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,MAAM;QAAEC,OAAO,EAAEC;MAAU,CAAC,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC;MACxD,MAAM;QAAEC,MAAM;QAAEC;MAAQ,CAAC,GAAG,IAAW;MACvC,IAAIA,OAAO,IAAIX,yBAAyB,EAAE;QACxC,IAAI,CAACO,SAAS,GAAG,IAAIE,SAAS,CAACC,MAAM,EAAEV,yBAAyB,CAACW,OAAO,CAA4B,CAAC;MACvG,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,2BAA2BD,OAAO,EAAE,CAAC;MACvD;IACF;IAEA,MAAME,QAAQ,GAAG,IAAI,CAACN,SAAS,CAACO,WAAW,CAAC,CAAC;IAE7C,MAAMC,mBAAmB,GAAG,IAAIC,OAAO,CAACC,OAAO,IAAI;MACjD,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAIN,QAAQ,CAACO,YAAY,EAAE;UACzBC,aAAa,CAACH,QAAQ,CAAC;UACvB,IAAI,CAACI,IAAI,CAACvB,aAAa,CAAC;UACxBkB,OAAO,CAAC,CAAC;QACX;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;IAEF,MAAM,CAACM,OAAO,CAAC,GAAG,MAAMP,OAAO,CAACQ,GAAG,CAAC,CAClCX,QAAQ,CAACY,MAAM,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAkB,IAAKA,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC3DZ,mBAAmB,CACpB,CAAC;IAEF,OAAO;MAAEF,QAAQ,EAAE,IAAI,CAACN,SAAS,CAACO,WAAW,CAAC,CAAC;MAAEH,OAAO,EAAG,IAAI,CAASA,OAAO;MAAEY;IAAQ,CAAC;EAC5F;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}