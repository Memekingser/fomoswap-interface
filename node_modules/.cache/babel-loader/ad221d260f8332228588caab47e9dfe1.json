{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { FortmaticConnector } from './Fortmatic';\nimport { NetworkConnector } from './NetworkConnector';\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID;\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\nexport const network = new NetworkConnector({\n  urls: {\n    [Number(process.env.REACT_APP_CHAIN_ID)]: NETWORK_URL\n  }\n});\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 11155111, 130, 80084]\n});\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n});\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY !== null && FORMATIC_KEY !== void 0 ? FORMATIC_KEY : '',\n  chainId: 1\n});\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID !== null && PORTIS_ID !== void 0 ? PORTIS_ID : '',\n  networks: [1]\n});\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl: 'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n});","map":{"version":3,"names":["InjectedConnector","WalletConnectConnector","WalletLinkConnector","PortisConnector","FortmaticConnector","NetworkConnector","NETWORK_URL","process","env","REACT_APP_NETWORK_URL","FORMATIC_KEY","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","Error","network","urls","Number","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","fortmatic","apiKey","chainId","portis","dAppId","networks","walletlink","url","appName","appLogoUrl"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/connectors/index.ts"],"sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\n\nimport { FortmaticConnector } from './Fortmatic'\nimport { NetworkConnector } from './NetworkConnector'\n\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\n}\n\nexport const network = new NetworkConnector({\n  urls: { [Number(process.env.REACT_APP_CHAIN_ID)]: NETWORK_URL }\n})\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 11155111, 130, 80084]\n})\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [1]\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n})\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE,SAASC,eAAe,QAAQ,8BAA8B;AAE9D,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AACrD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB;AACxD,MAAMC,SAAS,GAAGL,OAAO,CAACC,GAAG,CAACK,mBAAmB;AAEjD,IAAI,OAAOP,WAAW,KAAK,WAAW,EAAE;EACtC,MAAM,IAAIQ,KAAK,CAAC,8DAA8D,CAAC;AACjF;AAEA,OAAO,MAAMC,OAAO,GAAG,IAAIV,gBAAgB,CAAC;EAC1CW,IAAI,EAAE;IAAE,CAACC,MAAM,CAACV,OAAO,CAACC,GAAG,CAACU,kBAAkB,CAAC,GAAGZ;EAAY;AAChE,CAAC,CAAC;AAEF,OAAO,MAAMa,QAAQ,GAAG,IAAInB,iBAAiB,CAAC;EAC5CoB,iBAAiB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK;AAC1D,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAG,IAAIpB,sBAAsB,CAAC;EACtDqB,GAAG,EAAE;IAAE,CAAC,EAAEhB;EAAY,CAAC;EACvBiB,MAAM,EAAE,kCAAkC;EAC1CC,MAAM,EAAE,IAAI;EACZC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,SAAS,GAAG,IAAItB,kBAAkB,CAAC;EAC9CuB,MAAM,EAAEjB,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAI,EAAE;EAC1BkB,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,MAAM,GAAG,IAAI1B,eAAe,CAAC;EACxC2B,MAAM,EAAElB,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE;EACvBmB,QAAQ,EAAE,CAAC,CAAC;AACd,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAG,IAAI9B,mBAAmB,CAAC;EAChD+B,GAAG,EAAE3B,WAAW;EAChB4B,OAAO,EAAE,SAAS;EAClBC,UAAU,EACR;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}