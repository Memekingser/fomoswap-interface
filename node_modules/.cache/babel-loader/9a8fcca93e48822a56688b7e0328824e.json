{"ast":null,"code":"/**\n * Given a URI that may be ipfs, or http, or an ENS name, return the fetchable http(s) URLs for the same content\n * @param uri to convert to http url\n */\nexport default function uriToHttp(uri) {\n  try {\n    const parsed = new URL(uri);\n    if (parsed.protocol === 'http:') {\n      return ['https' + uri.substr(4), uri];\n    } else if (parsed.protocol === 'https:') {\n      return [uri];\n    } else if (parsed.protocol === 'ipfs:') {\n      var _parsed$href$match;\n      const hash = (_parsed$href$match = parsed.href.match(/^ipfs:(\\/\\/)?(.*)$/)) === null || _parsed$href$match === void 0 ? void 0 : _parsed$href$match[2];\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\n    } else if (parsed.protocol === 'ipns:') {\n      var _parsed$href$match2;\n      const name = (_parsed$href$match2 = parsed.href.match(/^ipns:(\\/\\/)?(.*)$/)) === null || _parsed$href$match2 === void 0 ? void 0 : _parsed$href$match2[2];\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\n    } else {\n      return [];\n    }\n  } catch (error) {\n    if (uri.toLowerCase().endsWith('.eth')) {\n      return [`https://${uri.toLowerCase()}.link`];\n    }\n    return [];\n  }\n}","map":{"version":3,"names":["uriToHttp","uri","parsed","URL","protocol","substr","_parsed$href$match","hash","href","match","_parsed$href$match2","name","error","toLowerCase","endsWith"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/utils/uriToHttp.ts"],"sourcesContent":["/**\n * Given a URI that may be ipfs, or http, or an ENS name, return the fetchable http(s) URLs for the same content\n * @param uri to convert to http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  try {\n    const parsed = new URL(uri)\n    if (parsed.protocol === 'http:') {\n      return ['https' + uri.substr(4), uri]\n    } else if (parsed.protocol === 'https:') {\n      return [uri]\n    } else if (parsed.protocol === 'ipfs:') {\n      const hash = parsed.href.match(/^ipfs:(\\/\\/)?(.*)$/)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    } else if (parsed.protocol === 'ipns:') {\n      const name = parsed.href.match(/^ipns:(\\/\\/)?(.*)$/)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    } else {\n      return []\n    }\n  } catch (error) {\n    if (uri.toLowerCase().endsWith('.eth')) {\n      return [`https://${uri.toLowerCase()}.link`]\n    }\n    return []\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAASA,CAACC,GAAW,EAAY;EACvD,IAAI;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;IAC3B,IAAIC,MAAM,CAACE,QAAQ,KAAK,OAAO,EAAE;MAC/B,OAAO,CAAC,OAAO,GAAGH,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,EAAEJ,GAAG,CAAC;IACvC,CAAC,MAAM,IAAIC,MAAM,CAACE,QAAQ,KAAK,QAAQ,EAAE;MACvC,OAAO,CAACH,GAAG,CAAC;IACd,CAAC,MAAM,IAAIC,MAAM,CAACE,QAAQ,KAAK,OAAO,EAAE;MAAA,IAAAE,kBAAA;MACtC,MAAMC,IAAI,IAAAD,kBAAA,GAAGJ,MAAM,CAACM,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,cAAAH,kBAAA,uBAAvCA,kBAAA,CAA0C,CAAC,CAAC;MACzD,OAAO,CAAC,oCAAoCC,IAAI,GAAG,EAAE,wBAAwBA,IAAI,GAAG,CAAC;IACvF,CAAC,MAAM,IAAIL,MAAM,CAACE,QAAQ,KAAK,OAAO,EAAE;MAAA,IAAAM,mBAAA;MACtC,MAAMC,IAAI,IAAAD,mBAAA,GAAGR,MAAM,CAACM,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,cAAAC,mBAAA,uBAAvCA,mBAAA,CAA0C,CAAC,CAAC;MACzD,OAAO,CAAC,oCAAoCC,IAAI,GAAG,EAAE,wBAAwBA,IAAI,GAAG,CAAC;IACvF,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIX,GAAG,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACtC,OAAO,CAAC,WAAWb,GAAG,CAACY,WAAW,CAAC,CAAC,OAAO,CAAC;IAC9C;IACA,OAAO,EAAE;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}