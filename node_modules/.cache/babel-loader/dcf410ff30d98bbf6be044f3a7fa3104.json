{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\n// taken from ethers.js, compatible interface with web3 provider\n\nclass RequestError extends Error {\n  constructor(message, code, data) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\nclass MiniRpcProvider {\n  constructor(chainId, url, batchWaitTimeMs) {\n    this.isMetaMask = false;\n    this.chainId = void 0;\n    this.url = void 0;\n    this.host = void 0;\n    this.path = void 0;\n    this.batchWaitTimeMs = void 0;\n    this.nextId = 1;\n    this.batchTimeoutId = null;\n    this.batch = [];\n    this.clearBatch = async () => {\n      console.debug('Clearing batch', this.batch);\n      const batch = this.batch;\n      this.batch = [];\n      this.batchTimeoutId = null;\n      let response;\n      try {\n        response = await fetch(this.url, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json',\n            accept: 'application/json'\n          },\n          body: JSON.stringify(batch.map(item => item.request))\n        });\n      } catch (error) {\n        batch.forEach(({\n          reject\n        }) => reject(new Error('Failed to send batch call')));\n        return;\n      }\n      if (!response.ok) {\n        batch.forEach(({\n          reject\n        }) => reject(new RequestError(`${response.status}: ${response.statusText}`, -32000)));\n        return;\n      }\n      let json;\n      try {\n        json = await response.json();\n      } catch (error) {\n        batch.forEach(({\n          reject\n        }) => reject(new Error('Failed to parse JSON response')));\n        return;\n      }\n      const byKey = batch.reduce((memo, current) => {\n        memo[current.request.id] = current;\n        return memo;\n      }, {});\n      for (const result of json) {\n        const {\n          resolve,\n          reject,\n          request: {\n            method\n          }\n        } = byKey[result.id];\n        if (resolve && reject) {\n          if ('error' in result) {\n            var _result$error, _result$error2, _result$error3;\n            reject(new RequestError(result === null || result === void 0 ? void 0 : (_result$error = result.error) === null || _result$error === void 0 ? void 0 : _result$error.message, result === null || result === void 0 ? void 0 : (_result$error2 = result.error) === null || _result$error2 === void 0 ? void 0 : _result$error2.code, result === null || result === void 0 ? void 0 : (_result$error3 = result.error) === null || _result$error3 === void 0 ? void 0 : _result$error3.data));\n          } else if ('result' in result) {\n            resolve(result.result);\n          } else {\n            reject(new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, result));\n          }\n        }\n      }\n    };\n    this.sendAsync = (request, callback) => {\n      this.request(request.method, request.params).then(result => callback(null, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result\n      })).catch(error => callback(error, null));\n    };\n    this.request = async (method, params) => {\n      var _this$batchTimeoutId;\n      if (typeof method !== 'string') {\n        return this.request(method.method, method.params);\n      }\n      if (method === 'eth_chainId') {\n        return `0x${this.chainId.toString(16)}`;\n      }\n      const promise = new Promise((resolve, reject) => {\n        this.batch.push({\n          request: {\n            jsonrpc: '2.0',\n            id: this.nextId++,\n            method,\n            params\n          },\n          resolve,\n          reject\n        });\n      });\n      this.batchTimeoutId = (_this$batchTimeoutId = this.batchTimeoutId) !== null && _this$batchTimeoutId !== void 0 ? _this$batchTimeoutId : setTimeout(this.clearBatch, this.batchWaitTimeMs);\n      return promise;\n    };\n    this.chainId = chainId;\n    this.url = url;\n    const parsed = new URL(url);\n    this.host = parsed.host;\n    this.path = parsed.pathname;\n    // how long to wait to batch calls\n    this.batchWaitTimeMs = batchWaitTimeMs !== null && batchWaitTimeMs !== void 0 ? batchWaitTimeMs : 50;\n  }\n}\nexport class NetworkConnector extends AbstractConnector {\n  constructor({\n    urls,\n    defaultChainId\n  }) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url');\n    super({\n      supportedChainIds: Object.keys(urls).map(k => Number(k))\n    });\n    this.providers = void 0;\n    this.currentChainId = void 0;\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    this.providers = Object.keys(urls).reduce((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n  }\n  async activate() {\n    return {\n      provider: this.providers[this.currentChainId],\n      chainId: this.currentChainId,\n      account: null\n    };\n  }\n  async getProvider() {\n    return this.providers[this.currentChainId];\n  }\n  async getChainId() {\n    return this.currentChainId;\n  }\n  async getAccount() {\n    return null;\n  }\n  deactivate() {\n    return;\n  }\n}","map":{"version":3,"names":["AbstractConnector","invariant","RequestError","Error","constructor","message","code","data","MiniRpcProvider","chainId","url","batchWaitTimeMs","isMetaMask","host","path","nextId","batchTimeoutId","batch","clearBatch","console","debug","response","fetch","method","headers","accept","body","JSON","stringify","map","item","request","error","forEach","reject","ok","status","statusText","json","byKey","reduce","memo","current","id","result","resolve","_result$error","_result$error2","_result$error3","sendAsync","callback","params","then","jsonrpc","catch","_this$batchTimeoutId","toString","promise","Promise","push","setTimeout","parsed","URL","pathname","NetworkConnector","urls","defaultChainId","Object","keys","length","supportedChainIds","k","Number","providers","currentChainId","accumulator","activate","provider","account","getProvider","getChainId","getAccount","deactivate"],"sources":["/Users/synallage/Desktop/fomoswap-uni/interface-73580de922ce3ff642430d71aa24f5c053e6dd4d/src/connectors/NetworkConnector.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string }\n  defaultChainId?: number\n}\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void\n  send?: (request: any, callback: (error: any, response: any) => void) => void\n}\n\nclass RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super(message)\n  }\n}\n\ninterface BatchItem {\n  request: { jsonrpc: '2.0'; id: number; method: string; params: unknown }\n  resolve: (result: any) => void\n  reject: (error: Error) => void\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false\n  public readonly chainId: number\n  public readonly url: string\n  public readonly host: string\n  public readonly path: string\n  public readonly batchWaitTimeMs: number\n\n  private nextId = 1\n  private batchTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private batch: BatchItem[] = []\n\n  constructor(chainId: number, url: string, batchWaitTimeMs?: number) {\n    this.chainId = chainId\n    this.url = url\n    const parsed = new URL(url)\n    this.host = parsed.host\n    this.path = parsed.pathname\n    // how long to wait to batch calls\n    this.batchWaitTimeMs = batchWaitTimeMs ?? 50\n  }\n\n  public readonly clearBatch = async () => {\n    console.debug('Clearing batch', this.batch)\n    const batch = this.batch\n    this.batch = []\n    this.batchTimeoutId = null\n    let response: Response\n    try {\n      response = await fetch(this.url, {\n        method: 'POST',\n        headers: { 'content-type': 'application/json', accept: 'application/json' },\n        body: JSON.stringify(batch.map(item => item.request))\n      })\n    } catch (error) {\n      batch.forEach(({ reject }) => reject(new Error('Failed to send batch call')))\n      return\n    }\n\n    if (!response.ok) {\n      batch.forEach(({ reject }) => reject(new RequestError(`${response.status}: ${response.statusText}`, -32000)))\n      return\n    }\n\n    let json\n    try {\n      json = await response.json()\n    } catch (error) {\n      batch.forEach(({ reject }) => reject(new Error('Failed to parse JSON response')))\n      return\n    }\n    const byKey = batch.reduce<{ [id: number]: BatchItem }>((memo, current) => {\n      memo[current.request.id] = current\n      return memo\n    }, {})\n    for (const result of json) {\n      const {\n        resolve,\n        reject,\n        request: { method }\n      } = byKey[result.id]\n      if (resolve && reject) {\n        if ('error' in result) {\n          reject(new RequestError(result?.error?.message, result?.error?.code, result?.error?.data))\n        } else if ('result' in result) {\n          resolve(result.result)\n        } else {\n          reject(new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, result))\n        }\n      }\n    }\n  }\n\n  public readonly sendAsync = (\n    request: { jsonrpc: '2.0'; id: number | string | null; method: string; params?: unknown[] | object },\n    callback: (error: any, response: any) => void\n  ): void => {\n    this.request(request.method, request.params)\n      .then(result => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch(error => callback(error, null))\n  }\n\n  public readonly request = async (\n    method: string | { method: string; params: unknown[] },\n    params?: unknown[] | object\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      return this.request(method.method, method.params)\n    }\n    if (method === 'eth_chainId') {\n      return `0x${this.chainId.toString(16)}`\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.batch.push({\n        request: {\n          jsonrpc: '2.0',\n          id: this.nextId++,\n          method,\n          params\n        },\n        resolve,\n        reject\n      })\n    })\n    this.batchTimeoutId = this.batchTimeoutId ?? setTimeout(this.clearBatch, this.batchWaitTimeMs)\n    return promise\n  }\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider }\n  private currentChainId: number\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)])\n      return accumulator\n    }, {})\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId]\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return null\n  }\n\n  public deactivate() {\n    return\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}